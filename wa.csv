id,title,link,pillar,topic,level,summary
OPS01-BP01,Evaluate external customer needs,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_priorities_ext_cust_needs.html,Operational Excellence,Organization priorities,High,"**Compliance Control (max 500 chars)**Engage business, development, and operations teams to align on customer needs and operational support. Focus on customer outcomes, ensuring operational practices support business goals. Avoid anti-patterns like neglecting customer support data or developing features without customer input. Benefits include customer retention. Risks of inaction are high; understand business needs, review customer priorities, and establish shared understanding across teams to deliver value. Related: OPS11-BP03 - Implement feedback loops."
OPS01-BP02,Evaluate internal customer needs,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_priorities_int_cust_needs.html,Operational Excellence,Organization priorities,High,"**Compliance Control (max 500 chars):**Engage business, development, and operations teams to determine focus areas for internal customer needs, ensuring a shared understanding of required operational support for business outcomes. Update priorities as needs change. Avoid unilateral decisions like changing IP allocations without consulting teams. Benefits include informed prioritization for business value. Risks of not establishing this practice are high. Related: OPS11-BP03 Implement feedback loops."
OPS01-BP03,Evaluate governance requirements,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_priorities_governance_reqs.html,Operational Excellence,Organization priorities,High,"**Compliance Control for Governance Requirements****Objective:** Incorporate governance requirements into workload design and operations, demonstrate conformance, and regularly review updates.**Outcomes:**- Governance requirements integrated into workload architecture and operations.- Proof of compliance with governance requirements.- Regular review and updates of governance requirements.**Anti-patterns:**- Ignoring mandated multi-factor authentication leading to root account compromise.- Choosing non-approved instance types causing launch failures.- Lack of disaster recovery plans resulting in extended outages.**Benefits:**- Aligns workload with organizational policies and industry standards.- High risk exposure if not established.**Implementation Steps:**1. Identify stakeholders and governance requirements.2. Prioritize and implement requirements.3. Use AWS Config and Service Control Policies for validation.4. Document and validate implementation.**Example:** AnyCompany Retail collaborates with stakeholders to develop and update governance requirements, prohibiting SSH access and mandating AWS Systems Manager for system access.**Effort:** Medium; may require workload rework.**Related Practices:** OPS01-BP04 Evaluate compliance requirements."
OPS01-BP04,Evaluate compliance requirements,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_priorities_compliance_reqs.html,Operational Excellence,Organization priorities,High,"**Compliance Control Summary (max 500 chars)**Ensure regulatory, industry, and internal compliance by integrating frameworks into architectural selection. Validate compliance via audits/reports, adhering to standards like PCI DSS, FedRAMP, and HIPAA. Address risks by encrypting sensitive data, educating staff, and automating audit processes with tools like AWS Audit Manager and AWS Security Hub. Failure to comply exposes high risk; successful implementation ensures aligned architectural choices and audit readiness."
OPS01-BP05,Evaluate threat landscape,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_priorities_eval_threat_landscape.html,Operational Excellence,Organization priorities,Medium,"**Compliance Control Summary (max 500 chars):**Regularly review and act on AWS Well-Architected and Trusted Advisor outputs. Maintain a current risk registry with impact assessments for competition, business risks, operational risks, and information security threats. Prioritize efforts based on risk impact. Use AWS Trusted Advisor for optimizations and latest security bulletins. Establish and update a threat model with mitigations and their priorities. Communicate actions and context. Failure to establish this best practice exposes medium risk.**Benefits:** Identify and prioritize threats, determine necessary resources. **Common Anti-Patterns:** Using outdated libraries, ignoring competitor advancements, neglecting compliance. **Related:** SEC01-BP07, AWS Compliance, Trusted Advisor, Security Bulletins."
OPS01-BP06,Evaluate tradeoffs while managing benefits and risks,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_priorities_eval_tradeoffs.html,Operational Excellence,Organization priorities,Medium,"**Compliance Control for Cloud Delivery Decision-Making Framework**To ensure compliance and effective decision-making in cloud delivery, establish a governance framework with a risk register, defined roles, and conflict resolution models. Prioritize decisions based on business goals, assess benefits vs. risks, and incorporate compliance. Use AWS resources for team education. Balance central control with decentralized authority, and automate compliance adherence. Implement medium-high effort for full alignment with business priorities and risk management."
OPS02-BP01,Resources have identified owners,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_ops_model_def_resource_owners.html,Operational Excellence,Relationships and ownership,High,"**Compliance Control for Resource Ownership**Ensure resources have identified owners for change control, troubleshooting, and other functions. Assign ownership for workloads, accounts, infrastructure, platforms, and applications, recording it via central registers or metadata. Business value informs applied processes. Common anti-patterns include unpopulated alternate contacts, missing resource tags, ITSM queues without email mappings, and overlapping ownership. Benefits include straightforward change control and accurate issue troubleshooting. High risk is exposed if not established. Define ownership for risk, change, support, and financial accountability, specifying owners' names, contact info, organization, and team. Use tools like AWS Organizations and tags for AWS resources; document ownership for other platforms. Effort: Low. Leverage account contacts, tags, or documentation. Related: OPS02-BP02, OPS02-BP04. Docs: AWS Account Management, AWS Organizations, Tagging Best Practices."
OPS02-BP02,Processes and procedures have identified owners,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_ops_model_def_proc_owners.html,Operational Excellence,Relationships and ownership,High,"To ensure compliance with operational processes, identify ownership of each process, document reasons for their use, and establish ownership clarity. Centralize documentation, frequently update it, and implement scripts as code. Avoid fragmented scripts, unclear ownership, and lack of discoverability. Benefits include operational efficiency, quicker onboarding, incident mitigation, consistency, scalability, and reduced transition risks. High risk exists if not established. Identify operations, document them centrally, assign unique owners, use metadata and tags for ownership, evolve procedures to code, and perform version control. Example: AnyCompany Retail uses AWS tools for process automation and documentation. Document, review, and keep processes up-to-date; assign owners, control versions, share across environments, and establish feedback mechanisms. Ensure accessibility with tags and meaningful messaging. Automate where possible, educate on processes, and measure success. Medium effort for implementation. Related practices: resource ownership, responsibility management, knowledge management. Related documents, workshops, videos, and services."
OPS02-BP03,Operations activities have identified owners responsible for their performance,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_ops_model_def_activity_owners.html,Operational Excellence,Relationships and ownership,High,"**Compliance Control for Responsibility Definition****Objective:** Ensure clear definition and documentation of responsibility for specific activities on defined workloads.**Key Actions:**1. **Document Responsibilities**: Identify and document who is responsible for activities, processes, and procedures.2. **Ownership Verification**: Confirm each process has an owner, and verify documentation is up-to-date.3. **Version Control**: Place all processes under version control.4. **Feedback Mechanisms**: Establish policies for review, approval, and feedback on processes.5. **Accessibility**: Use tags and documentation management for discoverability.6. **Automation**: Where feasible, automate processes using APIs.**Risk Level:** High if not established.**Related Practices:** OPS02-BP01, OPS02-BP02, OPS02-BP04, OPS02-BP05, OPS11-BP04.**Example:** AnyCompany Retail tags processes for discoverability and converts them to automations.**Resources:** AWS whitepapers, blogs, workshops, and videos on DevOps, tagging, and automation."
OPS02-BP04,Mechanisms exist to manage responsibilities and ownership,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_ops_model_def_responsibilities_ownership.html,Operational Excellence,Relationships and ownership,High,"**Compliance Control for Role Clarity and Responsibility Assignment**Ensure team members understand their responsibilities and how they contribute to business outcomes. Establish clear ownership for tasks, define escalation paths for unclear responsibilities, and document these in accessible formats like wikis or responsibility matrices. Align roles with responsibilities, goals, and the organization's objectives. Regularly update responsibilities to match team tasks and ensure escalation paths are clear and owned. Benefits include reduced confusion, better workload management, and clear contact points for organizational needs. Failure to establish this practice risks high levels of confusion and inaction.**Implementation Steps:**1. Review existing documentation (RACI matrices, team wikis).2. Host discussions to identify misalignments.3. Analyze discrepancies and define improvement opportunities.4. Assign responsibility for managing role clarity.5. Create a clear process for responsibility clarification and escalation.6. Document and review processes, ensuring metrics and feedback mechanisms are in place.**Related Best Practices and Resources:**- OPS01-BP06, OPS03-BP02, OPS03-BP03, OPS03-BP07, OPS09-BP01, OPS09-BP03, OPS11-BP01- AWS whitepapers, blogs, and videos on DevOps, cloud adoption, and operating models."
OPS02-BP05,"Mechanisms exist to request additions, changes, and exceptions",https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_ops_model_req_add_chg_exception.html,Operational Excellence,Relationships and ownership,Medium,"Compliance control for change requests in processes, procedures, and resources involves designated owners who can request additions, changes, and exceptions. These requests undergo a change management process, allowing informed decisions based on benefit-risk evaluations. Aim for deliberate changes, avoiding anti-patterns like untraceable deployment updates or missing disaster recovery owners. Benefits include evolving processes and informed ownership decisions. Risks of non-compliance are medium; implement by identifying owners, developing a lightweight change management process, and documenting it. Example: AnyCompany Retail uses a RACI matrix and a simple change process. Steps: identify owners, develop a change process, document it. Effort: medium, requires stakeholder alignment. Related: OPS02-BP01, OPS02-BP02, OPS02-BP03; AWS Systems Manager Change Manager."
OPS02-BP06,Responsibilities between teams are predefined or negotiated,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_ops_model_def_neg_team_agreements.html,Operational Excellence,Relationships and ownership,Low,"Compliance Control for Inter-team Agreements:Ensure defined agreements between teams outlining how they collaborate, including response times, SLAs, and communication channels. Document inter-team impact on business outcomes to prioritize tasks. Risks include redundant efforts and missed activities. Desired outcome: documented agreements and communication channels. Anti-patterns: siloed troubleshooting, unclear response times. Benefits: clear interaction, known responsiveness, defined channels. Level of risk: low if not established. Example: AnyCompany Retail's SRE and dev teams have a 15-min response SLA. Implementation: develop agreements, document processes, and responsibilities. Effort: medium if no existing agreements. Related: OPS02-BP02, OPS02-BP03. Docs: AWS Executive Insights, Intro to DevOps on AWS."
OPS03-BP01,Provide executive sponsorship,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_org_culture_executive_sponsor.html,Operational Excellence,Organizational culture,High,"**Compliance Control for Cloud Operations Best Practices**To ensure successful cloud operations, senior leadership must act as an executive sponsor, setting clear expectations and direction. This sponsor advocates best practices and drives transformation. Organizations should establish clear leadership and accountability for outcomes, assigning ownership to functional teams. Key steps include:1. **Define Vision and Strategy**: Clearly articulate the vision and strategy for cloud transformation.2. **Set Clear Goals**: Establish measurable goals and communicate how progress will be tracked.3. **Engage Leadership**: Actively involve top leadership to align teams and strategies.4. **Resource Allocation**: Provide necessary resources and support for teams to achieve goals.5. **Monitor and Adjust**: Regularly measure progress and adjust strategies based on feedback and outcomes.Failure to establish this control can lead to confusion, lack of innovation, and stalled transformation efforts. High-risk scenarios include unaligned teams and unclear objectives."
OPS03-BP02,Team members are empowered to take action when outcomes are at risk,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_org_culture_team_emp_take_action.html,Operational Excellence,Organizational culture,Medium,"**Compliance Control for Empowerment and Ownership Culture****Objective:** Develop a culture where employees feel empowered to act beyond their defined roles, fostering ownership, proactive risk identification, and high-value decision-making with situational awareness.**Guidelines:**- **Leadership Influence:** Leadership should instill a culture where employees feel empowered to make decisions and take actions to benefit the company.- **Clear Guidance:** Establish clear procedures for risk identification and escalation to ensure timely and appropriate responses.- **Ownership and Accountability:** Define and communicate clear ownership and accountability for various functional areas.- **Decision Levels:** Define one-way and two-way door decisions to guide when escalation to higher leadership is required.- **Training and Practice:** Provide documentation, tools, and opportunities for team members to practice decision-making skills.- **Knowledge Sharing:** Encourage teams to share operational successes and failures.- **Iterative Learning:** Accept failures as part of the learning process and incentivize improvements.- **Permissions:** Assign permissions and access to ensure team members can act within their authority.**Risk Exposure:** Medium. Without these controls, risks include data breaches, failed deployments, and operational inefficiencies.**Implementation Effort:** Medium. Requires defining roles, training, and establishing communication channels.**Related Practices:** Evaluate tradeoffs (OPS01-BP06), identify responsibility (OPS02-BP05)."
OPS03-BP03,Escalation is encouraged,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_org_culture_team_enc_escalation.html,Operational Excellence,Organizational culture,High,"**Compliance Control for Issue Escalation:**Teams must escalate issues early to higher leadership if outcomes are at risk. Leadership encourages this to foster a proactive culture, with no retribution for escalations. Policies should define escalation procedures, impact details, and response actions. Mechanisms like an Andon cord should be in place, and training should ensure understanding. Leadership must periodically reinforce these practices. Non-compliance risks high organizational impact.**Implementation Plan:**- Medium effort to embed escalation culture, train staff, and establish procedures."
OPS03-BP04,"Communications are timely, clear, and actionable",https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_org_culture_effective_comms.html,Operational Excellence,Organizational culture,High,"To ensure compliance with effective communication strategies, establish a core team to develop communication plans for organizational changes. Institute single-threaded ownership, agree on standards, and ensure consistent messaging. Use tools like AWS Chatbot and Systems Manager Change Calendar for alerts and event scheduling. Foster diversity, provide necessary context, and measure communication effectiveness. Related best practices include executive sponsorship and use of runbooks/playbooks. Utilize AWS services like Chatbot and Systems Manager Documents for operational support."
OPS03-BP05,Experimentation is encouraged,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_org_culture_team_enc_experiment.html,Operational Excellence,Organizational culture,Medium,"**Compliance Control for Experimentation**Your organization encourages innovation through experimentation, fostering a culture of learning and engagement. Experiments are seen as opportunities to learn, and team members are not penalized for experiments with undesired outcomes. **Common Anti-Patterns:**- Lack of experimentation mechanisms leading to negative customer experiences.- Experimenting in production without a sandbox, risking production stability.**Benefits:**- Drives innovation.- Faster feedback response.- Develops a learning culture.**Risk Level: Medium.** Without safe experimentation practices, risks to production integrity increase.**Implementation Steps:**- Gain leadership support.- Provide safe experimentation environments (e.g., AWS sandbox).- Use feature flags and A/B testing.**Related Best Practices:**- Post-incident analysis (OPS11-BP02).- Feedback loops (OPS11-BP03).**Tools:**- AWS AppConfig Feature Flags- Amazon CloudWatch Evidently- AWS Control Tower**Effort Level: High.** Significant investment needed for environment setup and code modifications."
OPS03-BP06,Team members are encouraged to maintain and grow their skill sets,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_org_culture_team_enc_learn.html,Operational Excellence,Organizational culture,Medium,"**Compliance Control for Team Skill Development**To ensure teams adapt to new technologies and support workload demands, invest in structured skill growth. Encourage continuous learning, cross-training, and industry certification. Use AWS resources like the Skills Guild, re:Post, and Well-Architected Labs. Establish a dedicated budget for learning and mentorship programs. Aim for high team morale and innovation through structured knowledge sharing and collaboration. **Anti-Patterns:**- Lack of structured training leads to uncertainty and attrition.- Skill gaps during AWS migration cause burnout and dissatisfaction.**Benefits:**- Accelerates cloud adoption and innovation.- Enhances team morale and operational readiness.**Risk Level:**- Medium if not implemented.**Implementation Plan:**- High effort needed for structured programs.**Related Practices:**- OPS03-BP01: Executive sponsorship- OPS11-BP04: Knowledge management**Resources:**- AWS Whitepaper: Cloud Adoption Framework- AWS Skills Guild- AWS Training and Certification- AWS re:Post- AWS Documentation- The Official AWS Podcast"
OPS03-BP07,Resource teams appropriately,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_org_culture_team_res_appro.html,Operational Excellence,Organizational culture,Medium,"**Compliance Control for Team Staffing and Resource Allocation in Cloud Migration****Objective:** Ensure the team is appropriately staffed and skilled to manage AWS workloads, leveraging automation to enhance efficiency and mitigate risks.**Key Controls:**1. **Skills Assessment:** Regularly evaluate team proficiency in AWS technologies to align with migration plans.2. **Resource Planning:** Develop a dynamic staffing plan that includes tools and automation to manage workloads without overburdening staff.3. **Performance Metrics:** Monitor operational metrics (e.g., on-call fatigue) to ensure staff are not overwhelmed.4. **Feedback Mechanisms:** Implement monthly surveys to identify work-related challenges and adjust goals accordingly.5. **Capacity Review:** Regularly assess current resource allocation and adjust as needed to support shifting priorities.**Benefits:** Skilled teams can manage more infrastructure, adapt to operational changes, and maintain high employee satisfaction.**Risk:** Without proper staffing and resource planning, teams may struggle with workload support, leading to lower morale and performance issues."
OPS04-BP01,Identify key performance indicators,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_observability_identify_kpis.html,Operational Excellence,Implement observability,High,"To implement observability in your workload, align monitoring with business objectives by defining clear KPIs. Avoid anti-patterns like undefined, static, or misaligned KPIs. Benefits include clearer issue identification, business alignment, efficiency, and proactivity. High risk exists if best practices aren't established. Define KPIs starting with business outcomes, correlate technical metrics, use Amazon CloudWatch, and regularly update KPIs with stakeholder involvement. Effort level: medium. Related practices include application, user experience, dependency telemetry, and distributed tracing. Resources: AWS Observability Best Practices, CloudWatch Guide, Skill Builder Course, and Observability Workshop."
OPS04-BP02,Implement application telemetry,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_observability_application_telemetry.html,Operational Excellence,Implement observability,High,"**Compliance Control for Application Telemetry Observability**Ensure actionable insights into your application's performance and business KPIs using AWS services like Amazon CloudWatch and AWS X-Ray. Avoid anti-patterns like incomplete observability and fragmented data views. Key steps include defining business KPIs, deploying the CloudWatch agent, implementing anomaly detection, securing sensitive data, and standardizing data collection. Benefits include informed decision-making, improved operational efficiency, and enhanced workload stability. High risk exists if not established. High effort required for implementation. **Related Best Practices:** OPS04-BP01, OPS04-BP03, OPS04-BP04, OPS04-BP05. **Resources:** AWS Observability Best Practices, CloudWatch User Guide, AWS X-Ray Developer Guide, AWS Observability Skill Builder Course."
OPS04-BP03,Implement user experience telemetry,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_observability_customer_telemetry.html,Operational Excellence,Implement observability,High,"**Compliance Control for Monitoring Customer Experience**Ensure deep insights into customer experiences using Real User Monitoring (RUM) and synthetic transactions. RUM captures real user interactions for user satisfaction, while synthetic transactions simulate user interactions to detect potential issues proactively. Establish this practice to avoid delayed issue detection, lack of user experience insights, missed edge cases, and suboptimal application performance. Use AWS CloudWatch RUM and Synthetics for comprehensive monitoring. Implement RUM via JavaScript library and set up dashboards; configure synthetics with canaries for scripted interactions. Medium effort required. Related: OPS04-BP01, OPS04-BP02, OPS04-BP04, OPS04-BP05. Guides: Amazon CloudWatch RUM, Amazon CloudWatch Synthetics. Videos: Optimize with RUM, AWS on Air ft. RUM. Examples: One Observability Workshop, Git Repository for RUM Web Client, Synthetics for page load time."
OPS04-BP04,Implement dependency telemetry,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_observability_dependency_telemetry.html,Operational Excellence,Implement observability,High,"**Compliance Control for Dependency Telemetry:**Ensure your workload's performance by monitoring external services (DNS, databases, APIs) with telemetry. Identify dependencies, develop a tailored monitoring strategy, use network monitoring tools, and leverage AWS Health Dashboard and AWS X-Ray for insights. Set proactive alerts, validate post-changes, and continuously monitor metrics. Avoid anti-patterns like siloed monitoring and lack of proactive oversight. Benefits include improved reliability, faster issue detection, and enhanced scalability. High risk exists if not established. Effort: Medium. Related: OPS04-BP01, OPS04-BP02, OPS04-BP03, OPS04-BP05, OP08-BP04. Docs: AWS Health, Internet Monitor, X-Ray, DevOps Guru."
OPS04-BP05,Implement distributed tracing,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_observability_dist_trace.html,Operational Excellence,Implement observability,High,"**Distributed tracing compliance control (max 500 chars):**Ensure all distributed system components are instrumented for tracing with tools like AWS X-Ray and OpenTelemetry. Regularly analyze trace data to identify bottlenecks, optimize performance, and improve user experience. Implement alerts and continuous monitoring. Avoid anti-patterns like inconsistent instrumentation and latency oversight. Follow best practices for comprehensive system overview, enhanced debugging, and proactive issue resolution."
OPS05-BP01,Use version control,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_version_control.html,Operational Excellence,Design for operations,High,"**Compliance Control for Version Control in AWS**Implement version control using Git to track changes and releases for AWS services, especially for CloudFormation templates. This ensures collaborative code management, consistency, and easy rollback of errors. Avoid anti-patterns like local code storage and overwriting changes. Benefits include easy reverts and reduced asset loss risk. High risk exists without this practice. Integrate version control in your configuration management systems.**Related Best Practices:** OPS05-BP04 (Use build and deployment management systems)."
OPS05-BP02,Test and validate changes,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_test_val_chg.html,Operational Excellence,Design for operations,High,"To ensure software changes are thoroughly tested before deployment, implement a compliance control for testing all changes, including application code, infrastructure, and configurations. Establish testing standards, prioritize automated tests, and ensure developers have access to test results for continuous improvement. Key practices include shifting testing left in the delivery process, utilizing tools like Amazon Q Developer for test generation, and maintaining a standard that all changes must pass tests. Anti-patterns to avoid include deploying untested changes and neglecting security tests. Benefits include reduced deployment failure rates and enhanced software quality. Risks of non-compliance are high, potentially leading to production outages and security breaches. Use AWS services like CodePipeline, CodeBuild, and CodeGuru Reviewer to automate and streamline your testing processes."
OPS05-BP03,Use configuration management systems,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_conf_mgmt_sys.html,Operational Excellence,Design for operations,Medium,"**Compliance Control for Configuration Management:**Use configuration management systems to track and implement changes in application and environment configurations, reducing manual errors and effort. Automate configuration changes, validate them within CI/CD pipelines, and monitor configurations across environments. Establish configuration ownership, define deliverables, and integrate with CI/CD for consistent deployments. Adopt tools like AWS Config and AWS AppConfig for compliance and governance. Avoid manual updates and validate all changes to minimize risks. **Common Anti-patterns:**- Manual updates causing server unresponsiveness.- Inconsistent configurations leading to unexpected behaviors.- Security group changes causing accessibility issues.- Unvalidated pre-production configurations in production.**Benefits:**- Reduced errors and effort.- Enhanced governance and compliance.**Risk Level: Medium** if not established. **Related Best Practices:**- Plan for unsuccessful changes (OPS06-BP01)- Test deployments (OPS06-BP02)- Employ safe deployment strategies (OPS06-BP03)- Automate testing and rollback (OPS06-BP04)**Related Tools:**- AWS Config- AWS AppConfig- AWS CloudFormation- AWS Developer Tools (CodeBuild, CodePipeline, CodeDeploy)**Documents & Videos:**- AWS Control Tower- AWS Landing Zone Accelerator- AWS re:Invent 2022, 2020 compliance videos."
OPS05-BP04,Use build and deployment management systems,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_build_mgmt_sys.html,Operational Excellence,Design for operations,Medium,"**Compliance Control for Build and Deployment Management:**Implement automated CI/CD pipelines using AWS Developer Tools (e.g., CodeBuild, CodePipeline, CodeDeploy) to minimize errors from manual processes and streamline deployments. Avoid anti-patterns like manual copying of executables, missing static assets, and inability to reproduce successful builds. Automate from code check-in through build, testing, deployment, and validation to reduce effort, improve collaboration, and limit errors. **Benefits:** Reduces effort, enhances focus on high-value tasks, and minimizes manual errors. **Risk Level:** Medium if not established. Use version control, automated builds, and deployment monitoring for safe rollouts.**Related Practices:** Automate testing and rollbacks (OPS06-BP04). **Resources:** AWS Developer Tools, AWS CodeBuild, AWS CodeDeploy. **Video:** AWS re:Invent 2022 DevOps best practices."
OPS05-BP05,Perform patch management,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_patch_mgmt.html,Operational Excellence,Design for operations,Medium,"**Compliance Control for Patch Management:**Automate patch management using Amazon EC2 Image Builder and AWS Systems Manager Patch Manager to ensure timely updates, reduce errors, and maintain compliance. Establish image pipelines for AMIs and container images, test patches in safe environments, and use compliance reporting for tracking. Avoid applying all patches immediately and notify developers of changes to prevent disruptions. Focus on operational outcomes and vendor support.**Risk Level:** Medium. Ensure patches address issues, add features, and comply with governance. Use automation to minimize manual errors and effort.**Related Practices:** Automate testing and rollback (OPS06-BP04). **Resources:** Amazon EC2 Image Builder, AWS Systems Manager Patch Manager, compliance reports."
OPS05-BP06,Share design standards,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_share_design_stds.html,Operational Excellence,Design for operations,Medium,"**Compliance Control for Shared Design Standards**To maximize development benefits and ensure awareness, share best practices across teams, document them, and update as needed. Establish mechanisms for requesting changes and exceptions to standards to foster innovation. Common anti-patterns include duplicated efforts and non-uniform compliance implementations. Benefits include unified best practices and compliance. If not established, risk is medium. Identify a cross-functional team to develop and update standards, share them, and maintain them. Use AWS Service Catalog for portfolios. Implement a process for continuous updates and exceptions. Effort: Medium. Related practices: governance, compliance, operational readiness, continuous improvement, knowledge management. Tools: AWS Service Catalog."
OPS05-BP07,Implement practices to improve code quality,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_code_quality.html,Operational Excellence,Design for operations,Medium,"**Compliance Control for Code Quality Improvement**Adopt best practices to enhance code quality and reduce defects. Implement practices like test-driven development, code reviews, and pair programming. Integrate these into your CI/CD process. Avoid anti-patterns such as deploying unreviewed code to production and making manual changes without testing. Establish these practices to minimize production issues and improve developer productivity using tools like Amazon Q Developer. Level of effort: Medium. Related best practices include testing changes and sharing design standards."
OPS05-BP08,Use multiple environments,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_multi_env.html,Operational Excellence,Design for operations,Medium,"**Compliance Control for Environment Management:**To ensure compliance and governance, use multiple environments for development, testing, and production. Start with sandboxes for experimentation, then progressively apply stricter controls as you near production. This approach helps confirm workloads operate as intended. Establish a landing zone for governance, automation, security, and observability, managing it across environments. Avoid shared development spaces, restrictive security controls, and load testing on production systems. Instead, deploy production-like environments for testing and shut down unused ones to avoid costs. This strategy reduces risks, enhances agility, and maintains compliance as your organization grows.**Level of Risk:** Medium**Related Documents:**- Instance Scheduler on AWS- AWS CloudFormation- Organizing Your AWS Environment Using Multiple Accounts- AWS Control Tower Guide"
OPS05-BP09,"Make frequent, small, reversible changes",https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_freq_sm_rev_chg.html,Operational Excellence,Design for operations,Low,"Compliance Control (max 500 chars):Adopt frequent, small, reversible changes to streamline troubleshooting, accelerate remediation, and simplify rollback. Avoid quarterly deployments, manual updates, and untracked schema changes. Utilize configuration and deployment management systems. Benefits include faster development, reduced risk, and quicker value delivery. If not established, risk remains low. Related: OPS05-BP03, OPS05-BP04, OPS06-BP04. Docs:  Implementing Microservices on AWS,   Microservices - Observability. "
OPS05-BP10,Fully automate integration and deployment,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_auto_integ_deploy.html,Operational Excellence,Design for operations,Low,"Compliance Control (max 500 chars):Automate build, deployment, and testing to minimize manual errors and streamline change deployment. Use consistent tagging with AWS Resource Groups for resource identification and management. Ensure developers use tools for code delivery, avoiding console logins, and maintain an audit trail for governance. Standardize processes to boost productivity and focus on development.Common anti-patterns: Manual code check-ins, non-standard AWS environment creation, and manual deployment requests. Benefits: Reduced errors, faster delivery, and increased productivity. Risk: Low if not automated. Related: Configuration, build, and deployment management systems."
OPS05-BP01,Use version control,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_version_control.html,Operational Excellence,Design for operations,High,"**Compliance Control for Version Control in AWS:**Utilize version control to track changes and releases in AWS services. Implement Git for managing code and infrastructure artifacts like AWS CloudFormation templates. This ensures collaboration, consistency, and easy rollback of changes. Avoid losing code or assets due to failures or overwrites.**Risk:** High if not established.**Related:** OPS05-BP04, DevSecOps, build/deployment management.**Videos:** AWS re:Invent 2023 on DevSecOps, GitHub AI collaboration."
OPS05-BP02,Test and validate changes,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_test_val_chg.html,Operational Excellence,Design for operations,High,"**Compliance Control for Software Change Testing**Ensure all software changes undergo rigorous testing before deployment to production. This includes application code, infrastructure, configurations, security controls, and operational procedures. Testing should range from unit tests to software component analysis. Prioritize early testing in the software delivery process for higher artifact quality assurance. Establish testing standards for all software artifacts, leveraging automated tests to minimize manual errors and provide developers with timely feedback. Aim for zero failures in production by adhering to these standards.**Anti-patterns:**- Deploying untested changes causing production outages.- Untested infrastructure changes leading to accessibility issues.- Modifying code without unit tests resulting in deployment failures.**Benefits:**- Reduced change fail rates.- Improved software quality.- Enhanced developer awareness.- Confident security policy rollouts.- Advanced testing of infrastructure changes.**Risk Level:**High if best practices are not established.**Key Actions:**- Develop a comprehensive testing standard.- Use tools like Amazon Q Developer for automated test generation.- Integrate tests into the CI/CD pipeline.- Share test results for immediate feedback.**Related Practices:**- Use version control.- Share design standards.- Automate integration and deployment.**Tools:**- Amazon Q Developer- Amazon CodeGuru Reviewer- AWS CodeBuild- AWS CodePipeline**Outcome:**Ensured tested software changes with access to results, maintaining a robust testing standard across the organization."
OPS05-BP03,Use configuration management systems,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_conf_mgmt_sys.html,Operational Excellence,Design for operations,Medium,"**Compliance Control for Configuration Management**Use configuration management systems to automate and track changes, reducing errors and effort. Distinguish between static (unchanging) and dynamic (changeable) configurations. Deploy configurations consistently across environments, ensuring they are defined as code and monitored via automated inspection. Changes should follow agreed procedures, honoring version control. Independently manage application configurations from code to ensure consistent deployments. Establish CI/CD integration, validating configurations and minimizing impact on users. Avoid manual updates and untested deployments. Benefits include reduced errors, governance, and compliance. Risks include errors and compliance issues without proper management. Use AWS Config and AWS AppConfig for monitoring and managing configurations. Identify owners, select tools, and consider weighted deployments. Integrate into CI/CD, automate testing, and plan for rollbacks. Related practices include testing deployments and employing safe strategies."
OPS05-BP04,Use build and deployment management systems,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_build_mgmt_sys.html,Operational Excellence,Design for operations,Medium,"Compliance Control for Build and Deployment Management Systems:Ensure your organization's build and deployment management systems support continuous integration/continuous delivery (CI/CD) to automate safe rollouts with correct configurations. Avoid anti-patterns like manual copying of executables leading to dependency issues, missing static assets in QA, and manual build processes that fail replication. Automate from code check-in through build, testing, deployment, and validation using AWS services like CodeBuild, CodePipeline, and CodeDeploy. This minimizes errors, reduces effort, and enhances collaboration. Regularly monitor deployments and automate testing and rollback (OPS06-BP04). Medium risk if not established."
OPS05-BP05,Perform patch management,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_patch_mgmt.html,Operational Excellence,Design for operations,Medium,"**Compliance Control for Patch Management**Automate patch management using Amazon EC2 Image Builder and AWS Systems Manager Patch Manager to ensure feature updates, issue resolution, and compliance. Use pipelines for AMIs and container images, testing in safe environments before production. Avoid applying all patches immediately to prevent outages. Track patch compliance and status of deployed images. Establish a process for emergency patches and maintain regular hygiene of recipes. For EC2 Image Builder, specify pipeline details, choose recipes, and configure settings. For Patch Manager, create baselines and enable compliance reporting. **Risk Level:** Medium**Related Practices:** OPS06-BP04 Automate testing and rollback.**Documents:** Amazon EC2 Image Builder, AWS Systems Manager Patch Manager.**Videos:** CI/CD for Serverless Applications on AWS, Design with Ops in Mind.**Examples:** Well-Architected Labs - Inventory and Patch Management."
OPS05-BP06,Share design standards,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_share_design_stds.html,Operational Excellence,Design for operations,Medium,"**Compliance Control for Shared Design Standards**To maximize development benefits and maintain awareness, share best practices and design standards across teams. Document and update these standards as they evolve. Enforce shared standards with mechanisms for requesting changes and exceptions to support innovation. Implement a cross-functional team to develop and update standards, utilizing tools like AWS Service Catalog for portfolio sharing. Regularly review and update standards to align with new best practices. Medium effort needed for coordination. Related practices include evaluating governance and compliance requirements, ensuring operational readiness, continuous improvement, and knowledge management.**Level of Risk:** Medium if not established.**Related Practices:** OPS01-BP03, OPS01-BP04, OPS07-BP02, OPS11-BP01, OPS11-BP04.**Related Docs/Videos/Examples:** AWS Service Catalog, AWS Backups, DBaaS, AWS Service Catalog Reference Architecture.**Related Services:** AWS Service Catalog."
OPS05-BP07,Implement practices to improve code quality,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_code_quality.html,Operational Excellence,Design for operations,Medium,"**Compliance Control for Code Quality Improvement**Implement practices like test-driven development, code reviews, and pair programming to minimize defects. Ensure all code changes undergo review before deployment. Avoid deploying untested code directly to production. Use tools like Amazon Q Developer and CodeGuru for productivity and quality enhancements. Adopt these practices in your CI/CD pipeline to improve software quality and reduce production issues. **Risk Level:** Medium if not established.**Effort:** Medium for full adoption.**Related:** OPS05-BP02, OPS05-BP06; Amazon Q Developer, CodeGuru Reviewer."
OPS05-BP08,Use multiple environments,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_multi_env.html,Operational Excellence,Design for operations,Medium,"**Compliance Control Summary (max 500 chars):**Utilize multiple environments for development, testing, and production to ensure compliance and governance. Implement minimal controls in sandboxes for experimentation, individual dev environments for parallel work, and stricter controls near production. Use infrastructure as code to maintain consistency and turn off unused environments to avoid costs. Establish separate AWS Organizations instances for teams managing organization-level capabilities. This approach minimizes risks and supports agile development.**Level of Risk:** Medium if not established."
OPS05-BP09,"Make frequent, small, reversible changes",https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_freq_sm_rev_chg.html,Operational Excellence,Design for operations,Low,"**Compliance Control Summary (max 500 chars):**Implement frequent, small, reversible changes to minimize change impact, enhance troubleshooting, and allow rollback. Avoid quarterly large deployments, untracked database schema changes, and manual in-place updates without rollback plans. Benefits include faster development, easier issue identification, and reduced risk. If not adopted, risk is low but impacts troubleshooting and delivery speed. Related practices include configuration, build, deployment management, and automated testing/rollback. Docs:  Implementing Microservices on AWS,   Microservices - Observability. "
OPS05-BP10,Fully automate integration and deployment,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_auto_integ_deploy.html,Operational Excellence,Design for operations,Low,"Compliance Control (max 500 chars):Automate build, deployment, and testing to minimize manual errors and streamline change deployment. Use AWS Resource Tags and Groups for consistent resource identification, aiding organization, cost tracking, and access control. Ensure developers leverage tools for code delivery without console access, maintaining an audit trail for governance and compliance. Avoid manual processes, non-standard AWS environment creation, and manual change approvals, focusing on speed, productivity, and security."
OPS06-BP01,Plan for unsuccessful changes,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_mit_deploy_risks_plan_for_unsucessful_changes.html,Operational Excellence,Mitigate deployment risks,High,"To ensure compliance with deployment best practices, establish a documented plan for reverting to a known good state or remediating failed changes in production. This plan should encompass strategies like deployment and rollback steps, change policies, feature flags, traffic isolation, and traffic shifting. Aim to minimize the size of releases to reduce business impact and improve recovery efficiency. Document and test rollback plans, specify conditions for fix-forward situations, and integrate tools to enforce policies. Measure deployment success and outage durations to refine recovery strategies. Medium effort is required for implementation. Related best practices include automating testing and rollback (OPS06-BP04). Resources: AWS Builders Library, AWS Change Management whitepaper, and re:Invent 2019 video on high-availability deployment."
OPS06-BP02,Test deployments,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_mit_deploy_risks_test_val_chg.html,Operational Excellence,Mitigate deployment risks,High,"**Compliance Control Summary:**Ensure deployment procedures in pre-production mirror production with identical configurations, security, and steps. Validate all deployment steps, including file inspections, configurations, and service checks. Conduct functional, integration, and load tests, alongside monitoring health checks. Create temporary parallel environments for testing changes using IaC to automate deployment, ensuring stability and consistency. Aim for a test-driven development culture to identify deployment risks early, allowing for mitigation before production. Avoid anti-patterns like untested deployments, IaC uncertainties, feature malfunctions, and misconfigured certificates. Establish this best practice to minimize production impact, increase confidence, and reduce operational support, while maintaining delivery velocity. High risk is exposed if not established. Use CI/CD pipelines for thorough testing and validation of deployment steps. Monitor with AWS tools and perform post-deployment testing. Implement a manual approval workflow for production deployment authorization.**Level of Effort: High.**"
OPS06-BP03,Employ safe deployment strategies,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_mit_deploy_risks_deploy_mgmt_sys.html,Operational Excellence,Mitigate deployment risks,Medium,"**Compliance Control for Safe Production Roll-outs**Ensure safe production roll-outs using CI/CD systems to automate beneficial changes while minimizing customer impact. Use strategies like feature-flags, blue/green deployments, and traffic splitting. Avoid anti-patterns such as full-production simultaneous deployments and mutable deployments. Benefits include consistent, efficient roll-outs and reduced deployment failures. Implement safety controls to achieve zero deployment failures and monitor with AWS tools. Related best practices include testing, frequent small changes, and full automation. Medium effort required for implementation."
OPS06-BP04,Automate testing and rollback,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_mit_deploy_risks_auto_testing_and_rollback.html,Operational Excellence,Mitigate deployment risks,Medium,"To enhance deployment efficiency and reliability, implement automated testing and rollback strategies in your CI/CD pipeline. Automate tests to simulate interactions, and set up automatic rollbacks for failures or unmet outcomes. This integration minimizes downtime and business impact. Avoid anti-patterns like manual steps post-deployment and poorly architected systems. Benefits include improved transparency, defect detection, and reduced customer impact. Establish a testing lifecycle, select appropriate tools, and prioritize automation for high-risk areas. Medium effort is needed for implementation. Related practices include planning for failures and testing deployments. For guidance, refer to AWS resources on rollback safety and deployment automation."
OPS07-BP01,Ensure personnel capability,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_ready_to_support_personnel_capability.html,Operational Excellence,Operational readiness and change management,High,"**Compliance Control for Trained Personnel:**Ensure sufficient trained personnel to support workload operations and troubleshoot incidents. Verify team members are trained on the platform and services. Maintain enough staff for normal operations, on-call rotations, and vacations to prevent burnout. Implement regular training and skill assessments.**Desired Outcome:** Adequate trained personnel to support workload availability.**Common Anti-patterns:** Untrained teams, insufficient personnel for rotations.**Benefits:** Effective workload support, reduced burnout risk.**Level of Risk:** High if not established.**Implementation Steps:**1. Assign adequate personnel for workload operations, including on-call.2. Train staff on relevant software and platforms.3. Regularly assess team size and skills, adjusting as needed.**Level of Effort:** High, but long-term benefits substantial.**Related Best Practices:** OPS11-BP04 (Knowledge Management).  **Resources:** AWS Training and Certification, AWS Events and Webinars."
OPS07-BP02,Ensure a consistent review of operational readiness,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_ready_to_support_const_orr.html,Operational Excellence,Operational readiness and change management,unknown,"**Compliance Control for Operational Readiness Reviews (ORRs)**Use ORRs to validate operational readiness. ORRs, developed at Amazon, are checklists ensuring safe workload operation. They include architecture, operational processes, event management, release quality, and governance. Conduct ORRs pre-launch and periodically to catch drift from best practices. Avoid launching without readiness checks, missing governance, or repeating failures. Benefits include incorporating lessons learned and ensuring required procedures. High risk if not established. ORRs should be supported by executive sponsorship and stakeholders. Use AWS services like Config and Security Hub to automate best practices. Example: AnyCompany Retail improved post-incident with ORRs. Steps: gather stakeholders, create a checklist, and run ORRs pre-launch and annually. High effort needed for adoption. Related practices: governance, compliance, resource planning, change management, personnel capability, security, disaster recovery, cost management."
OPS07-BP03,Use runbooks to perform procedures,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_ready_to_support_use_runbooks.html,Operational Excellence,Operational readiness and change management,Medium,"**Compliance Control for Runbooks:**A runbook is a step-by-step guide for workload tasks, essential for consistent outcomes. It should be centrally published, updated, and include error handling, tools, permissions, and escalations. As your organization matures, automate runbooks using scripting and AWS Systems Manager. Avoid relying on memory, manual changes, or inconsistent processes. Benefits include reduced error rates and consistent operations. Medium risk if not established. Start with a text document, validate, and automate as needed. Use AWS Systems Manager Automation for low-code visual design. Related best practices include identified process owners, issue investigation playbooks, and knowledge management. **Implementation Effort: Low.**"
OPS07-BP04,Use playbooks to investigate issues,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_ready_to_support_use_playbooks.html,Operational Excellence,Operational readiness and change management,Medium,"**Compliance Control for Incident Playbooks**Ensure your organization has incident playbooks for common issues, stored centrally, and frequently updated. Playbooks should guide users step-by-step, detailing tools and permissions needed, communication plans, escalation paths, and links to runbooks for known root causes. As maturity grows, automate playbooks starting with low-risk incidents using scripting, and utilize AWS Systems Manager Automations for faster incident resolution. Avoid anti-patterns like unstructured investigations and reliance on muscle memory. Benefits include consistent incident identification, faster recovery, and quicker team onboarding. Establish this practice to mitigate medium-level risks. For implementation, start with a text document repository, evolve to automation, and follow AWS guidance for tools and templates."
OPS07-BP05,Make informed decisions to deploy systems and changes,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_ready_to_support_informed_deploy_decisions.html,Operational Excellence,Operational readiness and change management,Low,"**Compliance Control for Change Management:**Implement processes for both successful and unsuccessful changes to your workload. Use pre-mortems to simulate failures and develop mitigation strategies. Evaluate benefits and risks, ensuring all changes comply with governance. Desired outcome: informed decisions and governance compliance. Common anti-patterns include deploying changes without rollback processes or governance checks. Benefits: preparedness for failures and compliance. Risk level: low if not established. Use pre-mortems, document processes, verify compliance, and run tabletop exercises. Example: AnyCompany Retail uses pre-mortems and documents processes in a shared Wiki. Steps: establish criteria, develop rollback scenarios, weigh benefits vs. risks, verify compliance, and use pre-mortems. Effort: moderate. Related best practices: OPS01-BP03, OPS06-BP01, OPS06-BP02, OPS07-BP01. Related docs: AWS Risk and Compliance, AWS Shared Responsibility Model, Governance in the AWS Cloud."
OPS07-BP06,Create support plans for production workloads,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_ready_to_support_enable_support_plans.html,Operational Excellence,Operational readiness and change management,Low,"**Compliance Control for Software and Service Support Plans****Objective:** Ensure all production workloads have adequate support plans and documentation for timely issue resolution.**Control Measures:**1. **Support Plan Activation:** Enable support plans for all software and service vendors critical to production workloads. For AWS, activate Business Support or higher.   2. **Service-Level Agreement (SLA):** Select a support plan aligning with production service-level needs.3. **Documentation:** Create and maintain documentation on how to request and escalate support, including vendor contact information.4. **Contact Updates:** Implement mechanisms to regularly update vendor support contacts.**Outcomes:**- Support plans for all critical dependencies.- Appropriate SLAs based on production needs.- Clear, accessible documentation for support requests.**Risks:** - Production outages due to lack of support plans.- Increased response times due to outdated contact info.- Inability to escalate issues during outages.**Effort:** Low; most vendors offer easy opt-in support plans.**Example:** AnyCompany Retail has AWS Enterprise Support and maintains a wiki for support procedures.**Related Practices:** OPS02-BP02 for process ownership."
OPS08-BP01,Analyze workload metrics,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_workload_observability_analyze_workload_metrics.html,Operational Excellence,Utilizing workload observability,Medium,"**Compliance Control for Application Telemetry Analysis****Objective:** Ensure accurate insights into workload performance to drive data-informed decisions aligned with business objectives.**Key Actions:**1. Regularly analyze application telemetry metrics focusing on latency, requests, errors, and capacity.2. Prioritize business outcome metrics for data-driven decision-making.3. Utilize tools like Amazon CloudWatch for centralized metric analysis, anomaly detection, and cross-account observability.**Risk:** Medium. Failure to establish this practice may lead to poor alignment with business objectives.**Related Best Practices:** OPS04-BP01, OPS04-BP02.**Resources:** Amazon CloudWatch, Amazon DevOps Guru."
OPS08-BP02,Analyze workload logs,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_workload_observability_analyze_workload_logs.html,Operational Excellence,Utilizing workload observability,Medium,"Compliance Control (max 500 chars):Regularly analyze workload logs with Amazon CloudWatch Logs to optimize app performance and security. Use tools like Logs Insights and anomaly detection for proactive issue detection. Avoid manual reviews; leverage automation. Establish this best practice to identify bottlenecks, threats, and optimize operations, reducing medium risk. Utilize CloudWatch Logs Insights for querying, pattern analysis, and real-time monitoring via Live Tail."
OPS08-BP03,Analyze workload traces,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_workload_observability_analyze_workload_traces.html,Operational Excellence,Utilizing workload observability,Medium,"**Compliance Control for Trace Data Analysis**To ensure comprehensive visibility into your application's operations, analyze trace data by integrating AWS X-Ray. Visualize interactions, identify bottlenecks, and enhance user experience. Avoid anti-patterns like overlooking trace data or not correlating it with logs. Benefits include improved troubleshooting, reduced MTTR, and better user experiences. Establish this practice to mitigate medium-level risks. Use X-Ray features like ServiceLens, Insights, Analytics, and DevOps Guru for deeper insights. Steps include integrating X-Ray, analyzing metrics, leveraging ServiceLens, enabling Insights, using Analytics, creating X-Ray groups, and correlating with logs."
OPS08-BP04,Create actionable alerts,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_workload_observability_create_alerts.html,Operational Excellence,Utilizing workload observability,High,"Compliance Control Summary (max 500 chars):Ensure timely, relevant alerts for KPI risks and anomalies. Prioritize alerts based on KPIs to avoid alert fatigue, address root causes for non-repetitive alerts, and integrate with tools like Amazon CloudWatch, X-Ray Insights, and DevOps Guru for anomaly detection. Use composite alarms, minimize non-critical alerts, and refine configurations regularly. Focus on actionable alerts to enhance system reliability and team collaboration. Failure to establish this practice exposes high risk."
OPS08-BP05,Create dashboards,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_workload_observability_create_dashboards.html,Operational Excellence,Utilizing workload observability,unknown,"**Compliance Control for Dashboards****Outcome**: Clear, actionable insights into system and business health.**Anti-patterns**:- Overloading dashboards with excessive metrics.- Solely relying on dashboards for anomaly detection.- Failing to update dashboards as workloads change.**Benefits**:- Immediate visibility into critical metrics and KPIs.- Improved stakeholder communication.- Quick insights into operational issue impacts.**Risk level**: Medium if not established.**Business-centric dashboards**: Tailor dashboards to business KPIs to engage stakeholders and align with business goals, ensuring clarity and actionability.**Basic setup**:- Create a descriptive CloudWatch dashboard.- Use Markdown for context and links.- Incorporate dashboard variables for flexibility.- Add metric widgets for system health and business outcomes.- Utilize Log Insights and alarms for actionable insights.- Integrate Contributor Insights for top contributor analysis.- Design custom widgets as needed.- Leverage AWS Health Dashboard for account health insights.- Regularly iterate and refine the dashboard.**Related best practices**:- Identify key performance indicators (OPS04-BP01).- Analyze workload metrics, logs, and traces (OPS08-BP01-04).- Create actionable alerts (OPS08-BP04).**Documents/videos/examples**:- Building Dashboards for Operational Visibility- Using Amazon CloudWatch Dashboards- Create Cross Account & Cross Region CloudWatch Dashboards- AWS re:Invent 2021 - Gain enterprise visibility with AWS Cloud operation dashboards- One Observability Workshop- Application Monitoring with Amazon CloudWatch- AWS Health Events Intelligence Dashboards and Insights- Visualize AWS Health events using Amazon Managed Grafana"
OPS09-BP01,Measure operations goals and KPIs with metrics,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_operations_health_measure_ops_goals_kpis.html,Operational Excellence,Understanding operational health,Medium,"Compliance Control (max 500 chars):Establish KPIs and metrics aligning with organizational goals for operations success. Set baselines and regularly reevaluate. Collect metrics via mechanisms like DORA for software delivery. Publish goals and KPIs for teams. Examples: ticket queue depth, issue type counts, SOP adherence time, recovery time post-failed code push, call volume. Avoid anti-patterns like unmeasured troubleshooting, unstaffed Tier 1 desks, and undocumented workloads. Benefits: Insight into workload consumer changes, team effectiveness, and service level targets. Risk: Medium without best practice. Schedule with leaders to define goals, tasks, and KPIs. Use Amazon tools like QuickSight and CloudWatch for tracking."
OPS09-BP02,Communicate status and trends to ensure visibility into operation,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_operations_health_communicate_status_trends.html,Operational Excellence,Understanding operational health,Medium,"**Compliance Control Summary (max 500 chars)**Establish dashboards and status pages for real-time operational insights. Ensure metrics like call volumes and incident ownership are visible. Disseminate alerts and reports proactively to leadership and stakeholders. Avoid duplication and delays by sharing incident updates and recovery timelines. This practice minimizes communication strain, optimizes resource allocation, and reduces risks from undetected operational issues. Medium risk if unestablished. Align with OPS09-BP01 for KPI measurement. Related: Measure Progress, Building dashboards, Data Operations, KPI Dashboards."
OPS09-BP03,Review operations metrics and prioritize improvement,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_operations_health_review_ops_metrics_prioritize_improvement.html,Operational Excellence,Understanding operational health,Medium,"**Compliance Control for Operations Review:**Ensure dedicated time for regular operations reviews among leaders and stakeholders to assess metrics, goals, and improvements. Weekly meetings should discuss challenges, celebrate wins, and share lessons learned. Brief stakeholders on operational status and solicit input on goals and KPIs. Avoid anti-patterns like delayed responses to metrics and neglecting automation needs. Establish this to maintain service delivery, prevent deterioration, and ensure operations evolve with business growth. Medium risk if unestablished. Use Amazon Athena, CloudWatch, and QuickSight for data analysis. (Characters: 478)"
OPS10-BP01,"Use a process for event, incident, and problem management",https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_event_response_event_incident_problem_process.html,Operational Excellence,Responding to events,High,"**Compliance Control for Managing Events, Incidents, and Problems****Objective:** Ensure efficient management of operational events, incidents, and problems to maintain workload health and performance.**Key Elements:**1. **Monitoring and Processes:**   - Implement observability tools (AWS CloudTrail, EventBridge, Config).   - Develop processes for event assessment, escalation, and incident response.   2. **Incident Management:**   - Use AWS Systems Manager Ops Center, CloudWatch, X-Ray for incident response.   - Establish structured incident management with clear roles and protocols.   3. **Problem Management:**   - Identify underlying causes of incidents using CloudTrail, CloudWatch.   - Develop problem management processes with root cause analysis and updates to policies.   4. **Continuous Improvement:**   - Conduct post-incident analyses and share lessons learned.   - Regularly review and update processes to align with business and technology changes.   **Anti-Patterns to Avoid:**- Reactive responses to events.- Inconsistent approaches to different events/incidents.- Lack of analysis and learning from incidents.**Benefits:**- Streamlined response processes.- Reduced incident impact.- Expedited issue resolution.- Continuous operational improvement.**Risk Level:** High if not established.**Implementation Effort:** Medium. Engage AWS Support as needed.**Related Best Practices and Resources:** OPS04-BP01, OPS04-BP02, etc. Refer to AWS Security Incident Response Guide, AWS Incident Detection and Response, and related videos/examples."
OPS10-BP02,Have a process per alert,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_event_response_process_per_alert.html,Operational Excellence,Responding to events,High,"**Compliance Control for Alert Management****Objective:** Ensure every alert triggers a specific, actionable response with clear ownership and escalation paths, linked to an updated knowledge base for consistent, quick responses.**Control Measures:**1. **Defined Response Plans:** Establish clear, predefined response plans for each alert type.2. **Automation:** Automate responses where feasible, ensuring quick, uniform actions.3. **Ownership and Escalation:** Assign clear ownership and define escalation paths for each alert.4. **Knowledge Base:** Link alerts to an up-to-date knowledge base for consistent responses.5. **Monitoring:** Use composite alarms and AWS Health events to reduce alert fatigue and manage operational issues effectively.**Risk Level:** High if not established.**Implementation:** Utilize AWS Systems Manager Incident Manager for streamlined incident response and integrate with Amazon CloudWatch and EventBridge for automated incident creation and response.**Related Practices:** OPS04-BP01, OPS08-BP04."
OPS10-BP03,Prioritize operational events based on business impact,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_event_response_prioritize_events.html,Operational Excellence,Responding to events,High,"**Compliance Control for Operational Event Prioritization****Objective:** Prioritize responses to operational events based on their potential business impact to ensure efficiency and effectiveness.**Key Elements:**1. **Impact Assessment:** Classify events into high, medium, and low impact categories based on factors like financial loss, safety, and reputational damage.2. **Urgency Levels:** Define urgency levels (high, medium, low) based on factors like safety and financial implications.3. **Prioritization Matrix:** Create a matrix to cross-reference impact and urgency, assigning priority levels.4. **Training:** Train response teams on the matrix and communicate its importance.5. **Integration:** Embed the matrix in incident response plans and automate where possible.6. **Review:** Regularly assess and adapt the prioritization process.**Anti-Patterns:**- Treating all events with equal urgency.- Failing to distinguish between high and low impact events.- Lack of a clear prioritization framework.- Prioritizing based on order of report rather than impact.**Benefits:** Ensures critical functions are prioritized, improves resource allocation, and maintains trust and regulatory compliance.**Risk:** High risk of damage if not established."
OPS10-BP04,Define escalation paths,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_event_response_define_escalation_paths.html,Operational Excellence,Responding to events,Medium,"Establish clear escalation paths in incident response protocols for timely action. Specify escalation triggers, define processes, and pre-approve actions to expedite decision-making, reducing MTTR. Ensure clear ownership, third-party SLAs, and regular training. Benefits include streamlined response, reduced downtime, and improved stakeholder communication. Without this, risks medium impact. Use AWS Systems Manager Incident Manager for structured escalation plans. Moderate effort for implementation. Related practices: actionable alerts, post-incident analysis. Docs: AWS Incident Manager, IAM Identity Center."
OPS10-BP05,Define a customer communication plan for service-impacting events,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_event_response_push_notify.html,Operational Excellence,Responding to events,Medium,"**Compliance Control for Service Impacting Event Communication****Objective:** Ensure effective, transparent, and timely communication during service impacting events to maintain customer trust and minimize disruptions.**Key Elements:**- **Communication Plan:** Develop a robust plan with predefined templates for clarity and consistency.- **Roles:** Assign a major incident manager, communications manager, and support manager.- **Channels:** Utilize resilient channels like chat, email, SMS, social media, and dashboards.- **Messaging:** Communicate quickly, clearly, and regularly with essential details on service impairment and resolution.- **Tools:** Leverage Amazon Pinpoint, Amazon SNS, and AWS Systems Manager Incident Manager for alerts and coordination.- **Internal Protocols:** Use AWS Chatbot and CloudWatch dashboards for internal team communication.- **Training and Testing:** Conduct regular drills and feedback sessions to refine communication strategies.- **Risk:** Medium risk if best practices are not established.**Anti-patterns to avoid:** Inadequate or delayed communication, technical jargon, and lack of a predefined strategy.**Benefits:** Enhanced trust, reduced support burden, and improved incident management."
OPS10-BP06,Communicate status through dashboards,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_event_response_dashboards.html,Operational Excellence,Responding to events,Medium,"**Compliance Control for Dashboards**Ensure dashboards provide real-time operational status and key metrics for internal teams, leadership, and customers. Avoid manual reporting delays and interruptions. Use tools like Amazon CloudWatch and QuickSight for interactive, real-time monitoring. Design clear, actionable dashboards with automated alarms and annotated metrics. Regularly update dashboards based on stakeholder feedback. This practice enhances transparency, reduces inefficiencies, and promotes informed decision-making. Medium risk if not established."
OPS10-BP07,Automate responses to events,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_event_response_auto_event_response.html,Operational Excellence,Responding to events,Medium,"Compliance Control (Max 500 chars):Automate event responses for error-free, consistent operational handling. Identify repetitive tasks for automation using AWS tools like EventBridge, Systems Manager, and Auto Scaling. Establish automated security responses, monitor quotas, and remediate noncompliant resources. Benefits include reduced errors, faster resolutions, and enhanced efficiency. Level of risk: Medium. High effort needed for implementation. Related: OPS08-BP04, OPS10-BP02; docs: Systems Manager Automation, CloudWatch alarms, Config Rules."
OPS11-BP01,Have a process for continuous improvement,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_evolve_ops_process_cont_imp.html,Operational Excellence,"Learn, share, and improve",High,"**Compliance Control:**Regularly review your workload against internal and external architecture best practices. Conduct frequent, intentional workload reviews and prioritize improvement opportunities into your software development cadence.**Desired Outcome:**Frequent analysis of your workload against architecture best practices.**Common Anti-Patterns:**Lack of recent architecture reviews; lower priority for improvement opportunities; no standard for implementing modifications.**Benefits:**Keep workload updated, evolve intentionally, leverage organization best practices, cumulative efficiency gains.**Risk:**High risk if not established.**Implementation Plan:**Conduct periodic architecture reviews using AWS Well-Architected Tool and internal standards, prioritize identified improvements. Effort: Low. **Related Best Practices:**OPS11-BP02, OPS11-BP08, OPS04. **Documents:**AWS Well-Architected Tool - Custom lenses, AWS Well-Architected Whitepaper.**Videos:**Well-Architected Labs, AWS re:Invent 2023.**Examples:**AWS Well-Architected Tool."
OPS11-BP02,Perform post-incident analysis,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_evolve_ops_perform_rca_process.html,Operational Excellence,"Learn, share, and improve",High,"To ensure compliance, review customer-impacting events to identify contributing factors and develop mitigations to prevent recurrence. Establish incident management processes, including post-incident analysis and observability plans for data collection. Use metrics to support analysis, learn from incidents, and improve outcomes. Avoid anti-patterns like neglecting network support and dismissing data loss. Implement a predefined process for incident root cause analysis, response procedures, and communication tailored to audiences. Share learnings and track actions. Metrics include deployment, configuration changes, and incident timelines. Questions to ask include improving detection, diagnosis, and mitigation times, and preventing future incidents. Effort: Medium. Related: OPS11-BP01, OPS 4, post-incident analysis, observability plans."
OPS11-BP03,Implement feedback loops,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_evolve_ops_feedback_loops.html,Operational Excellence,"Learn, share, and improve",High,"**Compliance Control for Feedback Loops**Implement feedback loops to drive continuous improvement. Establish immediate feedback mechanisms (e.g., surveys, A/B testing) and retrospective analyses (e.g., sprint reviews) to capture performance insights. Ensure mechanisms exist to gather and review user and team feedback regularly. Use retrospectives to identify trends and validate operational investments. Avoid anti-patterns like neglecting customer feedback post-launch or failing to review collected feedback. Benefits include faster organizational reaction to changes and trend-driven improvements. High risk is exposed if not established. Utilize tools like AWS Systems Manager OpsCenter for tracking. Example: AnyCompany Retail uses a web form for feedback and conducts weekly scrums to evaluate it. Medium effort required for implementation. Related practices include evaluating customer needs and performing post-incident analyses."
OPS11-BP04,Perform knowledge management,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_evolve_ops_knowledge_management.html,Operational Excellence,"Learn, share, and improve",High,"**Compliance Control for Knowledge Management****Desired Outcome:**- Team access to timely, accurate info.- Searchable info.- Mechanisms for adding, updating, archiving.**Common Anti-patterns:**- No centralized storage; local notes.- Self-hosted wiki, outdated info.- Missing info; no request process; manual add, missed step.**Benefits:**- Empowered team; free info sharing.- Faster onboarding; updated, searchable docs.- Accurate, timely, actionable info.**Risk Level: High** if best practice not established.**Implementation Steps:**1. Identify content management system; get stakeholder buy-in.2. If no system, consider self-hosted wiki or version control.3. Develop info adding/updating/archiving runbooks; educate team.4. Prioritize knowledge to store; start with daily activities.5. Periodically review and archive outdated info.**Related Best Practices:** OPS11-BP08 Document and share lessons learned.**Related Docs:** Atlassian - Knowledge Management**Examples:** DokuWiki, Gollum, MediaWiki, Wiki.js"
OPS11-BP05,Define drivers for improvement,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_evolve_ops_drivers_for_imp.html,Operational Excellence,"Learn, share, and improve",Medium,"**Compliance Control Summary (max 500 chars)**Establish a compliance control to track data, correlate events, and analyze business outcomes. Automate improvements where feasible. Track data for security, avoid unutilized high-cost data, and measure feature impacts. Benefits include informed decision-making and risk reduction. Risks of non-compliance are medium. Utilize AWS tools like Trusted Advisor, Compliance Programs, and dashboards for oversight. Related best practices include KPIs, observability, and feedback loops."
OPS11-BP06,Validate insights,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_evolve_ops_validate_insights.html,Operational Excellence,"Learn, share, and improve",Medium,"**Compliance Control Summary (max 500 chars):**Regularly review analysis with cross-functional teams and business owners to establish common understanding, identify impacts, and determine actions. Share insights with peers and publish for broader review. Avoid neglecting observability changes, CDN updates, and incorrect metrics. Validate insights with business owners to guide improvements, discover issues, and focus on business outcomes. Failure to establish this practice exposes medium risk. Related: OPS01-BP06, OPS02-BP06, OPS11-BP03. See CCOE, observability videos."
OPS11-BP07,Perform operations metrics reviews,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_evolve_ops_metrics_review.html,Operational Excellence,"Learn, share, and improve",Medium,"**Compliance Control Summary (max 500 chars):**Regularly analyze operations metrics with cross-team stakeholders to identify improvement opportunities and share lessons learned. Ensure timely reviews to detect anomalies, support business outcomes, and meet customer SLAs. Avoid risks like interrupted promotions and outdated libraries. Establish best practices to maintain common understanding, prioritize risks, and leverage shared insights for targeted improvements. Related practices include creating dashboards and reviewing metrics for prioritization. (Level of risk: Medium)"
OPS11-BP08,Document and share lessons learned,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_evolve_ops_share_lessons_learned.html,Operational Excellence,"Learn, share, and improve",Low,"**Compliance Control:**Document and share operational lessons learned across teams to enhance internal and cross-team benefits. Utilize AWS IAM for controlled resource access. Employ version-controlled repositories for application libraries, procedures, and infrastructure standards (AWS CloudFormation templates). Avoid anti-patterns like unshared risky libraries or internal edge cases. Establish procedures to document, share, and leverage these learnings to maximize organizational benefits.**Related Best Practices:**- OPS02-BP06: Predefined team responsibilities- OPS05-BP01: Use version control- OPS05-BP06: Share design standards- OPS11-BP03: Implement feedback loops- OPS11-BP07: Perform operations metrics reviews**Supporting Documents:**- Increase collaboration with AWS re:Post Private- Docs-as-code solution for project efficiency**Related Videos:**- AWS re:Invent 2023: Collaborate with AWS re:Post Private- Incident Management Tabletop Exercise"
OPS11-BP09,Allocate time to make improvements,https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_evolve_ops_allocate_time_for_imp.html,Operational Excellence,"Learn, share, and improve",Low,"**Compliance Control (max 500 chars):**Allocate dedicated time and resources to enable continuous, incremental improvements. Create temporary environment duplicates to lower experimentation risks. Conduct game days using Fault Injection Service for production-like testing. Avoid deferring performance issues, uncompleted improvements, and neglecting retesting operational practices. Benefits include sustained enhancements; risk of inaction is low. Related: OPS05-BP08, AWS Fault Injection Service video."
SEC01-BP01,Separate workloads using accounts,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_securely_operate_multi_accounts.html,Security,AWS account management and  separation,High,"Compliance control for multi-account AWS strategy: Establish guardrails for isolation between production, dev, and test environments. Use separate accounts for unrelated workloads to enhance security, billing, and access control. Implement a structured OU hierarchy for consistent security policy application. Utilize AWS Organizations and Control Tower for governance, automated account management, and centralized auditing. Avoid anti-patterns like mixing workloads in one account. High risk is exposed if best practices are not followed."
SEC01-BP02,Secure account root user and properties,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_securely_operate_aws_account.html,Security,AWS account management and  separation,High,"**AWS Root User Compliance Control (max 500 chars):**Deactivate root user programmatic access, use MFA, and avoid routine use to minimize risks. Establish detective controls like alarms and GuardDuty for root usage alerts. Limit access, use a two-person rule, and test recovery methods. Secure email and phone linked to root. High risk if not implemented. Follow AWS best practices and monitor continuously. For detailed steps, consult AWS CIS Foundations and Security Audit Guidelines."
SEC01-BP03,Identify and validate control objectives,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_securely_operate_control_objectives.html,Security,Operating your workloads securely,High,"**Compliance Control Summary (max 500 chars)**Establish control objectives aligned with compliance requirements and threat models. Implement and automate controls via AWS SCPs and Config, ensuring ongoing validation for effectiveness. Use AWS Security Hub and Config conformance packs for framework alignment. Report effectiveness to auditors, avoiding high-risk anti-patterns like misaligned frameworks or non-automated reporting. Leverage AWS Artifact for compliance documentation and APN Partner Bundles for expert guidance."
SEC01-BP04,Stay up to date with security threats and recommendations,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_securely_operate_updated_threats.html,Security,Operating your workloads securely,High,Compliance Control (max 500 chars):Stay informed on threats via trusted industry publications and AWS Security Bulletins. Automate threat detection with AWS services like GuardDuty and Inspector. Regularly update workloads and dependencies to mitigate risks. Adopt AWS services that auto-update threat intelligence. Follow the Well-Architected Operational Excellence Pillar for automated fleet management and patching. Prioritize threat mitigations using a threat model and continuously evaluate the threat landscape.
SEC01-BP05,Reduce security management scope,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_securely_operate_reduce_management_scope.html,Security,Operating your workloads securely,Medium,"**Compliance Control Summary (max 500 chars)**Evaluate AWS services to reduce security management scope by leveraging managed options, minimizing maintenance tasks like patching and backups. Consider TCO vs. service costs and integrate AWS compliance docs. Avoid anti-patterns like deploying without understanding shared responsibility. Benefits include reduced operational burden and compliance shift to AWS. Risks if not established: medium. Use tools like AWS Health for update management. Related: PERF02-BP01, PERF03-BP01, SUS05-BP03. Docs: AWS Health, AWS Artifact, Customer Compliance Guides. Videos: AWS DMS migration, AWS Health lifecycle events."
SEC01-BP06,Automate deployment of standard security controls,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_securely_operate_automate_security_controls.html,Security,Operating your workloads securely,Â Medium,"**Compliance Control for Standard Security Controls in AWS**Implement modern DevOps practices to define, test, and deploy standardized security controls across AWS environments using Infrastructure as Code (IaC) templates. Store templates in version control, automate testing via CI/CD pipelines, and deploy changes automatically. Avoid manual changes and separation of duties issues. Benefits include improved standardization, reduced risks, and early control integration. Key anti-patterns to avoid include manual changes, lack of central control, and insufficient automation. Related best practices include version control, build management, and automated deployment. Tools: AWS CloudFormation Guard, AWS CodePipeline, AWS CodeBuild, AWS CodeDeploy, Service Catalog."
SEC01-BP07,Identify threats and prioritize mitigations using a threat model,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_securely_operate_threat_model.html,Security,Operating your workloads securely,High,"**Threat modeling compliance control (max 500 chars):**Perform threat modeling early in the lifecycle to maintain an updated register of threats and mitigations. Prioritize threats and adapt security controls to prevent, detect, and respond. Regularly revisit in context of evolving security landscape. Failure to establish this practice exposes high risk. Use Shostack’s 4 Questions and Threat Composer tool for structured approach. Align with SEC01-BP03, SEC01-BP04, SEC01-BP05, SEC01-BP08. For guidance, refer to AWS Security Blog and NIST guide."
SEC01-BP08,Evaluate and implement new security services and features regularly ,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_securely_operate_implement_services_features.html,Security,Operating your workloads securely,Low,"**AWS Security Compliance Control (500 chars):**Establish a standard practice to subscribe to AWS blogs, RSS feeds, and SNS topics for timely updates on new security services. Evaluate these updates to refine existing controls and adopt new ones. Avoid second-hand news sources. Benefits include informed decision-making and awareness of emerging threats. Risks of non-compliance are low. Utilize AWS What's New, Security Blog, Security Bulletins, and events like re:Inforce for updates. Engage with your AWS account team and consider Enterprise Support for regular consultations."
SEC02-BP01,Use strong sign-in mechanisms,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_identities_enforce_mechanisms.html,Security,Identity management,High,"To reduce risks of unintended access to AWS credentials, enforce strong sign-in mechanisms: require multi-factor authentication (MFA) and enforce strong password policies for IAM users, root user, IAM Identity Center, and third-party providers. Avoid sharing credentials, use detective controls, and secure sign-in processes. High risk if not established. Use centralized identity providers, enable MFA, and enforce password complexity. Related best practices include secure secret storage and resource sharing."
SEC02-BP02,Use temporary credentials,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_identities_unique.html,Security,Identity management,High,"**Compliance Control for Temporary Credentials:**Use temporary credentials instead of long-term credentials to minimize risks like disclosure, sharing, or theft. Avoid long-term access keys for IAM users and federation. Common anti-patterns include embedding long-term keys in code or apps. High risk exists if best practices aren't established. For workforce, use centralized identity providers and federation. For third-party access, use cross-account roles. For web/mobile apps, use Amazon Cognito. For machines, use IAM roles. For exceptions needing long-term credentials, audit, rotate regularly, and enforce least privilege. For more details, see related best practices and documents."
SEC02-BP03,Store and use secrets securely,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_identities_secrets.html,Security,Identity management,High,"**Compliance Control for Secure Credential Management**To ensure secure management of application credentials, implement a compliance control with these goals:1. **Identify Required Secrets**: Determine which secrets are essential for the workload.2. **Reduce Long-Term Credentials**: Replace long-term credentials with short-term ones where possible.3. **Secure Storage & Rotation**: Use a service to securely store, manage, and rotate long-term credentials.4. **Audit Access**: Log and audit access to secrets.5. **Monitor Development**: Continually check source code for embedded secrets.6. **Reduce Disclosure Risk**: Minimize inadvertent credential disclosure.**Anti-Patterns**: Avoid not rotating credentials, storing long-term credentials in source code, and unencrypted storage.**Benefits**: Encrypted storage, API-gated access, fine-grained access control, automated rotation, and centralized secret distribution.**Risk**: High if best practices are not followed.**AWS Tools**: Use AWS Secrets Manager for secure storage, IAM roles for temporary credentials, and Amazon CodeGuru for detecting hard-coded secrets."
SEC02-BP04,Rely on a centralized identity provider,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_identities_identity_provider.html,Security,Identity management,High,"**Compliance Control for Centralized Identity Management**Use a centralized identity provider to manage workforce identities (employees and contractors) for streamlined access across applications. Implement centralized authentication policies, such as multi-factor authentication (MFA), and integrate with HR systems for automated lifecycle management. Enable detailed audit logging and monitor for unusual behavior. Risks of non-compliance include manual identity management and lack of automated access revocation. For AWS access, federate workforce users directly or via IAM Identity Center, removing reliance on IAM users and groups."
SEC02-BP05,Audit and rotate credentials periodically,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_identities_audit.html,Security,Identity management,High,"**Compliance Control for Credential Rotation and Auditing****Objective:** Implement regular credential rotation and auditing to mitigate risks from long-term credential usage.**Action Items:**1. **Audit Credentials:** Regularly review and audit credentials to ensure compliance with rotation policies.2. **Rotate Credentials:** Periodically rotate long-term credentials every 90 days or as per defined policies.3. **MFA Enforcement:** Ensure multi-factor authentication (MFA) is enforced for all identities.4. **Automate Validation:** Use automated tools to validate credential controls and permissions.5. **Monitor IAM Policies:** Regularly review IAM policies to adhere to the principle of least privilege.6. **Use Temporary Credentials:** Prefer temporary credentials over long-term ones where possible.**Risk Level:** High if best practices are not followed.**Related Resources:** [AWS Secrets Manager](https://aws.amazon.com/secrets-manager/), [IAM Best Practices](https://aws.amazon.com/blogs/security/top-10-aws-identity-and-access-management-best-practices/), [Temporary Security Credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-based-creds.html)."
SEC02-BP06,Employ user groups and attributes,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_identities_groups_attributes.html,Security,Identity management,Medium,"**Compliance Control (max 500 chars):**To adhere to the principle of least privilege, define user permissions via groups and attributes. Use groups based on job functions and attributes for project-specific scope. Avoid managing permissions individually, overly broad groups, or granular groups causing confusion. Ensure group/attribute management via a standardized identity provider integrated with AWS. Regularly review and update group/attribute structures for optimal permissions management. Related: SEC02-BP04, SEC03-BP02, COST02-BP04."
SEC03-BP01,Define access requirements,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_permissions_define.html,Security,Permissions management,High,"To ensure compliance, define access for each workload component by administrators, end-users, or other services. Use federated access or a centralized identity provider for AWS accounts. Centralize identity management and integrate AWS access with employee lifecycle changes. Implement IAM roles with least privilege access, using AWS Managed policies for common use cases. Store secrets securely using AWS Secrets Manager or Systems Manager Parameter Store. Prefer short-term credentials over long-term static ones. For programmatic access, use IAM Identity Center or access keys, ensuring they are rotated and removed when no longer needed. Related: IAM roles, AWS Managed policies, Secrets Manager, Parameter Store, IAM Roles Anywhere."
SEC03-BP02,Grant least privilege access,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_permissions_least_privileges.html,Security,Permissions management,High,"**Compliancy Control (max 500 chars):**Implement least privilege access by assigning minimal permissions to users via groups, isolating dev/prod with separate AWS accounts, and using managed policies. Regularly review permissions, revoke unused access, and restrict admin privileges. Use ABAC for refined access, service control policies for AWS Orgs, and lifecycle policies. Utilize AWS Config and IAM Access Analyzer for audits. Avoid default admin permissions and overly permissive policies. High risk if not established."
SEC03-BP03,Establish emergency access process,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_permissions_emergency_process.html,Security,Permissions management,Medium,"To ensure emergency access to workloads in AWS, define and document specific failure modes, create pre-configured emergency access processes, and test them regularly. Document emergency access steps, pre-create necessary resources, and ensure robust logging and monitoring. Avoid depending on the same systems for both normal and emergency access. This reduces downtime and enhances service availability."
SEC03-BP04,Reduce permissions continuously,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_permissions_continuous_reduction.html,Security,Permissions management,Medium,Compliance control for least privilege permissions: Minimize access by removing unneeded permissions and establishing review processes for least privilege. Monitor and eliminate unused identities and permissions for both human and machine access. Use AWS IAM Access Analyzer to create fine-grained policies based on access activity. Test permissions in lower environments before production. Regularly review and remove unused IAM users and roles. Log data events in AWS CloudTrail for detailed access monitoring. Character count: 330
SEC03-BP05,Define permission guardrails for your organization,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_permissions_define_guardrails.html,Security,Permissions management,Medium,"To ensure compliance, use permission guardrails with a layer-based approach. Implement Service Control Policies (SCPs) at hierarchy levels to reduce permissions. Apply broad guardrails at the organization root and stricter ones closer to individual accounts. Use resource policies and permission boundaries to further scope access. Avoid anti-patterns like unmanaged root credentials and implicit denies. This practice mitigates risk and simplifies permission management. (Max 500 chars)"
SEC03-BP06,Manage access based on lifecycle,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_permissions_lifecycle.html,Security,Permissions management,Â Medium,"Compliance Control (max 500 chars):Monitor and adjust permissions for users, roles, and groups throughout their lifecycle to minimize unnecessary privileges. Regularly review and update access as roles change, and remove access for inactive or terminated users. Use automation via AWS IAM Identity Center and SCIM protocol to centrally manage and propagate changes, ensuring adherence to the principle of least privilege and reducing risk of unauthorized access."
SEC03-BP07,Analyze public and cross-account access,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_permissions_analyze_cross_account.html,Security,Permissions management,Low,"Compliance control for AWS resource access:Monitor and reduce public and cross-account access to only necessary resources. Maintain an inventory of shared resources and follow a process for approving access. Use AWS IAM Access Analyzer, AWS Config, and AWS Organizations to identify and audit shared resources, ensuring they are accessible only to authorized principals. Implement auto-remediation and alerts for Amazon S3 buckets to prevent public access. Aim to know which resources are shared and with whom, continuously auditing for compliance. Risk level: Low."
SEC03-BP08,Share resources securely within your organization,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_permissions_share_securely.html,Security,Permissions management,Medium,"**Compliance Control for Resource Sharing:**To minimize unintended access and enhance data loss prevention, securely share resources within your organization. Establish governance, monitor shared resources, and continuously review access. Use AWS Organizations, AWS RAM, and SCPs for secure cross-account sharing. Turn off ACLs for S3 and use IAM policies. Establish a data perimeter to verify trusted identities and networks. For external sharing, follow prescriptive guidance. Related best practices include analyzing public access and sharing securely with third parties.**Risk Level:** Medium**Related Docs & Tools:**- SEC03-BP07- SEC03-BP09- SEC05-BP01- AWS Organizations- AWS RAM- Data Perimeter Policy Examples"
SEC03-BP09,Share resources securely with a third party,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_permissions_share_securely_third_party.html,Security,Permissions management,Medium,"**Compliance Control for Cloud Security with Third Parties (500 chars max)**Ensure third-party access to your cloud environment follows just-in-time access with least privilege using temporary IAM credentials, not long-term keys. Use IAM roles, UUIDs as external IDs, and automate setup with CloudFormation to maintain security. Regularly audit access, detect anomalies, and be prepared to revoke access promptly. Follow SEC03-BP07 for cross-account access analysis and SEC02-BP02 for temporary credentials. Avoid default trust policies and long-term credentials."
SEC04-BP01,Configure service and application logging,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_detect_investigate_events_app_service_logging.html,Security,Detection,High,"**Compliance Control for Security Event Logs in AWS**Ensure retention of security event logs from AWS services and applications to support audits, investigations, and compliance. Avoid anti-patterns like perpetual storage, deletion too soon, unrestricted access, manual governance, and incomplete integrity checks. Benefits include RCA for incidents and evidence for GRC obligations. High risk exists without proper setup. Select relevant log sources, configure AWS CloudTrail, VPC Flow Logs, and Route 53 logs, and use Amazon S3 or CloudWatch Logs for storage. Implement lifecycle policies and query tools like CloudWatch Logs Insights, Athena, or SIEM for efficient log management. Use logs for alerting with AWS Config, GuardDuty, and Security Hub. For guidance, refer to the AWS Security Incident Response Guide."
SEC04-BP02,"Capture logs, findings, and metrics in standardized locations",https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_detect_investigate_events_logs.html,Security,Detection,Â Medium,"**Compliance Control for Security Logs and Findings**Objective: Establish a standardized approach for collecting, analyzing, and visualizing security logs and findings to enhance security operations.**Control Measures:**1. **Centralized Data Collection:** Aggregate security logs and findings in standardized locations for correlation and analysis.   2. **Access Controls:** Implement strict access controls to restrict visibility and modification of collected data.3. **Data Classification:** Govern security logs and findings as part of the organization’s data classification policy.4. **Data Sovereignty:** Address data localization and sovereignty requirements when configuring data collections.5. **SIEM Integration:** Use Security Information and Event Management (SIEM) systems to query and analyze log data for timely responses.**Risk Level:** Medium if not established.**AWS Implementation:**- Create Log Archive and Security Tooling accounts using AWS Organizations.- Utilize Amazon Security Lake for automated data ingestion from AWS and third-party sources.- Deploy analytics tools like Amazon Athena and visualization tools like Amazon QuickSight in the Security Tooling account.**Related Best Practices:** SEC01-BP01, SEC07-BP04, SEC08-BP04, OPS08-BP02.**Related Documents & Tools:** AWS whitepapers, Amazon Security Lake, Amazon Athena, Amazon QuickSight."
SEC04-BP03,Correlate and enrich security alerts,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_detect_investigate_events_security_alerts.html,Security,Detection,LowÂ,"**Compliance Control for Security Alert Correlation and Enrichment****Objective:** Implement automated correlation and enrichment of security alerts to achieve accurate incident identification and response.**Key Actions:**1. **Identify Alert Sources:** Recognize different alert sources like Amazon GuardDuty, AWS Security Hub, and third-party feeds.2. **Capture Alerts:** Use AWS services (Security Hub, EventBridge, CloudWatch) to collect alerts.3. **Data Correlation:** Integrate alerts with AWS CloudTrail, VPC Flow Logs, and other logs via Amazon Security Lake.4. **Automate Enrichment:** Employ Amazon Detective, SIEM tools, or AWS Lambda/Athena for automated correlation and enrichment.5. **Contextual Analysis:** Assess true criticality through context-driven analysis, not just initial alert priority.**Anti-patterns to Avoid:**- Manual correlation without automation.- Different teams investigating alerts independently.- Sole reliance on detection systems for criticality.**Benefits:** Reduces cognitive load, speeds up incident response, and improves event severity assessment.**Risk Level:** Low if not established.**Related Practices:** SEC10-BP03, OPS08-BP04, REL06-BP03.**Tools:** Amazon Detective, EventBridge, Lambda, Athena.**Documents:** AWS Security Incident Response Guide.**Examples:** Enrich AWS Security Hub findings.**Characters Used:** 496"
SEC04-BP04,Initiate remediation for non-compliant resources,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_detect_investigate_events_noncompliant_resources.html,Security,Detection,Medium,"**Compliance Control Summary (Max 500 chars):**Establish programmatic remediations for non-compliant resources, integrating AWS Config and Security Hub for detection and automated responses. Ensure oversight for automated actions, maintaining logs in CloudWatch and review processes for effectiveness. Avoid pitfalls like untested automation, lack of human oversight, and over-reliance on remediations alone. Benefits include faster response times and reduced human error. Risk level: Medium."
SEC05-BP01,Create network layers,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_network_protection_create_layers.html,Security,Protecting networks,High,"To enhance security, segment your network into layers based on workload data sensitivity and access needs. Differentiate between public web endpoints needing inbound internet access and internal databases. This defense-in-depth strategy aligns with identity authentication, ensuring layers match data sensitivity and access requirements with proper traffic controls. Avoid placing all resources in a single VPC or neglecting data sensitivity. Benefits include restricting unauthorized access, reducing analysis scope for inspection systems, and minimizing false positives. High risk is exposed if not established. Design layers by separating components by responsibility and data sensitivity, using AWS services like VPC Lattice and Lambda in VPC subnets where applicable. Use load balancers for public endpoints and VPC endpoints for managed services. Follow best practices like REL02 for network planning and PERF04-BP01 for performance understanding."
SEC05-BP02,Control traffic flow within your network layers,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_network_protection_layered.html,Security,Protecting networks,High,"**Compliance Control for Network Traffic Segmentation**Objective: Restrict network traffic to necessary flows for workload communication, focusing on both north-south and east-west traffic.**Control Measures:**1. **Segmentation:** Implement network segmentation within layers to control traffic to only necessary flows.2. **Traffic Control:** Apply controls for both ingress and egress traffic, using security groups, route tables, and firewalls.3. **Principle of Least Privilege:** Favor point-to-point flows over network peering.4. **Data Sensitivity:** Consider public vs. private ingress/egress, data classification, regional regulations, and protocol requirements.5. **Anti-Patterns:** Avoid perimeter-based security, assuming all internal traffic is authenticated, and relying solely on workload components for traffic control.**Benefits:** Reduces unauthorized movement, restricts security incident impact, and speeds up detection and response.**Risk Level:** High if not established.**Tools:** AWS Firewall Manager, AWS Network Firewall, AWS WAF, AWS Transit Gateway, Route 53 Resolver DNS Firewall."
SEC05-BP03,Implement inspection-based protection,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_network_protection_inspection.html,Security,Protecting networks,Medium,"**Compliance Control Summary (Max 500 chars)**Establish traffic inspection points between network layers to ensure data matches expected patterns. Analyze traffic flows, metadata, and behaviors for effective event detection. Avoid anti-patterns like relying solely on firewall rules or not leveraging intelligent systems. Benefits include intelligent rule creation and managed threat intelligence. Use AWS Network Firewall or third-party IPS for fine-grained control. For web traffic, use AWS WAF. Centralize management with AWS Firewall Manager. For more details, see AWS Network Firewall Best Practices guide."
SEC05-BP04,Automate network protection,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_network_auto_protect.html,Security,Protecting networks,MediumÂ,"**Compliance Control Summary (max 500 chars):**Automate network protection deployments using DevOps practices like IaC and CI/CD pipelines to track changes, reduce deployment time, and detect configuration drift. Define protections via templates, commit to version control, and automate testing/deployment in staging and production. Avoid centralization/delegation pitfalls by balancing control with consistent testing standards. Benefits include change tracking and standardization. Risks of non-compliance include outdated protections and manual errors."
SEC06-BP01,Perform vulnerability management,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_compute_vulnerability_management.html,Security,Protecting compute,High,"To ensure cloud security, implement continuous vulnerability scanning, patch management, and integrate security checks in CI/CD. Establish risk-based vulnerability management processes and automate with AWS tools like Inspector and Systems Manager Patch Manager. Understand shared responsibility and monitor for improvements. Avoid common anti-patterns like deploying unanalyzed code. High risk if not done."
SEC06-BP02,Provision compute from hardened images,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_compute_hardened_images.html,Security,Protecting compute,Â High,"**Compliance Control (max 500 chars)**Ensure runtime environments are provisioned from hardened images. Acquire runtime dependencies from trusted registries, verifying signatures. Maintain private registries for trusted images. Regularly scan and update images and dependencies to mitigate vulnerabilities. Avoid anti-patterns like unverified images and unpatched systems. Benefits include reduced attack vectors and impact. High risk exists without compliance. Use latest OS, container images, and libraries; apply patches, minimize systems, and follow CIS/STIG guidance. Automate with AWS EC2 Image Builder. Manage code packages via private repositories. For Lambda, use layers for dependency management. Related: OPS05-BP05 patch management."
SEC06-BP03,Reduce manual management and interactive access,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_compute_reduce_manual_management.html,Security,Protecting compute,Medium,"Compliance Control Summary (Max 500 chars):Implement automation for deployment, configuration, and maintenance using AWS Systems Manager to reduce operational risks and misconfigurations. Disable SSH/RDP; use SSM Agent for secure access. Log all manual activities for review. Establish automation documents (runbooks) initiated automatically or manually when needed. Ensure IAM roles include AmazonSSMManagedInstanceCore policy. Disable remote access services and misconfigured security groups. Use AWS Systems Manager for patching, software installation, and configuration changes."
SEC06-BP04,Validate software integrity,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_compute_validate_software_integrity.html,Security,Protecting compute,Â Medium,"**Compliance Control for Software Integrity Verification**Use cryptographic verification to validate the integrity of software artifacts, including images, used in your workload. Cryptographically sign your software to safeguard against unauthorized changes. Ensure all artifacts are obtained from trusted sources, vendor website certificates are validated, and downloaded artifacts are cryptographically verified by their signatures. Your own software should be cryptographically signed and verified by your computing environments.**Common Anti-Patterns:**- Ignoring certificate expiration notices.- Downloading artifacts without confirming valid certificates.- Relying solely on hashes without verifying source.- Not signing your own software.**Benefits:** Prevents malware, safeguards against unauthorized changes, secures software supply chain.**Risk Level:** Medium**Tools:** AWS Signer, AWS Lambda, AWS Certificate Manager, AWS Key Management Service, AWS CodeArtifact.**Action Steps:** Incorporate digital signature verification in CI/CD pipelines.**Related Docs:** Cryptographic Signing for Containers, Best Practices for AWS Signer, Container Image Signing with AWS Signer."
SEC06-BP05,Automate compute protection,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_compute_auto_protection.html,Security,Protecting compute,Medium,"**Compliance Control for Compute Protection Automation**Automate compute protection operations to minimize human intervention. Implement automated scanning for potential issues in compute resources, and use automated responses for remediation. Integrate automation in CI/CD to deploy secure, up-to-date workloads. Ensure automated systems scan, patch, verify, and remediate compute resources. Avoid anti-patterns like lack of emergency patching solutions and manual overrides. Benefits include reduced risk of unauthorized access and misconfigurations. Medium risk if not established. Use tools like Amazon Inspector, AWS Systems Manager, EC2 Image Builder, and GuardDuty for automated vulnerability management, patching, and threat detection."
SEC07-BP01,Understand your data classification scheme,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_data_classification_identify_data.html,Security,Data classification,High,"**Compliance Control Summary (Max 500 chars)**Implement a data classification policy to understand data types, sensitivity, and protection controls. Document classification, access controls, encryption, lifecycle, and audits. Avoid anti-patterns like lack of formal policy, sensitivity misunderstanding, and inadequate data controls. Benefits include compliance, cost reduction, and clear data protection. Use data catalogs and tagging (e.g., AWS) for visibility and monitoring. Related: SUS04-BP01, Data Classification whitepaper, Tagging best practices."
SEC07-BP02,Apply data protection controls based on data sensitivity,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_data_classification_define_protection.html,Security,Data classification,High,"Compliance control for data protection: Implement tailored data protection controls aligned with your classification policy, ensuring appropriate security measures for each data sensitivity level. Avoid uniform controls, involve stakeholders, consider operational costs, and review controls periodically. Benefits include optimal resource allocation and flexible data usage. Risks of non-compliance are high. Key steps include identifying data sensitivity, defining isolation boundaries, implementing protection controls, and continuous monitoring. Related best practices include using purpose-built data stores and enforcing retention policies. Tools: AWS KMS, AWS CloudHSM."
SEC07-BP03,Automate identification and classification,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_data_classification_auto_classification.html,Security,Data classification,Medium,"**Compliance Control Summary (max 500 chars)**Automate data identification and classification to enforce correct controls, minimizing human error. Use tools like Amazon Macie, Comprehend, and Glue for sensitive data detection. Continuous monitoring and classification help detect unauthorized data handling. Avoid manual processes, lack of data tracking, and insufficient monitoring. Establish automated identification, ongoing scans, and corrective actions for unauthorized data storage. Medium risk if not established."
SEC07-BP04,Define scalable data lifecycle management,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_data_classification_lifecycle_management.html,Security,Data classification,Â High,"**Compliance Control for Data Lifecycle Management**Ensure data is classified and handled according to its sensitivity at the point of ingestion. Implement automated lifecycle policies for retention, destruction, and provenance tracking. Avoid one-size-fits-all approaches, separate usable data from backups, and manage data durability alongside backups. Benefits include compliance, security, cost optimization, and efficient data access. Risks of non-compliance are high. Use AWS tools like S3 lifecycle policies, DynamoDB TTL, AWS Backup, and data provenance tracking for effective management."
SEC08-BP01,Implement secure key management,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_data_rest_key_mgmt.html,Security,Protecting data at rest,High,"**Compliance Control for Secure Key Management (500 chars max)**Implement a scalable, automated key management system enforcing least privilege, balancing availability, confidentiality, and integrity. Use AWS KMS for secure, redundant storage, avoiding human access to unencrypted keys. Control access via key and IAM policies, monitor key usage, and enable logging. Ensure compliance with regulations by using envelope encryption and the AWS Encryption SDK for client-side protection. Regularly review access policies and enable Security Hub for notifications on misconfigurations."
SEC08-BP02,Enforce encryption at rest,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_data_rest_encrypt.html,Security,Protecting data at rest,High,"**Compliance Control for Data Encryption at Rest****Objective:** Ensure private data at rest is encrypted by default to protect against unintended disclosure or exfiltration.**Actions:**1. **Default Encryption Configuration:** Set default encryption for Amazon EBS volumes, AMIs, and RDS databases.2. **AWS KMS Keys:** Create and manage AWS KMS keys with policies restricting access based on data classification.3. **Service Encryption:** Enable encryption in additional AWS services like S3, EC2, and EFS.4. **Monitoring:** Regularly audit and monitor the use of encryption and decryption keys.**Anti-patterns to Avoid:**- Not using encrypt-by-default settings.- Overly permissive access to decryption keys.- Lack of monitoring for encryption key usage.- Storing data unencrypted.- Using a single encryption key for all data.**Risk Level:** High if best practices are not established."
SEC08-BP03,Automate data at rest protection,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_data_rest_automate_protection.html,Security,Protecting data at rest,Medium,"**Compliance Control: Automate Data Storage Security**Automate validation and enforcement of data at rest controls using automated scanning for misconfigurations, and programmatic remediations. Integrate automation in CI/CD to detect misconfigurations pre-production. Automated systems monitor storage for misconfigurations, unauthorized access, and unexpected use, initiating remediations. Ensure encryption, monitor access settings, and audit controls. Establish this practice to prevent misconfigurations, reduce risk (medium), and align with SEC01-BP06, SEC03-BP02, SEC03-BP04, SEC04-BP04, SEC07-BP03, REL09-BP02, REL09-BP03. Tools: AWS CloudFormation Guard, AWS Config, IAM Access Analyzer, Amazon Macie, AWS Backup, Elastic Disaster Recovery."
SEC08-BP04,Enforce access control,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_data_rest_access_control.html,Security,Protecting data at rest,High,"**Compliance Control for Data Protection at Rest**Ensure data confidentiality and integrity by enforcing access control with isolation and versioning. Apply least privilege and conditional access, preventing public access. Verify authorized access on a need-to-know basis, regularly back up data, and separate data by sensitivity. Avoid overly permissive decryption key permissions, improper data classification, persistent production access, and lack of audits. High risk if not established. Regularly review permissions and use AWS tools like KMS, Organizations, Config, and S3 versioning/object locking.**Common Anti-patterns:**- Mixed sensitivity data storage- Overly permissive decryption key permissions- Improper data classification- Lack of detailed backups- Persistent production data access- Inadequate access auditing**Risk Level: High**"
SEC09-BP01,Implement secure key and certificate management,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_data_transit_key_cert_mgmt.html,Security,Protecting data in transit,High,"**TLS Certificate Compliance Control (500 chars max)**Implement a secure certificate management system via AWS PKI services like ACM and AWS Private CA. Automate provisioning, deployment, and renewal to prevent manual errors. Secure key management prevents private key exposure. Ensure CA hierarchy is well-designed, separating root and intermediate CAs into distinct accounts. Enable logging and audit trails via CloudTrail and periodic review of issued certificates. Avoid self-signed certs and manual renewals. Focus on encrypted, secure network communications."
SEC09-BP02,Enforce encryption in transit,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_data_transit_encrypt.html,Security,Protecting data in transit,High,Compliance Control (Max 500 chars):Implement encryption for data in transit based on organizational policies and standards. Use secure TLS protocols (TLS 1.2 or higher) for all AWS service communications. Avoid deprecated SSL/TLS versions and self-signed certificates. Enforce HTTPS for all public-facing resources and use VPNs for external connectivity. Regularly monitor and replace certificates. High risk if not established.Desired Outcome: Encrypt network traffic within AWS and to the internet using secure protocols to prevent unauthorized access.
SEC09-BP03,Authenticate network communications,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_data_transit_authentication.html,Security,Protecting data in transit,Low,"**Compliance Control for Secure Communications in Workloads**Ensure identity verification using protocols like TLS or IPsec. Implement secure, authenticated network protocols for all service-to-service, application-to-user communications. Aim for authenticated, encrypted traffic flows where feasible. Avoid unencrypted or unauthenticated traffic, credential reuse, and overly permissive traffic. Benefits include limited unauthorized access impact, higher assurance of authenticated actions, improved service decoupling, and enhanced monitoring. Establish east-west and north-south traffic controls, using AWS services like SigV4, mTLS, OAuth 2.0, and JWT for authentication. Monitor for unauthorized access and review related best practices and documents. **Limitations:** 500 characters."
SEC10-BP01,Identify key personnel and external resources,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_incident_response_identify_personnel.html,Security,Preparation,Â High,"**Compliance Control for Incident Response:**Maintain an updated list of key internal and external personnel, including contact info, roles, and responsibilities. Regularly review and update this list to reflect personnel changes and include third-party service providers. Ensure onboarding includes event simulations and define an escalation path. This minimizes response time and reduces risk, ensuring the right people are available during security events.**Common Anti-Patterns:**- Lack of an updated personnel list.- Assumptions about understanding roles.- Absence of infrastructure documentation.- Inadequate onboarding processes.- No escalation path for unavailable personnel.**Benefits:**Reduces event response time and minimizes wasted effort by ensuring the right individuals are prepared and available.**Risk Level:**High if not established.**Key Personnel Identification:**- Incident Manager: Overall authority.- Incident Responders: Investigation and remediation.- Communications Lead: Internal and external communications.- Onboarding: Train new employees with simulations.- SMEs: Insights for mission-critical workloads.**Example Tools:**Use AWS Systems Manager Incident Manager for contact management and response planning.**External Partners:**Engage key personnel from ISVs, partners, and subcontractors. Maintain updated contacts for public agencies and regulators.**Incident Management Setup:**- Deploy Incident Manager in Security Tooling account.- Define multiple contact channels.- Define a response plan with escalation paths.**Related Practices and Tools:**- OPS02-BP03: Operations activity owners.- AWS Security Incident Response Guide.- AWS Systems Manager Incident Manager."
SEC10-BP02,Develop incident management plans,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_incident_response_develop_management_plans.html,Security,Preparation,High,"**Compliance Control for Incident Response Plan**Develop a comprehensive incident response plan (IRP) as the foundation for your incident response program. This document should outline incident response team goals, roles, communication plans, backup methods, incident phases, and severity definitions. Regularly update and test processes to ensure timely responses to security events. Establish clear roles and responsibilities, including HR, executive team, legal, application owners, and trusted partners. Align with compliance requirements and involve SMEs in incident scenarios. Utilize AWS Support, CIRT, Shield, and AMS for additional security and incident response support. Review and revise the plan periodically to adapt to organizational changes."
SEC10-BP03,Prepare forensic capabilities,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_incident_response_prepare_forensic.html,Security,Preparation,Medium,"**Compliance Control for Forensics in AWS****Risk Level: Medium****Control Description:**Develop forensics capabilities to support security event investigations in AWS.**Key Actions:**1. **Establish Forensics Environment:**   - Use AWS Organizations for centralized management.   - Create a forensics OU with per-Region accounts to prevent resource copying.   - Ensure backups and snapshots are secure and regularly tested.2. **Automate Forensics:**   - Implement automation for log collection, memory dumps, and resource snapshots.   - Leverage AWS resources for forensics automation to reduce manual effort and errors.**Related Resources:**- AWS Security Incident Response Guide- Forensic investigation environment strategies in the AWS Cloud- AWS Prescriptive Guidance for automated incident response and forensics.**Summary:** Proactively build and automate forensics capabilities to effectively respond to security incidents in AWS."
SEC10-BP04,Develop and test security incident response playbooks,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_incident_response_playbooks.html,Security,Preparation,Medium,"Compliance control for incident response playbooks: Develop detailed playbooks for anticipated incidents (e.g., DoS, ransomware) and known security alerts (e.g., Amazon GuardDuty). Include overview, prerequisites, communication, response steps (detect, analyze, contain, eradicate, recover), and expected outcomes. Failure to establish this best practice exposes medium risk. Related: SEC10-BP02, Framework for Incident Response Playbooks, Incident Response Playbook Samples. (Max 280 chars)"
SEC10-BP05,Pre-provision access,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_incident_response_pre_provision_access.html,Security,Preparation,Medium,"**AWS Incident Response Compliance Control (500 chars):**Ensure incident responders have pre-provisioned, purpose-built accounts with minimal privileges. Avoid root account use, direct IAM permission changes, and federated identity issues. Use AWS Security Token Service for temporary escalation, enforce MFA, and monitor access via CloudTrail. Create dedicated security accounts with strong policies, automate playbooks with AWS Systems Manager, and configure alerts for incident response role usage. Regularly review and test access controls."
SEC10-BP06,Pre-deploy tools,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_incident_response_pre_deploy_tools.html,Security,Preparation,Medium,"To ensure security personnel are equipped with the right tools for swift investigation and recovery, pre-deploy AWS APIs and tools for automated identity management, network security, data protection, and monitoring. Establish a tagging strategy for AWS resources to enhance context and automation. Automate alert processing to avoid alert fatigue, using anomaly detection systems like Amazon GuardDuty. Implement logging strategies for incident analysis and alerting. Risk level: Medium if best practices are not established."
SEC10-BP07,Run simulations,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_incident_response_run_game_days.html,Security,Preparation,Medium,"Compliance Control for Incident Response Simulations:**Objective:** Regularly conduct incident response simulations to assess and enhance cyber readiness.**Process:**1. **Simulation Types:**   - **Tabletop Exercises:** Discussion-based, focusing on processes and collaboration.   - **Purple Team Exercises:** Collaborative detection mechanism testing.   - **Red Team Exercises:** Offensive simulations to assess defensive measures.2. **Implementation Steps:**   - Define scenario and objectives with leadership approval.   - Identify key stakeholders (facilitators, participants, legal, etc.).   - Build and test the scenario for feasibility.   - Facilitate simulation, engaging all participants.   - Develop an after-action report to identify strengths, weaknesses, and gaps.**Benefits:**- Validate readiness and confidence.- Test tool accuracy and workflow efficiency.- Refine communication and escalation methods.- Respond to uncommon threat vectors.**Risk Level:** Medium if not established.**Resources:**- AWS Incident Response Guide- AWS GameDay - Security Edition- Effective Security Incident Response Videos"
SEC10-BP08,Establish a framework for learning from incidents,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_incident_response_establish_incident_framework.html,Security,Post-incident activity,Medium,"**Compliance Control for Incident Response and Lessons Learned Framework****Objective:** Implement a lessons learned framework and root cause analysis to enhance incident response and prevent recurrence.**Key Elements:**- Schedule and conduct lessons learned sessions post-incident.- Identify involved stakeholders and their roles.- Document and analyze incidents, focusing on what worked and what didn't.- Evaluate processes, technology, and people involved.- Develop and track improvement plans to enhance security posture and minimize preventable incidents.**Risk Level:** Medium. Without this framework, organizations may miss opportunities for improvement, leading to repeated incidents and compromised security.**Related Documents:**- AWS Security Incident Response Guide- NCSC CAF Guidance on Lessons Learned"
SEC11-BP01,Train for application security,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_appsec_train_for_application_security.html,Security,Application security ,Medium,"To ensure secure software development, equip your team with secure development training focusing on threat modeling, secure coding, and secure configurations. Implement a proactive approach by integrating security early in the development lifecycle. Provide self-service training resources, regularly gather feedback, and conduct security exercises to identify vulnerabilities. This fosters a culture of shared security ownership, leading to high-quality, secure software delivery and accelerating the overall timeline. Avoid anti-patterns like late security reviews and centralized security decisions. Establish this practice to mitigate medium risk, enhance software quality, and meet organizational security requirements."
SEC11-BP02,Automate testing throughout the development and release lifecycle,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_appsec_automate_testing_throughout_lifecycle.html,Security,Application security ,Medium,"**Automate security testing throughout the SDLC for early issue detection and reduced risk. Implement static (SAST) and dynamic (DAST) testing, use tools like Amazon CodeGuru Security, and integrate security into CI/CD pipelines. Avoid anti-patterns like delayed testing and inconsistent feedback. Establish iterative reviews and use ticketing systems for remediation. Focus on consistent IDE and code review tools for security.** (470 chars)"
SEC11-BP03,Perform regular penetration testing,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_appsec_perform_regular_penetration_testing.html,Security,Application security ,High,"**Compliance Control for Penetration Testing:**Perform regular penetration testing in the SDLC to identify and remediate security issues before release. Scope tests based on threat models, targeting unexpected software behaviors and data exposure. Train builders on findings and remediation. Automate common tests to speed up processes. Analyze results to inform automated testing and builder education. Establish a feedback loop for continuous improvement. Related best practices include application security training (SEC11-BP01) and automation (SEC11-BP02). *Benefits:* Increased confidence in security, better software quality, early identification of automation needs. *Risk:* High if not established."
SEC11-BP04,Conduct code reviews,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_appsec_manual_code_reviews.html,Security,Application security ,Medium,"**Compliance Control for Code Reviews**Implement code reviews to ensure software quality and security. Involve team members other than the original author to identify issues, vulnerabilities, and adherence to standards. Use automated tools like Amazon CodeGuru Security for assistance. Establish a process before merging or deployment, involving team members and senior developers. Integrate code review tools with CI/CD pipelines. Train developers on best practices and security principles. Monitor and refine the process for continuous improvement. Avoid anti-patterns like single-person reviews and pre-deployment checks. Benefits include increased code quality, consistency, and knowledge transfer. Medium risk if not established."
SEC11-BP05,Centralize services for packages and dependencies,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_appsec_centralize_services_for_packages_and_dependencies.html,Security,Application security ,Medium,"**Compliance Control for Software Package Management (500 chars max)**Implement centralized services for software packages and dependencies to validate before use. Avoid arbitrary repositories; test packages before release. Benefits include better package tracking, update notifications, and reduced risks. Establish a logically centralized repository, automate testing, and regularly scan for issues. Related: SEC11-BP02, DevOps Guidance, SLSA. Examples: AWS CodeArtifact, CodePipeline. Videos: Proactive security, AWS Philosophy of Security. Risk: Medium if not established."
SEC11-BP06,Deploy software programmatically,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_appsec_deploy_software_programmatically.html,Security,Application security ,High,"To ensure robust software deployments, automate processes where possible, reducing human error and ensuring consistent, secure releases. Use CI/CD tools like AWS CodeBuild and CodePipeline for automated builds and tests. Sign software packages with AWS Signer or AWS KMS for integrity. Externalize configurations via AWS Systems Manager Parameter Store. Implement infrastructure as code with AWS CloudFormation or AWS CDK. Use canary deployments for gradual rollouts. Monitor with CloudWatch and audit with CloudTrail. Regularly review and automate deployment practices. Establish secure, automated deployment to minimize risks and enhance release confidence."
SEC11-BP07,Regularly assess security properties of the pipelines,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_appsec_regularly_assess_security_properties_of_pipelines.html,Security,Application security ,High,"To ensure pipeline security, follow AWS Security Pillar principles: separate permissions, regularly assess security, and manage pipeline permissions with temporary credentials. Avoid bypassing tests, overly broad permissions, and long-term credentials. Benefits include integrity assurance and suspicious activity detection. Risks are high if not followed. Use AWS Deployment Pipelines Reference Architecture and IAM Access Analyzer for least-privilege policies. Integrate monitoring with Amazon EventBridge for alerts. (max 500 chars)"
SEC11-BP08,Build a program that embeds security ownership in workload teams,https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_appsec_build_program_that_embeds_security_ownership_in_teams.html,Security,Application security ,Low,"To embed security ownership in builder teams, initiate with SEC11-BP01: Train for application security. Develop a community program, name it Guardians, and choose between training builders, embedding security engineers, or creating affinity roles. Identify sponsors and track metrics like involvement, review time, and feedback for continuous improvement. This approach reduces review time, security issues, and rework, while fostering a culture of ownership and better security perception."
REL01-BP01,Aware of service quotas and constraints,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_manage_service_limits_aware_quotas_and_constraints.html,Reliability,Manage service quotas and    constraints,High,"**Compliance Control for AWS Service Quotas and Constraints Management**Ensure customers prevent service disruption by monitoring key metrics, conducting infrastructure reviews, and automating remediation steps. Avoid anti-patterns like deploying workloads without understanding quotas, assuming quotas increase automatically, or not knowing quota request processes. Establish best practices for monitoring, automated management, and proactive quota adjustments to reduce failures and improve resiliency. Use AWS Service Quotas, Trusted Advisor, and CloudWatch for monitoring and alerts. Related best practices include managing quotas across accounts, accommodating fixed quotas, and ensuring sufficient gaps for failover."
REL01-BP02,Manage service quotas across accounts and regions,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_manage_service_limits_limits_considered.html,Reliability,Manage service quotas and    constraints,High,"**Compliance Control for AWS Service Quotas**Ensure service quotas are requested and managed across all production environments, including non-production, to avoid service quota exhaustion and maintain resilience. Regularly evaluate and update quotas to align with workload demands across accounts and regions. Use quota request templates for efficient management and automate quota assessments to prevent drift. Monitor with AWS Trusted Advisor and adjust quotas to accommodate failover scenarios. **Benefits:** Enhanced resilience and reduced degradation during regional failures.**Risk:** High risk of service disruption without proper quota management.**Implementation Steps:** Review and reconcile quotas, automate quota drift detection, and utilize quota templates. **Related Practices:** REL01-BP01, REL01-BP03, REL01-BP04, REL01-BP05, REL01-BP06, REL03-BP01, REL10-BP01, REL11-BP01, REL11-BP03, REL12-BP04.**Resources:** AWS Well-Architected Framework, AWS Service Quotas, AWS Trusted Advisor, AWS Control Tower."
REL01-BP03,Accommodate fixed service quotas and constraints through architecture,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_manage_service_limits_aware_fixed_limits.html,Reliability,Manage service quotas and    constraints,Medium,"**Compliance Control Summary (Max 500 chars):**Ensure application reliability by recognizing AWS service quotas and constraints, designing architectures that avoid fixed limits. Monitor and test for hard limits like network bandwidth, API throttling, and SQS payload size. Implement observability to alert on potential quota breaches. Benefits: consistent performance under load. Risks: disruption if hard limits are hit. Steps: review service quotas, analyze workload, test for limits, and design for resilience.**Related best practices:** REL01-BP01, REL01-BP02, REL01-BP04, REL01-BP05, REL01-BP06, REL03-BP01, REL10-BP01, REL11-BP01, REL11-BP03, REL12-BP04. Tools: AWS CodeDeploy, CloudTrail, CloudWatch, EventBridge, DevOps Guru, Config, Trusted Advisor, CDK, Systems Manager, Marketplace."
REL01-BP04,Monitor and manage quotas,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_manage_service_limits_monitor_manage_limits.html,Reliability,Manage service quotas and    constraints,Medium,"**Compliance Control for Quota Management****Objective:** Deploy active, automated systems to manage and monitor service quotas, ensuring thresholds are proactively addressed.**Common Anti-Patterns:**- Lack of monitoring for quota thresholds and hard limits.- No response process for quota alerts.- Monitoring only AWS Service Quotas services.- Ignoring quota management for multi-Region resiliency.**Benefits:** Automatic tracking and alerts prevent quota exhaustion and degradation.**Risk Level:** Medium if not established.**Implementation Steps:**- Monitor current usage and quotas via AWS Service Quotas, Trusted Advisor, and CLI.- Automate quota management with AWS Config and Lambda functions.- Compare quotas across regions and request changes as needed.**Related Best Practices:** REL01-BP01, REL01-BP02, REL01-BP03, REL01-BP05, REL01-BP06, REL03-BP01, REL10-BP01, REL11-BP01, REL11-BP03, REL12-BP04.**Documents:** AWS Well-Architected Framework, AWS Service Quotas, AWS Trusted Advisor, Service Quotas User Guide.**Tools:** AWS CodeDeploy, CloudTrail, CloudWatch, EventBridge, DevOps Guru, Config, Trusted Advisor, CDK, Systems Manager, Marketplace."
REL01-BP05,Automate quota management,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_manage_service_limits_automated_monitor_limits.html,Reliability,Manage service quotas and    constraints,Medium,"**Compliance Control for AWS Service Quotas****Objective:** Ensure quotas are appropriately configured for workloads in each AWS account and region.**Key Controls:**1. **Quota Monitoring:** Use AWS Service Quotas, CLI, SDKs, and integrate with CMDB/ITSM systems to track current quotas and consumption.   2. **Automated Alerts:** Generate alerts when quota usage nears defined thresholds. Automate quota increase requests for smaller increments.3. **Review Processes:** Establish operational processes to review quotas and manually process larger quota increase requests.4. **Dashboards:** Build dashboards to monitor service quota use across all accounts and regions, using Trusted Advisor Organizational (TAO) Dashboard.5. **Testing:** Test alert generation and automation in non-production accounts before deployment.**Risk Level:** Medium if not established.**Related Best Practices:** Automate responses to events (OPS10-BP07).**Tools:** Quota Monitor for AWS, Service Quotas request templates, AWS Control Tower.**Documents:** AWS Service Quotas, Trusted Advisor Best Practices, Quota Monitor Solution on AWS."
REL01-BP06,Ensure that a sufficient gap exists between the current quotas and the maximum usage to accommodate failover,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_manage_service_limits_suff_buffer_limits.html,Reliability,Manage service quotas and    constraints,Medium,"Compliance Control (max 500 chars): Ensure service quotas cover potential resource failures and accessibility issues. Maintain a buffer between current usage and quotas, accounting for failover scenarios like network or Availability Zone failures. Calculate total quota considering static stability, fault isolation boundaries, and consumption growth. Request quota increases when needed, and monitor trends. Implement deployment strategies like canary or blue/green. Automate quota management and monitor all workload components for failures. Related best practices include managing quotas across accounts, segmenting workloads, and testing resiliency."
REL02-BP01,Use highly available network connectivity for your workload public endpoints,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_planning_network_topology_ha_conn_users.html,Reliability,Plan your network topology,High,"**Compliance Control for Highly Available Network Connectivity**Ensure highly available network connectivity for public endpoints to minimize downtime and enhance SLA. Use tools like Amazon Route 53, CloudFront, ELB, and AWS Shield. Avoid anti-patterns such as neglecting DNS planning, using individual IPs, and not testing connectivity loss. Establish best practices to guarantee workload accessibility and resilience against DDoS attacks. For setup, configure Route 53, health checks, content delivery networks, and DDoS protection. Related best practices include deploying to multiple locations and sending availability impact notifications."
REL02-BP02,Provision redundant connectivity between private networks in the cloud and on-premises environments,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_planning_network_topology_ha_conn_private_networks.html,Reliability,Plan your network topology,High,"**Compliance Control for Redundant Cloud Connectivity**Implement redundancy in cloud-to-on-premises connections via multiple links and paths for resilience. Avoid single points of failure, single VPN tunnels, and reliance on one ISP. Use dynamic routing (BGP) and consider multiple ISPs. Benefits include reliable service continuity. Risks of non-compliance are high. Use AWS Direct Connect, VPNs, and BGP for redundancy. Use AWS Transit Gateway and evaluate marketplace appliances for failover. **Related Docs & Videos:** AWS Direct Connect Resiliency, VPC Design, Transit Gateway architectures."
REL02-BP03,Ensure IP subnet allocation accounts for expansion and availability,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_planning_network_topology_ip_subnet_allocation.html,Reliability,Plan your network topology,Medium,"**Amazon VPC IP Compliance Control (500 chars):**Ensure scalable IP subnets in Amazon VPCs, considering future growth, regulatory compliance, and integration with other networks. Allocate CIDR blocks large enough for current and future workloads, including EC2 instances, load balancers, and containers. Avoid underestimating growth, overlapping IP ranges, and failing to monitor IP consumption. Use IPv6 for ephemeral instances. Follow REL02-BP05 for non-overlapping IP ranges. Plan network topology, considering multi-AZ deployments and VPC connectivity."
REL02-BP04,Prefer hub-and-spoke topologies over many-to-many mesh,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_planning_network_topology_prefer_hub_and_spoke.html,Reliability,Plan your network topology,Medium,"**Compliance Control for Hub-and-Spoke Network Design****Objective:** Implement a hub-and-spoke topology for connecting multiple private networks, simplifying management and reducing complexity.**Controls:**1. **Central Hub Management:** Ensure the hub (e.g., AWS Transit Gateway) is managed by a dedicated Network Services account for centralized control.2. **Routing Configuration:** Design routing tables to connect only necessary networks, avoiding complex peering relationships.3. **Subnet Design:** Use separate subnets with small CIDRs for each VPC attachment to maximize address space.4. **Network ACLs:** Implement a single network ACL open in both directions for all hub-associated subnets.5. **Monitoring:** Use Amazon CloudWatch for continuous monitoring and performance tuning.6. **Non-Overlapping CIDRs:** Verify no overlapping CIDR ranges among connected networks.7. **Documentation:** Follow best practices for IP subnet allocation and enforce non-overlapping private IP address ranges.**Risk:** Medium if best practices are not followed, leading to increased management overhead and complexity.**Related Practices:** REL02-BP03, REL02-BP05. **Resources:** Transit Gateway documentation, APN Partners, AWS Marketplace, and related workshops."
REL02-BP05,Enforce non-overlapping private IP address ranges in all private address spaces where they are connected,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_planning_network_topology_non_overlap_ip.html,Reliability,Plan your network topology,Medium,"**Compliance Control for IP Address Management in VPCs****Objective:**Ensure no IP address range conflicts between VPCs, on-premises, or other cloud providers.**Controls:**1. **Non-overlapping IP Ranges:** Each VPC must have unique IP ranges not overlapping with on-premises or other cloud providers.2. **IPAM Utilization:** Implement an IP address management system like Amazon VPC IP Address Manager for automation.3. **CIDR Tracking:** Regularly track and record CIDR blocks for all VPCs and subnets.4. **Conflict Detection:** Use IPAM to identify and resolve overlapping IP ranges.**Benefits:** Prevents routing issues and supports scalable network growth.**Risk Level:** Medium if not established.**Related Practices:** Network protection, subnet usage monitoring.**Resources:** Amazon VPC, AWS Marketplace, APN Partners, whitepapers, and relevant videos."
REL03-BP01,Choose how to segment your workload,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_service_architecture_monolith_soa_microservice.html,Reliability,Design your workload service architecture,High,"**Compliance Control for Workload Segmentation and Architecture Selection**Ensure workloads are supportable, scalable, and loosely coupled. Avoid monolithic architecture; favor microservices where statelessness allows. When segmenting, weigh benefits against complexities. Consider SOA for balance, and microservices for agility and reliability. Use AWS tools like X-Ray, App Mesh, and Migration Hub Refactor Spaces for support. High risk if not established; high level of effort for implementation. Follow Strangler Fig pattern for monolith refactoring. Focus on specific business domains (REL03-BP02). For details, see related docs and examples."
REL03-BP02,Build services focused on specific business domains and functionality,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_service_architecture_business_domains.html,Reliability,Design your workload service architecture,High,"**Compliance Control for Microservices and Domain-Driven Design (DDD)**Engineers and business stakeholders collaboratively define bounded contexts and design services that meet specific business functions using practices like event storming. New applications are decomposed into well-defined, loosely coupled services. Monoliths are refactored using bubble contexts and decomposition patterns. Services operate independently, with clear boundaries, facilitating easier testing, deployment, and handling of failures. High risk is exposed if this best practice is not established. **Common Anti-Patterns:**- Forming teams around technical domains instead of business domains.- Services spanning multiple bounded contexts.- Shared domain dependencies across services.- Inconsistent domain language in service contracts.**Benefits:**- Independent, testable, deployable services.- Domain-specific resiliency.**Related Practices and Documents:**- REL03-BP01, REL03-BP03- AWS Microservices, Monolith Decomposition, DDD, Hexagonal Architectures, Event Storming, TDD, BDD.**Tools:**- AWS Cloud Databases, Serverless, Containers."
REL03-BP03,Provide service contracts per API,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_service_architecture_api_contracts.html,Reliability,Design your workload service architecture,Medium,"**API Service Contract Compliance Control (500 chars max)**Ensure documented service contracts with machine-readable API definitions. Adopt versioning strategies to allow gradual migration. Use strongly typed schemas for API bindings. Implement independent testing with API contracts. Utilize AWS services like Amazon API Gateway, AWS AppSync, and Amazon EventBridge for contract management. Avoid leaking implementation details in error messages. Establish type checking to catch issues early. Benefit from improved reliability and interoperability in distributed systems."
REL04-BP01,Identify the kind of distributed systems you depend   on,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_prevent_interaction_failure_identify.html,Reliability,Design interactions in a distributed system to prevent failures,High,"**Compliance Control for Distributed Systems Interaction****Objective:** Design a workload that interacts with synchronous, asynchronous, and batch dependencies.**Anti-patterns to avoid:**1. Infinite wait for responses leading to client timeouts.2. Synchronous chaining causing brittleness.3. Mismanagement of asynchronous message delivery.4. Lack of batch job scheduling tools.**Benefits:** Enhances workload resilience against dependency disruptions.**Risk:** High if best practices are not followed.**Guidance:**- Ensure dependency SLOs meet workload needs.- Use AWS observability for monitoring.- Identify and address communication challenges.- Implement robust error handling and logging.**Synchronous:** Avoid multiple synchronous dependencies; set timeouts; handle retries; minimize calls.**Asynchronous:** Use messaging or event streaming; handle duplicates via idempotency; monitor with CloudWatch and X-Ray.**Batch:** Define job windows; use scalable storage; orchestrate with AWS Step Functions; monitor jobs for abnormalities.**Related Docs & Tools:** Amazon CloudWatch, AWS X-Ray, AWS Step Functions, AWS Batch."
REL04-BP02,Implement loosely coupled dependencies,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_prevent_interaction_failure_loosely_coupled_system.html,Reliability,Design interactions in a distributed system to prevent failures,High,"**Compliance Control for Loose Coupling in Dependencies**Implement loosely coupled dependencies to minimize failure impact, enhance resiliency, and improve agility. Avoid tight coupling, monolithic deployments, and direct API invocations. Use AWS services like SQS, EventBridge, SNS, and Step Functions for asynchronous, event-driven architectures. Benefits include isolated failures, simplified development, and cost-effective scaling. High risk exists if not established.**Anti-Patterns:**1. Monolithic workloads2. Direct API invocations without failover3. Tight coupling via shared data4. Ignoring back pressure**Best Practices:**- Build event-driven architectures with Amazon EventBridge.- Implement queues with Amazon SQS.- Containerize as microservices using ECS/EKS.- Manage workflows with AWS Step Functions.- Use pub/sub messaging with Amazon SNS.**Related Docs & Videos:**- Amazon EventBridge- Amazon Simple Queue Service- AWS Step Functions- Amazon EC2 Idempotency- Amazon Builders' Library: Distributed systems, Reliability- Videos on event-driven architectures and AWS servicesAdhering to these practices ensures resilient, scalable, and maintainable applications."
REL04-BP03,Do constant work,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_prevent_interaction_failure_constant_work.html,Reliability,Design interactions in a distributed system to prevent failures,Low,"**Compliance Control for System Stability:**Maintain consistent workload to prevent system failures during rapid load changes. For health checks on large server populations, ensure payloads remain constant, e.g., sending a 12.5-KB snapshot regardless of failure rates. Implement loosely coupled dependencies to enhance resiliency. Related resources: Amazon Builders' Library, AWS re:Invent talks on constant work and event-driven architectures. **Risk Level: Low**"
REL04-BP04,Make mutating operations idempotent,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_prevent_interaction_failure_idempotent.html,Reliability,Design interactions in a distributed system to prevent failures,Medium,"**Compliance Control for Idempotency in APIs**Ensure each request is processed exactly once using idempotency tokens. Avoid retries causing duplicate actions. Use unique identifiers (UUIDs) in requests. Track state in databases like DynamoDB or ElastiCache, managing old tokens. Implement idempotent operations in APIs, validate with tests, and document clearly. Monitor for issues. Related practices: control retries, monitor components, integrate testing, and send notifications. Resources: Amazon Builders' Library, AWS Lambda Powertools."
REL05-BP01,Implement graceful degradation to transform applicable hard dependencies into soft dependencies,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_mitigate_interaction_failure_graceful_degradation.html,Reliability,Design interactions in a distributed system to mitigate or withstand failures,High,"**Compliancy Control Summary (max 500 chars)**Ensure application components maintain core functionality despite dependency failures, serving stale or alternate data. Design workflows to handle failures predictably. Avoid anti-patterns like not identifying core functionality, inconsistent states, or invalidating local state. Benefits include improved system availability and functionality. High risk if not implemented; consider failure modes, core functions, and fallback strategies. Use patterns like circuit breakers, sagas, and default parameters. Test pathways and prioritize business requirements."
REL05-BP02,Throttle requests,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_mitigate_interaction_failure_throttle_requests.html,Reliability,Design interactions in a distributed system to mitigate or withstand failures,High,"**Compliance Control for API Throttling (max 500 chars)**Implement request throttling to prevent resource exhaustion during demand spikes. Set throttling limits based on load testing, use token bucket algorithm for controlled rate limiting, and configure AWS services like API Gateway and SQS for buffering. Ensure rate limits are per IP and provision resources accordingly. Test throttling limits and document them. Avoid increasing limits beyond tested values without verifying resource adequacy."
REL05-BP03,Control and limit retry calls,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_mitigate_interaction_failure_limit_retries.html,Reliability,Design interactions in a distributed system to mitigate or withstand failures,High,"To ensure compliance, implement retry logic with exponential backoff and jitter, capping retries to prevent resource exhaustion. Use built-in AWS SDK retries where applicable. Test retries and verify service idempotency. Determine the optimal retry layer in your stack. Favor SDKs with proven retry strategies. Monitor failures to address underlying issues. Related best practices include making operations idempotent, throttling requests, failing fast, setting client timeouts, and monitoring workloads. For guidance, refer to AWS documentation on retries and exponential backoff."
REL05-BP04,Fail fast and limit queues,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_mitigate_interaction_failure_fail_fast.html,Reliability,Design interactions in a distributed system to mitigate or withstand failures,High,"**Compliance Control Summary (max 500 chars):**Implement  fail fast  strategies to quickly recover from resource contention and exceptions, ensuring service level objectives are met. Use queues to buffer high-rate requests, but avoid backlogs. Key anti-patterns include unconfigured dead letter queues and not measuring queue latency. Benefits include easier debugging and greater resilience. High risk if not established. Use Amazon CloudWatch for monitoring, fail away from impaired resources, and manage queues with Amazon SQS for effective load smoothing. Related best practices include dependency decoupling and request throttling."
REL05-BP05,Set client timeouts,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_mitigate_interaction_failure_client_timeouts.html,Reliability,Design interactions in a distributed system to mitigate or withstand failures,High,"**Compliance Control for Remote Call Timeouts (max 500 chars):**Set connection and request timeouts for service dependencies, avoiding default values. Understand normal request timings and probable causes for delays. Implement retries and circuit breakers. Test timeout scenarios. Balance timeout values to avoid resource exhaustion or artificial failures. Monitor error rates and latency. Use AWS SDKs for configuration. Apply best practices: REL05-BP03, REL05-BP04, REL06-BP07. High risk if not established."
REL05-BP06,Make systems stateless where possible,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_mitigate_interaction_failure_stateless.html,Reliability,Design interactions in a distributed system to mitigate or withstand failures,Medium,"**Compliance Control for Stateless Applications (Max 500 chars):**Ensure systems are stateless to avoid reliance on local data, enabling server replacement without impact. Design applications to scale horizontally and remain resilient. Use AWS services like Amazon Cognito, Secrets Manager, S3, DynamoDB, ElastiCache, EFS, and MemoryDB to offload state. Identify stateful components, decouple data, and design a stateless architecture. Follow REL11-BP03 for automated healing. Refer to AWS Builders' Library for distributed system strategies."
REL05-BP07,Implement emergency levers,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_mitigate_interaction_failure_emergency_levers.html,Reliability,Design interactions in a distributed system to mitigate or withstand failures,Medium,"**Compliance Control for Emergency Levers:**To ensure high availability during unexpected demand spikes or failures, implement emergency levers by:1. **Identifying Critical Components:** Map and rank workload components based on business importance.2. **Architecting Resilience:** Design critical components to withstand non-critical failures.3. **Testing Behavior:** Validate critical component performance during non-critical failures.4. **Defining Activation Criteria:** Establish clear metrics and triggers for emergency lever use.5. **Procedures:** Define both manual and automated emergency lever procedures, including load shedding or throttling.**Benefits:** Improves availability through known-good responses to unexpected demands or failures.**Risk Level:** Medium if not established.**Related Practices:** Implement graceful degradation (REL05-BP01), throttle requests (REL05-BP02), prevent bimodal behavior (REL11-BP05)."
REL06-BP01,Monitor all components for the workload (Generation),https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_monitor_aws_resources_monitor_resources.html,Reliability,Monitor workload resources,High,"**Compliance Control for Monitoring AWS Workloads****Objective:** Ensure all components of the workload are monitored for reliability and optimal performance.**Control Measures:**1. **Monitor All Components:** Use Amazon CloudWatch or third-party tools to monitor front-end, business logic, and storage tiers.   2. **Define Key Metrics:** Identify and extract relevant metrics from logs, setting thresholds for alarm events. Focus on both technical and business KPIs.3. **AWS Health Dashboard:** Utilize AWS Health Dashboard for insights into the performance and availability of underlying AWS services.4. **Anomaly Detection:** Leverage AWS services like CloudWatch for statistical and machine learning-based anomaly detection.5. **Synthetic Monitoring:** Implement synthetic transactions with Amazon CloudWatch Synthetics to proactively identify issues.6. **Logging:** Enable logging where available, including S3 Access Logs, and collect metrics from AWS services.7. **Alerts and Recovery:** Define alerts and recovery processes to quickly respond to incidents and meet RTO.**Risk Level:** High if not established.**Related Best Practices:** Automate healing (REL11-BP03).**Resources:** AWS Health Dashboard, CloudWatch Metrics, Synthetics, and X-Ray documentation."
REL06-BP02,Define and calculate metrics (Aggregation),https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_monitor_aws_resources_notification_aggregation.html,Reliability,Monitor workload resources,High,"**Compliance Control for Observability Best Practices****Objective:** Ensure comprehensive observability of your workload through effective log and metric collection, analysis, and retention.**Requirements:**1. **Log Collection:** Collect logs from workload components and AWS service dependencies, ensuring high-fidelity timestamps and relevant processing context info (trace ID, user ID, remote IP).2. **Centralized Storage:** Publish logs to a central location for easy access and processing.3. **Aggregate Metrics:** Create aggregate metrics representing workload behavior from a high-level perspective.4. **Querying and Insights:** Enable querying of aggregated logs for deep insights and problem identification.5. **Retention Policy:** Define a log retention policy balancing historical value and compliance needs.**Anti-patterns to Avoid:**- Neglecting relevant logs or metrics.- Analyzing telemetry in isolation.- Allowing logs/metrics to expire too quickly.**Benefits:** Enhanced anomaly detection, correlated event analysis, quicker failure cause identification.**Risk:** High risk if best practices are not established.**Related Practices:**- Monitor all components (REL06-BP01)- Automate responses (REL06-BP04)- Analyze logs (REL06-BP05)- Review monitoring scope (REL06-BP06)- End-to-end tracing (REL06-BP07)**Tools:** Amazon CloudWatch, CloudWatch Logs Insights, CloudWatch Metrics Insights, AWS Distro for OpenTelemetry."
REL06-BP03,Send notifications (Real-time processing and alarming),https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_monitor_aws_resources_notification_monitor.html,Reliability,Monitor workload resources,High,"**Compliance Control Summary (max 500 chars):**Establish real-time alarms in Amazon CloudWatch with optimal thresholds to promptly notify relevant personnel and systems for swift issue resolution. Avoid overly high or low thresholds, update alarms with usage changes, and automate responses for best practices. Utilize Amazon SNS for high fan-out and EventBridge for broader event integration. Configure alarms, SNS notifications, and EventBridge rules for automated responses. Relates to REL06-BP01, REL06-BP02, and REL12-BP01."
REL06-BP04,Automate responses (Real-time processing and alarming),https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_monitor_aws_resources_automate_response_monitor.html,Reliability,Monitor workload resources,Medium,"**Compliance Control for Automated Alarm Processing****Objective:** Implement automated real-time processing of alarms to maintain service level objectives (SLOs) and service-level agreements (SLAs).**Control Measures:**- **Automated Alarm Handling:** Use AWS EventBridge and CloudWatch alarms to trigger automated responses like component replacement, compute capacity adjustments, traffic redirection, and operator notifications.- **Inventory and Documentation:** Maintain a clear inventory of real-time alarms and document all alarm actions in a runbook.- **Standard Operating Procedures (SOPs):** Develop SOPs for operators to follow when alerts are triggered, based on AWS Resilience Hub recommendations.- **Automation Strategy:** Identify tasks for automation, challenge manual processes, and implement automation where possible using AWS Systems Manager Automation and Amazon DevOps Guru.**Risk Level:** Medium if not established.**Related Best Practices:** REL06-BP01, REL06-BP02, REL06-BP03, REL08-BP01.**Tools:** AWS CLI, AWS SDK, Amazon EventBridge, AWS Systems Manager, Amazon DevOps Guru.**Training:** Operators should be trained on manual steps and SOPs.**Outcome:** Real-time alarms are identified, and automated responses maintain SLAs and service availability."
REL06-BP05,Analyze logs,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_monitor_aws_resources_storage_analytics.html,Reliability,Monitor workload resources,Medium,"**Compliance Control for Log Data Analysis**Monitor and analyze log files and metrics using Amazon CloudWatch Logs Insights for trends. Use subscriptions to send data to Amazon S3 for querying with Athena. Manage data lifecycle with S3 policies, transitioning to Glacier for long-term storage. Establish retention policies to mitigate medium risk. For S3 logs, create lifecycle policies to reduce data volume for Athena queries.**Related Docs:** CloudWatch Logs Insights, S3 Lifecycle Policies, Athena Querying, Observability Workshops."
REL06-BP06,Regularly review monitoring scope and   metrics,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_monitor_aws_resources_review_monitoring.html,Reliability,Monitor workload resources,Medium,"**Compliance Control for Monitoring Strategy**Ensure a dynamic monitoring strategy by:1. **Regular Reviews**: Conduct periodic audits of your monitoring setup to adapt to workload changes and evolving architecture.2. **Metric Relevance**: Anchor monitoring in key business metrics that evolve with business priorities, emphasizing service-level indicators (SLIs).3. **Comprehensive Monitoring**: Incorporate insights from infrastructure, applications, clients, and users.4. **False-Positive Reduction**: Validate alert thresholds and eliminate false positives.5. **Full Observability**: Monitor all application components and avoid focusing solely on technical metrics.**Anti-Patterns to Avoid**:- Default metrics only.- Unreviewed monitoring strategies.- Lack of monitoring discussions during major changes.- Reliance on outdated metrics.- Overloaded operations teams with false alerts.- Ignorant application component monitoring.- Excluding business metrics.**Benefits**: Proactively identify potential issues, uncover blind spots, and improve issue detection.**Risk Level**: Medium if not established.**Related Best Practices**: REL06-BP01, REL06-BP02, REL06-BP07, REL12-BP02, REL12-BP06.**Resources**: Amazon CloudWatch, Observability Best Practices, Resilience Analysis Framework, Operational Readiness Review (ORR)."
REL06-BP07,Monitor end-to-end tracing of requests through your system,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_monitor_aws_resources_end_to_end.html,Reliability,Monitor workload resources,Medium,"Compliance Control for End-to-End Tracing:Trace requests across all service components to enable product teams to debug issues and enhance performance. Ensure comprehensive tracing for all components, including AWS Lambda, synthetic canaries, and real-user monitoring, to avoid incomplete performance profiles. Use AWS X-Ray and Amazon CloudWatch to visualize and analyze traces, integrate with ServiceLens, and set up alarms for quick issue detection. Adopt a single tracing solution for hybrid workloads and configure it to ingest telemetry from all components. This ensures detailed component interactions, improves MTTR, and enhances customer satisfaction. Failure to implement this may result in medium risk, leading to incomplete analysis and longer resolution times."
REL07-BP01,Use automation when obtaining or scaling resources,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_adapt_to_changes_autoscale_adapt.html,Reliability,Design your workload to adapt to changes in demand,High,"**Compliance Control for Cloud Infrastructure Management****Objective:** Implement Infrastructure as Code (IaC) and CI/CD for reliable cloud resource management.**Control Measures:**- Define infrastructure in version control systems using IaC tools like AWS CloudFormation.- Automate provisioning and updates via CI/CD pipelines (e.g., AWS CodePipeline).- Use managed services (e.g., ALB, NLB, Auto Scaling) for dynamic resource scaling.- Avoid manual deployments, tight coupling, inflexible scaling, and manual capacity estimation.**Benefits:**- Consistency, repeatability, and reduced manual errors.- Efficient resource provisioning and scaling based on demand.**Risks:** High risk of manual errors and inefficiencies without automation.**Setup Steps:**1. Store IaC templates in a version control system (e.g., Git).2. Integrate IaC with CI/CD pipelines for automated deployments.3. Configure Auto Scaling for dynamic resource management.4. Monitor deployments and implement rollback mechanisms.**Related Resources:**- AWS Auto Scaling, AWS CloudFormation, AWS CodePipeline, Amazon CloudWatch.**Videos:**- Deploy Code to EC2, AWS CloudFormation Templates, AWS CodePipeline, CloudWatch Dashboards."
REL07-BP02,Obtain resources upon detection of impairment to a workload,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_adapt_to_changes_reactive_adapt_auto.html,Reliability,Design your workload to adapt to changes in demand,Medium,"**Compliancy Control (max 500 chars):**Ensure resource availability by configuring health checks and criteria to detect resource shortages. Implement manual or automated scaling (e.g., EC2 Auto Scaling, DynamoDB auto scaling) to restore availability. Automation should be preferred. Observability and monitoring across workload components help detect failures and initiate scaling procedures. Failure to establish this best practice exposes medium risk. For more details, see REL07-BP01, REL11-BP01, and AWS Auto Scaling documentation."
REL07-BP03,Obtain resources upon detection that more resources are needed for a workload,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_adapt_to_changes_proactive_adapt_auto.html,Reliability,Design your workload to adapt to changes in demand,Medium,"**Cloud Computing Compliance Control (500 chars max):**Ensure dynamic resource provisioning in the cloud, avoiding over-provisioning in on-premises setups. Configure automatic scaling for compute and database resources using Amazon EC2 Auto Scaling or Application Auto Scaling. Avoid fixed resource allocation, irrelevant scaling metrics, and insufficient headroom. Benefits include high availability and cost reduction. Risks of non-compliance: medium. For scalable components like EC2 instances or ECS tasks, choose metric-based, scheduled, or predictive scaling. Verify configurations through load testing and alarms."
REL07-BP04,Load test your workload,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_adapt_to_changes_load_tested_adapt.html,Reliability,Design your workload to adapt to changes in demand,Medium,"**Load Testing Compliance Control (max 500 chars):**Adopt sustained load testing to gauge scalability against workload needs. Use AWS to create temporary test environments mimicking production scale, decommission after testing. Avoid anti-patterns like testing non-production configs or only parts of workload. Benefits include identifying failure points and metrics to monitor. Risks of non-compliance: medium. Implement distributed load testing on AWS to simulate user traffic, identify request mixes, and test capacity scaling. Related: AWS Distributed Load Testing, Load Testing Applications."
REL08-BP01,Use runbooks for standard activities such as deployment,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_tracking_change_management_planned_changemgmt.html,Reliability,Implement change,High,"**Compliance Control for Runbooks:**Runbooks are predefined procedures for achieving specific outcomes, crucial for standard activities like deployments and patches. Implement rollback safety and start with manual processes before coding them. Avoid unplanned changes, skipping steps, or untested reversals. Benefits include better change planning and confidence. High risk is exposed without this practice. Use AWS CloudFormation for infrastructure as code, ensuring version control and access management. Store IaC in a Git-based system. Related: APN Partners, AWS Marketplace, AWS Well-Architected Framework. (286 characters)"
REL08-BP02,Integrate functional testing as part of your deployment,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_tracking_change_management_functional_testing.html,Reliability,Implement change,Â High,"**Compliance Control for Automated Testing in Deployments**To ensure code quality and reduce deployment risks, implement automated unit and integration tests within your CI/CD pipeline. Key practices include:- **Unit Tests**: Write tests for each function before coding (TDD). Ensure they pass before commits.- **Integration Tests**: Automate these tests in staging environments mirroring production to validate system-wide functionality.- **CI/CD Integration**: Integrate tests into AWS CodePipeline, halting deployment if criteria are unmet.- **Environment Consistency**: Run tests in environments that closely replicate production to catch compatibility issues early.- **Monitoring**: Continuously monitor test results, adjusting the test suite and deployment process as needed.**Risk**: High risk of bugs and unexpected behavior if tests are ignored or inadequately automated.**Related Best Practices**: Load testing (REL07-BP04), resiliency testing (REL08-BP03), chaos engineering (REL12-BP04).**Tools**: AWS CodePipeline, AWS CodeBuild, AWS Device Farm for device testing."
REL08-BP03,Integrate resiliency testing as part of your deployment,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_tracking_change_management_resiliency_testing.html,Reliability,Implement change,Medium,"**Compliance Control for Resiliency Testing****Objective:** Integrate resiliency testing to enhance system robustness against failures.**Method:** Introduce controlled failures to evaluate system resilience, focusing on unanticipated failures.**Integration:** Start in pre-production, aim for production implementation.**Best Practices:** Avoid observability gaps, human-reliant fixes, poor analysis, and lack of documentation.**Risk Level:** Medium if not established.**Common Forms:** Disaster recovery and chaos engineering.**Implementation:** Update DR plans, automate reliability tests, use AWS Resilience Hub, conduct DR testing, and run chaos experiments.**Related Docs & Videos:** Experiment with failure, AWS Resilience Hub, DR strategies, Chaos Engineering, AWS Fault Injection Service, AWS Resilience Hub.**Outcome:** Build confidence in system resilience, identify weak points, and improve mitigation strategies."
REL08-BP04,Deploy using immutable infrastructure,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_tracking_change_management_immutable_infrastructure.html,Reliability,Implement change,Medium,"**Immutable Infrastructure Compliance Control (max 500 chars):**Adhere to immutable infrastructure by deploying changes onto new resources instead of modifying existing ones. Use automation for reproducibility, and implement canary or blue/green deployment patterns to minimize user impact. Leverage AWS services like CloudFormation, Elastic Beanstalk, and AWS CDK for infrastructure as code. Monitor for drift and ensure strict access controls via IAM. Follow DevOps best practices for enhanced reliability, consistency, and security."
REL08-BP05,Deploy changes with automation,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_tracking_change_management_automated_changemgmt.html,Reliability,Implement change,Medium,"**Compliance Control for Automated Deployments****Objective:** Implement automated deployment processes to minimize risks and human errors.**Key Elements:**- **Automation:** Use CI/CD pipelines for testing, deploying, and rolling back changes.- **Testing:** Extensive pre-production testing before live deployment.- **Rollbacks:** Automatic rollbacks to revert to previous stable states.- **Deployment Strategy:** Staggered deployments to allow for monitoring and validation.**Anti-patterns to Avoid:**- Manual changes- Bypassing automation for shortcuts- Rapid, unmonitored follow-on deployments**Benefits:** Reduces human error, ensures thorough testing, and allows quick recovery from failures.**Risk Level:** Medium if not established.**Implementation Steps:**1. Secure code repository (e.g., Git).2. Continuous integration (e.g., AWS CodeBuild).3. Automated deployment (e.g., AWS CodeDeploy).4. Continuous delivery (e.g., AWS CodePipeline).**Related Practices:** OPS05-BP04, OPS05-BP10, OPS06-BP02, OPS06-BP04.**Resources:** AWS CodePipeline, CodeDeploy, Systems Manager Patch Manager, Builders' Library."
REL09-BP01,"Identify and back up all data that needs to be backed up, or reproduce the data from sources",https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_backing_up_data_identified_backups_data.html,Reliability,Back up data,High,"**Compliance Control for AWS Data Backup and Recovery****Objective:** Ensure all workload data sources are identified, classified by criticality, and have a defined recovery strategy based on RPO.**Key Steps:**1. **Identify Data Sources:** Catalog all data sources (databases, volumes, etc.) used by the workload.2. **Classify by Criticality:** Rank data sources based on their importance to the workload.3. **Backup Strategy:** Use AWS services (RDS, DynamoDB, Backup) or third-party tools to back up critical data.4. **Data Reproduction:** For non-critical data, establish mechanisms to reproduce data from other sources.5. **RPO/RTO Compliance:** Ensure backup frequency meets RPO and recovery processes fit within RTO.**Risk:** High risk of data loss if not established.**AWS Tools:** Utilize AWS Backup, Elastic Disaster Recovery, S3 for storage, and RDS/DynamoDB for automated backups.**Implementation Effort:** Moderate.**Related Best Practices:** REL13-BP01, REL13-BP02."
REL09-BP02,Secure and encrypt backups,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_backing_up_data_secured_backups_data.html,Reliability,Back up data,High,"**Compliance Control:**Ensure backup security via authentication and authorization, and data integrity via encryption. Avoid same access for backups and data. Use AWS IAM for access control. Employ encryption (AWS KMS, client-side) for data at rest and in transit. Implement least privilege permissions. Establish this to prevent data tampering and accidental exposure. High risk if not established.**Implementation Steps:**1. Encrypt data stores (RDS, EBS, DynamoDB, EFS, S3).2. Configure encryption for backups and replicas.3. Use AWS IAM for least privilege access.4. Follow security best practices for backup access."
REL09-BP03,Perform data backup automatically,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_backing_up_data_automated_backups_data.html,Reliability,Back up data,Medium,"**Compliance Control for Automated Backups**Ensure automated backups of critical datasets based on Recovery Point Objective (RPO) or dataset changes. High-priority data should be backed up frequently, while less critical data can be backed up less often. Use AWS Backup or native AWS service capabilities for automation. Avoid manual backups and ensure alerts for missed backups. Establish this practice to mitigate medium risk from data loss.**Implementation Steps:**1. Identify manual backups.2. Define RPO for workloads.3. Use AWS Backup or native services for automation.4. For unsupported sources, use third-party solutions or custom automation with AWS tools.**Level of Effort: Low**"
REL09-BP04,Perform periodic recovery of the data to verify backup integrity and processes,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_backing_up_data_periodic_recovery_testing_data.html,Reliability,Back up data,Medium,"To ensure compliance with Recovery Time Objectives (RTO) and Recovery Point Objectives (RPO), validate your backup process by performing recovery tests. This involves periodically restoring backups to verify data integrity, accessibility, and alignment with RTO/RPO. Avoid common pitfalls like untested restorations and assumptions about backup functionality. Benefits include confidence in data recovery and meeting RTO/RPO. Implement by identifying data sources, establishing validation criteria, assessing recovery capability, and automating periodic tests using AWS services like Lambda, Step Functions, and EventBridge."
REL10-BP01,Deploy the workload to multiple locations,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_fault_isolation_multiaz_region_system.html,Reliability,Use fault isolation to protect    your workload,High,"**Compliance Control for Multi-AZ and Multi-Region Deployment****Objective:** Ensure production workloads are distributed across multiple Availability Zones (AZs) or AWS Regions for fault tolerance and high availability.**Guidelines:**1. **Availability Zones:** Deploy compute resources and data across at least two AZs within a Region to mitigate localized failures.2. **AWS Regions:** For critical workloads, distribute resources across at least two Regions to guard against regional failures.3. **Replication:** Use AWS services that support multi-AZ and multi-Region replication for data and compute resources.4. **Load Balancing:** Implement load balancers to direct traffic across healthy AZs or Regions.5. **Failover Mechanisms:** Configure DNS and health checks to automatically reroute traffic in case of failures.6. **Disaster Recovery:** Consider multi-Region strategies for disaster recovery, including pilot light or warm standby configurations.**Risk:** High risk of downtime and data loss if best practices are not followed.**Related Practices:**- REL02-BP03: Ensure IP subnet allocation for expansion and availability.- REL13-BP01: Define recovery objectives for downtime and data loss.**Resources:**- AWS Global Infrastructure- AWS Route 53 DNS Failover- AWS Global Accelerator- AWS KMS Multi-Region Keys**Documentation:**- AWS Fault Isolation Boundaries- Resilience in Amazon EC2 Auto Scaling- Amazon RDS Resilience**Videos:**- AWS re:Invent 2018: Multi-Region Active-Active Applications- AWS re:Invent 2019: AWS Global Network Infrastructure"
REL10-BP02,Automate recovery for components constrained to a single location,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_fault_isolation_single_az_system.html,Reliability,Use fault isolation to protect    your workload,Medium,"Compliance Control (Max 500 chars):Implement automated rebuild for workloads confined to a single zone or on-premises. If multi-location deployment isn't feasible, ensure automatic infrastructure, app, and data recreation. For Amazon EMR, utilize EMRFS for S3 storage replication. For Amazon Redshift, consider node redundancy. For on-premises, use AWS Elastic Disaster Recovery. Steps include self-healing via scaling, EC2 Auto Scaling, recovery, and lifecycle event automation. Related: Amazon ECS, EC2 Auto Scaling lifecycle hooks, AWS Elastic Disaster Recovery."
REL10-BP03,Use bulkhead architectures to limit scope of impact,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_fault_isolation_use_bulkhead.html,Reliability,Use fault isolation to protect    your workload,High,"Implement bulkhead architecture to contain failures within isolated cells. Use partition keys for workload subdivision, avoiding cross-cell interactions. Keep router layer simple and scale cells independently. Avoid simultaneous code updates across cells and leverage multi-AZ/multi-region strategies for resilience. Test load and deploy code in stages to minimize failures. High risk if not established."
REL11-BP01,Monitor all components of the workload to detect failures,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_withstand_component_failures_monitoring_health.html,Reliability,Design your workload to withstand component failures,High,"**Compliance Control for Workload Monitoring:**Ensure continuous monitoring of workload health to detect failures swiftly. Configure alarms for both technical failures and key performance indicators (KPIs) aligned with business value. Monitor all application layers (app, platform, infra, network) and consider gray failures. Set appropriate monitoring intervals based on recovery time objectives (RTO). Implement detailed and enhanced monitoring for critical components. Create custom metrics for KPIs and user experience. Use user canaries and synthetic transactions for proactive testing. Set alarms and dashboards for visualization. Utilize distributed tracing and cross-region monitoring. Integrate Amazon Health Aware for proactive alerts. Related tools: CloudWatch, CloudWatch X-Ray. **Risk Level:** High if not established."
REL11-BP02,Fail over to healthy resources,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_withstand_component_failures_failover2good.html,Reliability,Design your workload to withstand component failures,High,"**Compliance Control for Failover and Recovery:**Ensure healthy resources continue serving requests during resource failures. For location impairments, implement failover to healthy resources in unimpaired locations. Distribute load across resources and Availability Zones to mitigate individual resource failures. Design services with fault recovery in mind, utilizing AWS services like Elastic Load Balancing and Auto Scaling. Monitor failover resource health and recovery progress. Establish RTO and RPO, isolate failure domains, and consider multi-region failover. Avoid common anti-patterns like insufficient monitoring and lack of failover testing. Benefits include resilient systems with quick recovery. High risk if not established.**Key Practices:**- Create failover designs for all applications.- Isolate architecture components with failover plans.- Automate where possible, document RTO/RPO.- Create and rehearse failover/failback playbooks.- Use AWS services for multi-AZ and multi-region failover.**Related Docs:**- Setting RTO and RPO Targets- Failover using Route 53- Disaster Recovery with Amazon ARC- EC2 with Auto Scaling- Multi-AZ Deployments for ECS and Lambda- Cross-Region Replication for EFS, S3, and others**Outcome:** Systems capable of recovering from degradation automatically or manually."
REL11-BP03,Automate healing on all layers,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_withstand_component_failures_auto_healing_system.html,Reliability,Design your workload to withstand component failures,High,"**Compliance Control for Automated Failure Remediation**Objective: Implement automated actions to remediate detected failures.**Process:**- Upon failure detection, trigger automated remediation using:  - Kubernetes auto-scaling for self-managed apps.  - Amazon EC2 Auto Scaling for compute instances.  - AWS Lambda and AWS Step Functions for custom workflows.  - Amazon EventBridge for event-driven remediation.- Ensure stateless services to prevent data loss on restart.- Apply similar recovery strategies for network timeouts and dependency failures.**Anti-patterns to avoid:**- Manual healing post-failure.- Lack of autoscaling.- No automated failover for databases.**Benefits:**- Reduces mean time to recovery.- Enhances availability.**Risk:**- High risk if not established.**Related AWS services:**- Amazon EKS, Kubernetes, Auto Scaling, EventBridge, Lambda, Step Functions, CloudWatch.**Documentation:**- AWS Auto Scaling, EC2 Automatic Recovery, RDS Failover.**Tools:**- CloudWatch, CloudWatch X-Ray.**Best Practices:**- REL11-BP01: Monitor all workload components.**Outcome:**Automated actions remediate failures effectively."
REL11-BP04,Rely on the data plane and not the control plane during recovery,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_withstand_component_failures_avoid_control_plane.html,Reliability,Design your workload to withstand component failures,Medium,"**Compliance Control (max 500 chars):**Implement minimal control plane operations for recovery, prioritizing data plane actions to enhance service resilience. Avoid heavy reliance on DNS changes or control-plane scaling. Utilize Amazon Application Recovery Controller and Route 53 data planes for failover. Design compute infrastructure for static stability. Use data plane actions for service restoration. For critical services, consider secondary region setups. Leverage AWS tools like Amazon CloudWatch and AWS X-Ray for monitoring. Focus on data plane actions to reduce recovery time and improve availability."
REL11-BP05,Use static stability to prevent bimodal behavior,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_withstand_component_failures_static_stability.html,Reliability,Design your workload to withstand component failures,Medium,"**Compliance Control for Static Stability:**Ensure workloads operate in a single mode by avoiding bimodal behavior. Avoid dynamically acquiring resources during failures and always provision adequate resources across zones or regions. Design for static stability by pre-provisioning instances in each Availability Zone or region to handle failures. This reduces reliance on launching new instances post-failure, which can introduce bimodal behavior. Focus on compute, databases, storage, and load balancers to maintain reliability. Related best practices include monitoring components for failures and relying on the data plane during recovery. For more details, refer to AWS Well-Architected Framework and related documents."
REL11-BP06,Send notifications when events impact availability,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_withstand_component_failures_notifications_sent_system.html,Reliability,Design your workload to withstand component failures,Medium,"**Compliance Control for Monitoring and Alerts:**Ensure immediate notifications to operations teams for breached thresholds, including error rates and latency, to promptly resolve issues. Implement monitoring for auto-healing events and external dependencies. Avoid sending excessive, non-actionable, or improperly sensitive alarms. Utilize composite alarms for complex monitoring. **Outcome:** Alerts for critical KPIs trigger immediate team action to minimize user impact.**Anti-patterns:** Excessive alarms, non-actionable alerts, improper threshold settings, neglecting external dependencies, ignoring gray failures, silent auto-healing.**Benefits:** Immediate reaction to degradations reduces MTTD and MTTR, ensuring awareness of infrequent issues.**Risk:** Medium; failure to monitor can miss problem patterns, leaving issues undetected until user contact.**Key Actions:** Establish KPI-monitoring alarms, use composite alarms for complex logic, integrate Amazon SNS/EventBridge for notifications, link alarms to remediation automation. **Tools:** CloudWatch, CloudWatch X-Ray, Amazon SNS, Amazon EventBridge, Amazon Health Aware.**Related Docs:** CloudWatch Alarms, EventBridge, SNS, Custom Metrics, Observability Updates."
REL11-BP07,Architect your product to meet availability targets and uptime service level agreements (SLAs),https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_withstand_component_failures_service_level_agreements.html,Reliability,Design your workload to withstand component failures,Medium,"**Compliance Control for Availability and SLAs**Ensure product architecture meets availability targets and SLAs. Design applications with defined availability and performance SLA metrics to meet business outcomes. Avoid anti-patterns like high SLAs without rationale, ignoring dependencies, and neglecting the Shared Responsibility Model. Benefits include meeting business objectives and customer expectations. Risks of non-compliance include unmet business and operational objectives. Key steps include reviewing workload design, defining SLA metrics, optimizing architecture, implementing operational changes, and monitoring SLAs. Related best practices include workload segmentation, multi-location deployment, monitoring, automated healing, chaos testing, and defining recovery objectives. Use AWS services like CloudWatch, Config, and Trusted Advisor for monitoring and compliance."
REL12-BP01,Use playbooks to investigate failures,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_testing_resiliency_playbook_resiliency.html,Reliability,Test reliability,High,"Compliance control for failure scenario management with playbooks (max 500 chars):Implement documented playbooks for consistent, prompt responses to unknown failure scenarios. Playbooks detail steps to identify failure factors and escalate issues. Proactive planning ensures effective reactive actions. If new scenarios arise, update playbooks. Avoid anti-patterns like unplanned log collection and short data retention. Benefits include consistent processes, error reduction, and faster response times. High risk if not established. Automate playbooks with AWS Systems Manager for consistency and error reduction."
REL12-BP02,Perform post-incident analysis,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_testing_resiliency_rca_resiliency.html,Reliability,Test reliability,High,"**Compliance Control Summary (Max 500 chars):**Implement a post-incident analysis (PIA) process to identify root causes, develop corrective actions, and prevent recurrence. Focus on a blame-free environment, document findings, and share insights broadly. Establish a correction of error (COE) process to institutionalize knowledge, automate recovery, and improve architecture patterns. Maintain a repository for lessons learned and refine procedures based on feedback. Aim for a culture of continuous improvement and learning, not blame."
REL12-BP03,Test scalability and performance requirements,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_testing_resiliency_test_non_functional.html,Reliability,Test reliability,High,"**Compliance Control for Performance Testing and Scaling:**Implement load testing to ensure workload meets performance and scaling requirements. Create production-scale test environments in the cloud that mirror production settings for accurate predictions. Validate base resources, scaling settings, quotas, and resiliency under load. Define clear performance requirements and use appropriate tools. Monitor and alert on performance metrics. Regularly update test strategies based on production data to maintain expected behavior under peak loads. Avoid anti-patterns like mismatched test environments and one-time load testing. High risk if not established.**Best Practices:**- Define service-level objectives (SLOs).- Design comprehensive load tests.- Integrate tests into CI/CD pipelines.- Use infrastructure as code for test environments.- Continuously refine test strategies and optimizations.**Related Best Practices:**- Monitor and manage quotas (REL01-BP04)- Monitor all workload components (REL06-BP01)- Send notifications for real-time processing (REL06-BP03)**Tools:**- Amazon CodeGuru Profiler- Amazon CloudWatch RUM- Apache JMeter- K6- Vegeta- hey- wrk"
REL12-BP04,Test resiliency using chaos engineering,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_testing_resiliency_failure_injection_resiliency.html,Reliability,Test reliability,Medium,"**Compliance Control for Chaos Experiments**Run regular chaos experiments in production-like environments to verify workload resilience. Use fault injection to simulate failures and unexpected load. Avoid anti-patterns like not testing under real-world conditions and not treating experiments as code. Establish guardrails, rollback mechanisms, and monitor impact. Use tools like AWS FIS. Prioritize faults based on frequency and impact. Regularly verify hypotheses and improve workload design. Capture and analyze experiment results. Automate experiments in CI/CD pipelines. Level of risk: Medium."
REL12-BP05,Conduct game days regularly,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_testing_resiliency_game_days_resiliency.html,Reliability,Test reliability,Medium,"**Compliance Control for Resilience Game Days**Conduct regular game days to simulate production events, involving all relevant teams and stakeholders. Exercises should be scheduled consistently to build ingrained response habits. Ensure all participants are informed and that lessons learned are incorporated into recovery processes. Avoid common anti-patterns like excluding decision makers and focusing only on technical failures. Benefits include enhanced response skills, identified dependencies, and a culture of resilience. Failure to establish this practice exposes medium risk. Use AWS services like Fault Injection Service, CloudWatch, and Systems Manager for simulations. Document findings to continuously improve resilience strategies.**Related Best Practices:**- REL12-BP01: Use playbooks to investigate failures- REL12-BP04: Test resiliency using chaos engineering- OPS04-BP01: Identify key performance indicators- OPS07-BP03: Use runbooks to perform procedures- OPS10-BP01: Use a process for event, incident, and problem management**Related Documents & Videos:**- AWS GameDay- AWS Well-Architected Concepts - Game Day- AWS re:Invent 2023 - Practice like you play- AWS Workshop - Navigate the storm: Unleashing controlled chaos for resilient systems"
REL13-BP01,Define recovery objectives for downtime and data loss,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_planning_for_recovery_objective_defined_recovery.html,Reliability,Plan for Disaster Recovery (DR),High,"**Compliance Control for Disaster Recovery Planning****Objective:** Ensure each workload has designated Recovery Time Objective (RTO) and Recovery Point Objective (RPO) based on technical and business impact.**Common Anti-Patterns:**- No designated recovery objectives.- Arbitrary or lenient recovery objectives.- Unrealistic recovery goals (e.g., zero downtime).- Ignoring business impact and regulatory requirements.**Benefits:** Establishes clear recovery goals tailored to business needs.**Risk Level:** High if best practice not established.**Matrix/Worksheet Guidance:**- Categorize workloads by impact (critical, high, medium, low).- Assign RTOs and RPOs.- Analyze downtime and data loss impact.**Questions to Consider:**- Maximum downtime before unacceptable impact?- Financial, reputational, operational, regulatory impacts?- Maximum data loss before unacceptable impact?- Data recoverability?- Downstream and upstream workload dependencies?- Different objectives based on incident type or time?- Alignment with disaster recovery strategy?- Legal/contractual obligations?- Regulatory compliance?**Worksheet Template:**- Identify stakeholders and teams.- Define impact categories and assign RTOs/RPOs.- Validate objectives with business and technical teams.**Related Best Practices:**- REL09-BP04: Verify backup integrity.- REL12-BP01: Use playbooks for failure investigation.- REL13-BP02: Define recovery strategies.- REL13-BP03: Test disaster recovery implementation.**Resources:**- AWS Architecture Blog: Disaster Recovery Series- AWS Whitepaper: Disaster Recovery of Workloads- AWS Resilience Hub- APN Partners- AWS Marketplace products**Videos:**- AWS re:Invent 2018: Multi-Region Active-Active Applications- Disaster Recovery of Workloads on AWS"
REL13-BP02,Use defined recovery strategies to meet the recovery objectives,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_planning_for_recovery_disaster_recovery.html,Reliability,Plan for Disaster Recovery (DR),High,"To meet your workload's recovery objectives, define and implement a disaster recovery (DR) strategy like backup and restore, standby (active/passive), or active/active. Avoid anti-patterns such as inconsistent recovery procedures and ad-hoc implementations. Establish a plan with clear failover and failback procedures, ensuring high RTO/RPO alignment, cost-efficiency, and minimal control plane dependency. Regularly review and test your DR strategy to ensure high recovery readiness."
REL13-BP03,Test disaster recovery implementation to validate the implementation,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_planning_for_recovery_dr_tested.html,Reliability,Plan for Disaster Recovery (DR),High,"Compliance Control (max 500 chars): Regularly test failover to recovery site to ensure proper operation and meet RTO/RPO. Avoid untested recovery paths; exercise failovers in production to confirm functionality. Establish recovery patterns, engineer workloads for recovery, and use tools like AWS Elastic Disaster Recovery for drills. Document issues and solutions to improve disaster recovery readiness."
REL13-BP04,Manage configuration drift at the DR site or Region,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_planning_for_recovery_config_drift.html,Reliability,Plan for Disaster Recovery (DR),High,"To ensure successful disaster recovery (DR), maintain consistent infrastructure, data, and configurations between your primary and DR environments. Avoid outdated recovery locations, service differences, manual updates, and undetected configuration drift. Benefits include improved recovery likelihood and reduced risk. To comply, use infrastructure as code, CI/CD pipelines, staggered deployments, and continuous monitoring with tools like AWS Config and AWS CloudFormation. Regularly audit configurations and automate remediation. Related best practices include managing service quotas and testing DR implementations. For more, see AWS Config Rules, AWS Systems Manager Automation, and AWS CloudFormation documentation."
REL13-BP05,Automate recovery,https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_planning_for_recovery_auto_recovery.html,Reliability,Plan for Disaster Recovery (DR),Medium,"**Compliance Control for Automated Recovery**Implement automated, tested recovery mechanisms that are reliable, observable, and reproducible to minimize failure risk. Avoid manual interventions, failed components, high-risk situations, and lack of abort mechanisms. Benefits include increased reliability, stringent recovery objectives, reduced manual error risks, and lower failure likelihood. Medium risk exists if not established. Use AWS services and IaC for a consistent, version-controlled recovery environment. Regularly test and refine procedures. For AWS workloads, consider AWS Elastic Disaster Recovery for automated failover. Maintain clear roles, fallback plans, and conditions for initiating recovery. Related best practices include resource automation, component monitoring, defined recovery strategies, disaster recovery testing, and managing configuration drift."
PERF01-BP01,Learn about and understand available cloud services and features,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_architecture_understand_cloud_services_and_features.html,Performance Efficiency,Architecture selection,High,"**Compliance Control for AWS Workload Architecture**Stay current with AWS services and configurations to enhance architectural decisions, improve performance, and reduce costs. Avoid anti-patterns like treating the cloud as a data center, failing to modernize applications, and using only one storage type. Benefits include improved performance, reduced costs, and accelerated time-to-value. Risks of non-compliance include missed opportunities for innovation and growth. Utilize AWS resources like blogs, skill builder, and training for continuous learning. Use Amazon Q and sandbox environments for experimentation. Related docs: AWS Training, AWS Architecture Center, AWS Partner Network."
PERF01-BP02,Use guidance from your cloud provider or an appropriate partner to learn about architecture patterns and best practices,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_architecture_guidance_architecture_patterns_best_practices.html,Performance Efficiency,Architecture selection,Medium,"To ensure compliance with best practices when using AWS, leverage cloud resources like documentation, solutions architects, and professional services. Avoid anti-patterns such as misusing AWS services and ignoring business context. Benefits include informed architectural choices and reduced risk. AWS offers extensive guidance, tutorials, and expert support to help optimize performance. Medium risk exists if best practices aren't established. Use AWS documentation, training, and partner events for optimal outcomes."
PERF01-BP03,Factor cost into architectural decisions,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_architecture_factor_cost_into_architectural_decisions.html,Performance Efficiency,Architecture selection,Medium,"**Compliance Control for Cloud Cost Optimization**Incorporate cost factors into architectural decisions to enhance resource utilization and performance efficiency. Avoid anti-patterns like using only one instance family, neglecting licensed vs. open-source solutions, and not defining storage lifecycle policies. Establish cost objectives, identify key cost drivers, understand pricing models, and use AWS tools like Budgets, Compute Optimizer, and Cost Anomaly Detection for monitoring and optimization. Benefits include efficient resource use and investment exploration. Risk level: Medium. Related resources: AWS Billing, Cost Optimization, Architecture Center, and Knowledge Center. Videos: AWS re:Invent 2023 on cost optimization. Examples: Compute Optimizer Demo, Cost Optimization Workshop."
PERF01-BP04,Evaluate how trade-offs impact customers and architecture efficiency,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_architecture_evaluate_trade_offs.html,Performance Efficiency,Architecture selection,High,"**Compliance Control for Performance Improvements**When assessing performance enhancements, evaluate their impact on customers and workload efficiency. For instance, while a key-value store may boost performance, consider its eventually consistent nature. Avoid assuming all gains are implementable without trade-offs and only acting when performance issues are critical. Establish evaluation factors like cost, reliability, security, and performance. Conduct POCs to understand trade-offs, especially in highly available, performant, and secure workloads. Related resources include Amazon Builders' Library, Amazon QuickSight KPIs, and Amazon CloudWatch RUM."
PERF01-BP05,Use policies and reference architectures,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_architecture_use_policies_and_reference_architectures.html,Performance Efficiency,Architecture selection,Medium,"**Compliance Control for Cloud Workload Design:**Adhere to internal policies and reference architectures for efficient service selection and configuration. Avoid diverse technologies to minimize management overhead. Benefits include streamlined decision-making and improved performance efficiency. Establish these best practices to mitigate medium risk. Validate policies in sandboxes and stay updated with AWS updates. Use AWS Architecture Center, Partner Network, Solutions Library, and Knowledge Center for guidance.**Related Docs/Videos/Examples:** AWS Architecture Center, AWS Partner Network, AWS Solutions Library, AWS Knowledge Center, AWS Architecture Blog,  This is my Architecture,  AWS re:Invent 2022, AWS Samples, AWS SDK Examples."
PERF01-BP06,Use benchmarking to drive architectural decisions,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_architecture_use_benchmarking.html,Performance Efficiency,Architecture selection,Medium,"**Compliance Control for Cloud Workload Benchmarking**Benchmark your workload's performance on the cloud to guide architectural decisions. Avoid relying solely on generic benchmarks or customer feedback. Establish a structured process: define objectives, baseline, scenarios, metrics, and KPIs; configure resources; run synthetic tests; analyze results; document findings; and adjust architecture accordingly. Use AWS tools like CloudWatch Synthetics for faster, early feedback. Repeat to identify further improvements. Related resources: AWS Architecture Center, AWS Partner Network, AWS Solutions Library, AWS Knowledge Center, Amazon CloudWatch RUM, Amazon CloudWatch Synthetics."
PERF01-BP07,Use a data-driven approach for architectural choices,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_architecture_use_data_driven_approach.html,Performance Efficiency,Architecture selection,Medium,"**Compliance Control for Cloud Architectural Choices (max 500 chars):**Implement a data-driven approach to verify cloud services align with business needs. Avoid static architectures, assumptions, and un-justified changes. Use internal/external resources, prioritize tech backlogs, engage stakeholders, explore architectural patterns, and continually monitor performance. Document decisions and update based on metrics and new technologies. Reference AWS Solutions Library, Knowledge Center, and related videos for guidance."
PERF02-BP01,Select the best compute options for your workload,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_compute_hardware_select_best_compute_options.html,Performance Efficiency,Compute and hardware,High,"To optimize cloud workloads, choose the best compute option for performance and cost. Avoid using on-premises compute methods, lack of awareness of cloud options, and over-provisioning. Benefits include resource efficiency; high risk if ignored. Steps: understand workload needs, explore AWS compute services, evaluate costs, experiment in non-prod, plan migration, and use AWS tools for optimization. Related docs: AWS Compute, EC2, EKS, ECS, Lambda. Videos and examples on re:Invent and migration to containers/serverless."
PERF02-BP02,Understand the available compute configuration and features,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_compute_hardware_understand_compute_configuration_features.html,Performance Efficiency,Compute and hardware,Medium,"**Compute Service Compliance Control (500 chars max)**Ensure compute resource provisioning aligns with workload needs by evaluating AWS instance families and features. Avoid over-provisioning; use AWS Compute Optimizer for recommendations. Familiarize with compute options like compute-optimized, memory-optimized, and storage-optimized instances. Use AWS Lambda Power Tuning for optimal Lambda configurations. Risks of non-compliance: Medium. Review AWS documentation for best practices."
PERF02-BP03,Collect compute-related metrics,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_compute_hardware_collect_compute_related_metrics.html,Performance Efficiency,Compute and hardware,High,Compliance Control for Compute Metrics Monitoring (Max 500 chars):Ensure compute resource performance and utilization by collecting all relevant metrics via AWS services like Amazon CloudWatch. Avoid manual log searches and default metrics only. Proactively review metrics to align application performance with business needs. Establish data retention and alarms for proactive issue response. Use AWS native observability tools and automate metric collection to maintain high performance and security. High risk exists without this practice.
PERF02-BP04,Configure and right-size compute resources,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_compute_hardware_configure_and_right_size_compute_resources.html,Performance Efficiency,Compute and hardware,Medium,"**Compliance Control for Compute Resource Management**Ensure compute resources match workload performance requirements to avoid under- or over-provisioning. Avoid common anti-patterns like ignoring performance requirements, using only one instance family, or not leveraging AWS Cost Explorer/Compute Optimizer. Benefits include optimal performance, cost savings, and enhanced customer experience. Establish best practices to mitigate medium risk from inefficient resource use. Use AWS tools like Compute Optimizer and Trusted Advisor for recommendations. Monitor usage with Amazon CloudWatch and continually evaluate new instance types. Test changes in non-production environments. For guidance, refer to AWS documentation on EC2, ECS, EKS, and Lambda functions."
PERF02-BP05,Scale your compute resources dynamically,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_compute_hardware_scale_compute_resources_dynamically.html,Performance Efficiency,Compute and hardware,High,"**Cloud Elasticity Compliance Control (500 chars max)**Utilize cloud elasticity to dynamically scale compute resources, avoiding over- or under-provisioning. Avoid manual scaling, static sizing, and leaving excess capacity. Benefits include cost savings, performance, and reliability. Risks of non-compliance are high. Use target-tracking, predictive, schedule-based, and service scaling. Ensure deployments handle both scale-up and scale-down. Use valid utilization metrics, dynamic scaling, and target tracking policies. Related AWS docs and videos available."
PERF02-BP06,Use optimized hardware-based compute accelerators,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_compute_hardware_compute_accelerators.html,Performance Efficiency,Compute and hardware,Medium,"**Compliance Control for Hardware Accelerators**Ensure optimal performance and cost-efficiency by benchmarking general-purpose vs. purpose-built instances. Avoid using hardware accelerators for tasks better handled by CPUs. Monitor GPU usage to ensure efficient utilization. Benefits include higher performance and lower costs. If not established, medium risk arises from inefficient resource usage. Optimize GPU settings, network operations, and automate decommissioning unused instances. Related docs: AWS Trainium, Inferentia instances, GPU instances, and SageMaker AI."
PERF03-BP01,Use a purpose-built data store that best supports your data access and storage requirements,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_data_use_purpose_built_data_store.html,Performance Efficiency,Data management,High,"To ensure compliance, understand data characteristics (size, access patterns, latency, etc.) to choose the right AWS data store for your workload. Avoid sticking to one data store due to internal experience; implement a data catalog. Benefits include efficient storage tech selection. Risks include poor performance due to unsuitable storage. Consider data type, volume, durability, ACID properties, access patterns, latency, throughput, and retention. AWS offers various storage solutions like Amazon S3, DynamoDB, RDS, and Aurora, each with unique features. Choose based on your data needs."
PERF03-BP02,Evaluate available configuration options for data store,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_data_evaluate_configuration_options_data_store.html,Performance Efficiency,Data management,Medium,"**Compliance Control for Data Store Optimization**Ensure optimal performance and cost-efficiency for data stores by:1. **Evaluate Configuration Options**: Assess various features and settings for your data stores, including storage types, memory, compute, and caching options.2. **Avoid Anti-Patterns**: Do not use a single storage type for all workloads, provision IOPS without testing, or ignore configuration options.3. **Optimize Configuration**: Experiment with configurations like read replicas, scaling policies, and connection pooling.4. **Monitor and Benchmark**: Use AWS tools like CloudWatch and Storage Lens to monitor performance and conduct benchmarks in non-production environments.5. **Lifecycle Management**: Implement S3 Lifecycle policies and EFS lifecycle management for cost-effective storage.6. **Risk Mitigation**: Failing to optimize configurations may lead to medium risk in performance and cost inefficiencies.For more details, refer to AWS documentation and best practices."
PERF03-BP03,Collect and record data store performance metrics,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_data_collect_record_data_store_performance_metrics.html,Performance Efficiency,Data management,High,"**Compliance Control for Data Store Performance Monitoring**To ensure optimal performance and reliability of your data store, track and record comprehensive performance metrics, including both system-level and database metrics. Avoid anti-patterns like manual log searches or limited monitoring scopes. Establish a performance baseline to quickly identify and debug anomalies. Use tools like Amazon CloudWatch for metric collection and set alarms for threshold breaches. Regularly review metrics and consider machine learning solutions for anomaly detection. Configure data retention to align with security and operational goals. **Max Characters: 500**"
PERF03-BP04,Implement strategies to improve query performance in data store,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_data_implement_strategies_to_improve_query_performance.html,Performance Efficiency,Data management,Medium,"**Compliance Control for Data Optimization and Query Performance****Objective:** Implement strategies to enhance data scalability and query efficiency.**Anti-patterns:**- No data partitioning.- Single file format storage.- Lack of data indexing.**Benefits:** Improved efficiency, lower costs, and better user experience.**Risk Level:** Medium**Key Strategies:**- Partition data.- Use multiple file formats.- Implement indexes and materialized views.- Optimize queries using EXPLAIN/ANALYZE.- Choose appropriate join operations.- Regularly maintain data store.**Related Resources:** Amazon Aurora, Redshift performance, Athena tips, AWS Database Caching, ElastiCache best practices, and relevant videos/workshops."
PERF03-BP05,Implement data access patterns that utilize caching,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_data_access_patterns_caching.html,Performance Efficiency,Data management,Medium,"**Compliance Control for Data Caching Best Practices (500 chars max)**Implement caching for frequently accessed data to enhance read performance. Avoid caching frequently changing data, relying on stale cache, or neglecting data consistency. Monitor caching efficiency and hit rates (goal: 80%+). Use client-side caching for low latency and remote caching for consistency. Configure cache invalidation (TTL) and replication for data availability. Follow AWS best practices for Redis and ElastiCache, and monitor with CloudWatch. For more, see the Amazon ElastiCache Well-Architected Lens and related AWS videos and documents."
PERF04-BP01,Understand how networking impacts performance,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_networking_understand_how_networking_impacts_performance.html,Performance Efficiency,Networking and content delivery,Â High,"**Compliance Control for Network-Related Decisions****Anti-patterns:**- Traffic routed through central firewalls instead of cloud-native tools.- Misunderstanding AWS Direct Connect usage.- Ignoring workload characteristics and encryption overhead.- Using on-premises networking in the cloud.**Benefits:**- Identifies bottlenecks, improves user experience, increases reliability, and reduces maintenance.**Risk:**- High risk if best practices aren't established.**Control Measures:**- Document networking requirements, including latency, protocols, and traffic patterns.- Review and choose suitable AWS networking services like VPCs, Direct Connect, ELB, Route 53.- Benchmark network performance and conduct load tests.- Utilize AWS networking metrics and tools for monitoring and optimization."
PERF04-BP02,Evaluate available networking features,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_networking_evaluate_networking_features.html,Performance Efficiency,Networking and content delivery,Â High,"**Cloud Networking Compliance Control (500 chars max)**Evaluate and optimize cloud networking features to enhance performance and security. Avoid anti-patterns like regional bias and subnet segmentation. Use AWS services like Global Accelerator, CloudFront, and Route 53. Measure impact via testing, metrics (latency, bandwidth), and analysis. Document performance benchmarks and leverage tools like AWS Config and CloudWatch for monitoring. High risk if not established due to potential performance and security issues."
PERF04-BP03,Choose appropriate dedicated connectivity or VPN for your workload,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_networking_choose_appropriate_dedicated_connectivity_or_vpn.html,Performance Efficiency,Networking and content delivery,High,"**Hybrid Connectivity Compliance Control (500 chars max)**Ensure hybrid connectivity by estimating bandwidth/latency for workloads. Evaluate VPNs, backup options, and all requirements (encryption, protocol, bandwidth). Benefits include reliability, performance, and cost savings. Risks are high if unmet. Use AWS Direct Connect for high-bandwidth, low-latency; VPNs for temporary/cost-effective connections. Validate setup, monitor, and optimize. Follow AWS docs for guidance. Related: Networking Products, VPC Endpoints, Multi-VPC Infrastructure, Client VPN, and AWS re:Invent sessions."
PERF04-BP04,Use load balancing to distribute traffic across multiple resources,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_networking_load_balancing_distribute_traffic.html,Performance Efficiency,Networking and content delivery,High,"To comply with best practices, distribute traffic across multiple resources for cloud elasticity. Choose the right load balancer (Application, Network, or Elastic) based on your workload. Avoid exposing workloads directly to the internet. Use SSL/TLS offloading for performance. Monitor with access logs and alarms. For details, see ELB product comparison and AWS Global Infrastructure docs."
PERF04-BP05,Choose network protocols to improve performance,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_networking_choose_network_protocols_improve_performance.html,Performance Efficiency,Networking and content delivery,Medium,"**Compliance Control for Network Protocol Selection**Ensure optimal communication between systems by selecting appropriate network protocols based on workload performance needs. Use TCP for reliable, secure communications where data integrity is crucial, such as web applications and file transfers. For high-speed, low-latency needs, prefer UDP for logging, monitoring, and VoIP, though it lacks reliability. Use SRD for high-throughput HPC workloads. Avoid using TCP universally; consider AWS Global Accelerator and AWS Transfer Family for improved file transfer throughput. Monitor latency metrics to guide protocol choice and leverage services like Elastic Load Balancing for SSL/TLS offloading to enhance performance."
PERF04-BP06,Choose your workload's location based on network requirements,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_networking_choose_workload_location_network_requirements.html,Performance Efficiency,Networking and content delivery,Â Medium,"**Compliance Control for Reducing Network Latency**To optimize user experience, avoid placing all resources in one geographic location and choose regions not just by proximity but end-user location. Use AWS Regions, Local Zones, Outposts, and Wavelength for lower latency. Employ edge services like CloudFront and Global Accelerator for caching and optimal routing. Placement groups and ENA can further reduce latency. Monitor network access patterns with VPC Flow Logs and CloudWatch. Select regions based on data location, user location, and constraints like cost and compliance. Use Local Zones, Outposts, and Wavelength for specific needs. Cache frequently used assets locally. For compute-heavy operations, use Lambda@edge and CloudFront Functions. For ultra-low-latency applications, AWS Global Accelerator is ideal. **Risk Level:** Medium**Related Practices:** COST07-BP02, COST08-BP03, REL10-BP01, REL10-BP02, SUS01-BP01, SUS02-BP04, SUS04-BP07**Resources:** AWS Global Infrastructure, Local Zones, Outposts, Wavelength, CloudFront, Global Accelerator, Route 53**Videos:** Local Zones, Outposts, Wavelength, CloudFront, Global Accelerator**Examples:** Global Accelerator Custom Routing Workshop, Edge Functions"
PERF04-BP07,Optimize network configuration based on metrics,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_networking_optimize_network_configuration_based_on_metrics.html,Performance Efficiency,Networking and content delivery,Low,"**Compliance Control for Network Optimization:**Use data to optimize network configurations, avoiding common anti-patterns like assuming all performance issues are app-related or over-provisioning. Establish best practices by monitoring traffic with AWS tools like VPC Flow Logs and Network Access Analyzer to identify top talkers and optimize architecture. Benefits include better network performance; risks are low if not established. Related resources include DNS query logging, IPAM, Reachability Analyzer, and CloudWatch metrics. *Max 500 chars.*"
PERF05-BP01,Establish key performance indicators (KPIs) to measure workload health and performance,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_process_culture_establish_key_performance_indicators.html,Performance Efficiency,Process and culture,High,"**KPI Compliance Control (max 500 chars)**Ensure KPIs quantitatively and qualitatively measure workload performance aligned with business goals. Avoid anti-patterns like monitoring only system metrics, assuming KPIs are standard, or not defining measurable KPIs. Establish KPIs with thresholds, document risks, and use tools like Amazon CloudWatch for monitoring. Regularly revisit KPIs with stakeholders to align with evolving business strategies and goals. High risk of misalignment without this practice."
PERF05-BP02,Use monitoring solutions to understand the areas where performance is most critical,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_process_culture_use_monitoring_solutions.html,Performance Efficiency,Process and culture,High,"**Compliance Control for Performance Optimization****Objective:** Identify and enhance workload performance to boost efficiency and customer experience.**Key Actions:**- **Monitor Beyond Standard Metrics:** Don’t rely solely on CPU or memory; use comprehensive monitoring tools.- **Regular Performance Review:** Avoid reactive monitoring; proactively assess performance.- **End-to-End Tracing:** Implement tracing to identify latency and traffic patterns.- **Load Testing:** Use tools like AWS Distributed Load Testing for growth scenario analysis.- **Data Access Patterns:** Monitor for slow queries and data fragmentation.**Benefits:** Prioritize high-impact improvements, understand critical performance areas.**Risk:** High risk of performance bottlenecks without proactive measures.**Tools:** Utilize AWS CloudWatch Synthetics, X-Ray, and Distributed Load Testing for performance insights.**Related Resources:** AWS Observability updates, Builders’ Library, X-Ray Docs, CloudWatch RUM, DevOps Guru."
PERF05-BP03,Define a process to improve workload performance,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_process_culture_workload_performance.html,Performance Efficiency,Process and culture,Medium,"Compliance Control (max 500 chars):Establish a process to evaluate new AWS services, design patterns, and configurations by running existing performance tests on new offerings. Document key performance constraints and KPIs, use AWS observability tools for monitoring, conduct in-depth analysis, validate improvements in sandbox environments, implement changes in production, and regularly revisit the process for enhancements. This ensures informed architectural changes, mitigating medium risk from unevaluated updates."
PERF05-BP04,Load test your workload,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_process_culture_load_test.html,Performance Efficiency,Process and culture,Low,"**Load Test Compliance Control (max 500 chars):**Ensure full workload testing in production-like environments beyond expected loads. Avoid isolated tests, non-matching infra, and testing without EC2 policy compliance. Benefits include anticipating performance issues. Risks of non-compliance are low. Regularly conduct tests, analyze results, document findings, and iterate. Use AWS tools like CloudWatch and Synthetics. Related docs and videos available for guidance."
PERF05-BP05,Use automation to proactively remediate performance-related issues,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_process_culture_automation_remediate_issues.html,Performance Efficiency,Process and culture,Low,"**Compliance Control for Proactive Performance Remediation****KPIs:** Monitor key performance indicators (KPIs) to identify performance issues.**Monitoring & Alerts:** Implement monitoring and alerting systems for proactive issue detection.**Anti-patterns:** Avoid letting all alarms go to operations without remediation and restrict changes to only operations staff.**Benefits:** Enable support staff to focus on non-actionable alarms while operations handle critical alarms.**Risk Level:** Low if best practice not established.**Workflow:** 1. Identify issues for automated remediation.2. Define automation processes.3. Configure initiation events.4. Automate remediation using AWS tools.5. Test and implement in production.6. Develop and document remediation playbooks.7. Review and refine processes regularly.**Related Docs & Videos:** CloudWatch, X-Ray, AWS Partner Network, AWS re:Invent 2021-2023 sessions.**Examples:** CloudWatch Logs, Alarms Customization."
PERF05-BP06,Keep your workload and services up-to-date,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_process_culture_keep_workload_and_services_up_to_date.html,Performance Efficiency,Process and culture,Low,"**Compliance Control for Cloud Service Updates**Stay current with new cloud services to adopt efficient features, resolve issues, and enhance performance. Avoid static architecture assumptions and lack of update evaluation systems. Establish a process to evaluate new services, run performance tests, and use tools like AWS Systems Manager Inventory and CI/CD for automation. Document your evaluation process and prioritize updates based on business impact. Related resources: AWS Blog,  What's New,  EC2 Image Builder, and AWS Systems Manager Patch Manager."
PERF05-BP07,Review metrics at regular intervals,https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_process_culture_review_metrics.html,Performance Efficiency,Process and culture,Medium,"**Compliance Control for Metric Collection and Monitoring:**Routinely review collected metrics to determine their effectiveness in addressing issues and identify additional metrics that could enhance issue detection and resolution. Avoid leaving metrics in alarm states for extended periods and ensure alarms are actionable by automation. Establish baselines, review metrics regularly, conduct root cause analysis for deviations, and document findings to continuously improve metric collection and monitoring. Related AWS resources include CloudWatch, X-Ray, and AWS Partner documentation.**[Max 500 chars]**"
COST01-BP01,Establish ownership of cost optimization,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_cloud_financial_management_function.html,Cost Optimization,Practice Cloud Financial Management,High,"**Compliance Control for Cost Optimization Team**Establish a Cloud Business Office (CBO) or Cloud Center of Excellence (CCOE) team (finance, tech, business) for cost awareness. High risk if unestablished. Secure executive sponsorship. Define roles (software dev, infrastructure eng, ops) and goals (KPIs, education programs). Regular reviews of goals, metrics, and workload efficiency. For support, contact Cloud Financial Management (CFM) experts. Max 500 chars."
COST01-BP02,Establish a partnership between finance and technology,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_cloud_financial_management_partnership.html,Cost Optimization,Practice Cloud Financial Management,High,"Establish a finance-tech partnership for cloud cost management. Involve financial and tech teams in discussions at all cloud journey stages. Key topics: goals, cost, usage, budgeting, and procurement. High risk if not established. Benefits: real-time visibility, standard procedures, strategic advice, forecasting, and communication. Include business units, engineering, and third parties. Steps: define members, topics, and regular meetings. (500/500)"
COST01-BP03,Establish cloud budgets and forecasts,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_cloud_financial_management_budget_forecast.html,Cost Optimization,Practice Cloud Financial Management,High,"**Compliancy Control for Cloud Cost Management**Adapt budgeting and forecasting to cloud cost variability using dynamic, trend-based, or business driver-based algorithms. High risk if unestablished. Utilize AWS Cost Explorer for trend analysis and AWS Budgets for custom alerts. Regularly review forecasts and adjust processes. Foster IT-finance partnerships for consistency. Define common cost language and analyze forecasts on multiple dimensions. High risk if not implemented."
COST01-BP04,Implement cost awareness in your organizational processes,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_cloud_financial_management_cost_awareness.html,Cost Optimization,Practice Cloud Financial Management,High,"Compliance control for cost awareness and transparency in cloud usage:Integrate cost awareness into all new and existing processes. Leverage existing processes to minimize disruption. Report cloud costs to technology, business, and finance teams. Establish KPIs for efficiency. Use AWS tools like Cost Anomaly Detection and Budgets. Implement showbacks/chargebacks for cloud spend. Extend training to build a cost-aware culture. Failure to adopt these practices exposes high risk. (Max 500 chars)"
COST01-BP05,Report and notify on cost optimization,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_cloud_financial_management_usage_report.html,Cost Optimization,Practice Cloud Financial Management,Low,"**Compliance Control for Cost Management in AWS:**Set up cloud budgets using AWS Budgets, configure anomaly detection for unexpected usage, and receive alerts for cost and usage exceeding pre-defined targets. Regularly review cost-effectiveness of workloads and promote cost awareness. Use AWS Cost Explorer, Trusted Advisor, and Savings Plans recommendations for optimization. Report on cost optimization cycles and involve stakeholders. Risk level: Low.**Related Tools:** AWS Budgets, Cost Explorer, Trusted Advisor, Cost and Usage Report."
COST01-BP06,Monitor cost proactively,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_cloud_financial_management_proactive_process.html,Cost Optimization,Practice Cloud Financial Management,Medium,"Implement proactive cost monitoring using AWS tools like Cost Explorer, QuickSight, and Budgets. Set up regular reviews, dashboards, and alerts to identify trends and prevent overruns. Use Cost Anomaly Detection for ML-driven insights. Regularly report on cost efficiency, involving relevant teams. Risk level: Medium. Establish daily routines for cost analysis and optimization. Related: AWS Budgets, Cost Explorer, Cost Anomaly Detection."
COST01-BP07,Keep up-to-date with new service releases,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_cloud_financial_management_scheduled.html,Cost Optimization,Practice Cloud Financial Management,Medium,"**Compliance Control for Cost Efficiency on AWS**Consult AWS experts or partners regularly to identify cost-saving services. Review AWS blogs (e.g., What's New, AWS News) for new features and price reductions. Risk level: Medium. Subscribe to AWS blogs, attend local AWS events, and meet with your account team to leverage the latest cost-effective AWS services and features. Related docs: AWS Cost Management, What’s New with AWS, AWS News Blog."
COST01-BP08,Create a cost-aware culture,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_cloud_financial_management_culture.html,Cost Optimization,Practice Cloud Financial Management,Low,"**Compliance Control for Cost-Aware Culture:**Implement incremental changes to foster a cost-aware culture, starting small and scaling as capabilities grow. Focus on visibility, gamification, and recognition of cost efficiency. Train teams on cloud costs and AWS services. Regularly discuss planned changes and share success stories. Key risks are low but proactive cost optimization is crucial. Engage with AWS blogs and events for updates.**Related Docs:**- AWS Blog- AWS Cost Management- AWS News Blog**Examples:**- AWS Cloud Financial Management- AWS Well-Architected Labs: Cloud Financial Management"
COST01-BP09,Quantify business value from cost optimization,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_cloud_financial_management_quantify_value.html,Cost Optimization,Practice Cloud Financial Management,Medium,"**Compliance Control for Quantifying Business Value from Cost Optimization (Max 500 chars):**Establish a framework to quantify business value from cost optimization, ensuring tangible and intangible benefits are measured. This includes savings, efficiency improvements, and customer satisfaction. Without this, risk is medium; stakeholders lack ROI clarity and may miss broader value. Utilize tools like AWS Cost Explorer for forecasting and reporting to maximize benefits and ROI, ensuring informed investment decisions.**Related docs/resources:** AWS Cloud Economics, AWS Cost Management, Well-Architected Reliability Pillar whitepaper, AWS Cost Explorer. **Videos:** Unlock Business Value with Windows on AWS."
COST02-BP01,Develop policies based on your organization requirements,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_govern_usage_policies.html,Cost Optimization,Governance,High,"**Compliance Control for Cloud Resource Management:**Develop and periodically review policies defining resource management, covering cost aspects from creation to decommissioning. Ensure policies are simple, specific, and align with business needs. Use tools for compliance checks and adjust policies as priorities change. High risk of cost inefficiencies if not established.**Policy Example: Resource Optimization and Cost Reduction**- **Purpose:** Minimize cost for deploying and running workloads.- **Scope:** DevOps X Team for us-east customers.- **Policy Statement:** Use us-east regions, schedule EC2/RDS instances, stop/terminate unused instances, use auto-scaling, spot instances for non-critical workloads, commit to saving plans, use lifecycle policies, monitor utilization, set budgets.**Procedure:** Implement using third-party tools, AWS Config, and AWS Organizations. Regularly review and adjust policies.**Related Documents:** Change Management, AWS Managed Policies, Billing Strategy, Governance, IAM policies, Infrastructure Regions, Governance videos, VMware examples."
COST02-BP02,Implement goals and targets,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_govern_usage_goal_target.html,Cost Optimization,Governance,High,"**Compliance Control for Cost and Usage Goals:**Implement cost and usage goals/targets for workloads. Establish measurable, achievable KPIs like on-demand spend % or service adoption. Define targets (e.g., 20% usage increase, 5% cost increase). Use AWS Cost Explorer for metrics. Track KPIs in real-time with CID Dashboard. High risk if not established. **Related Docs/Examples:**- AWS Managed Policies- Multiple Account Billing- IAM Region Access- SMART Goals- Cost Optimization KPIs- Well-Architected Labs"
COST02-BP03,Implement an account structure,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_govern_usage_account_structure.html,Cost Optimization,Governance,High,"**AWS Account Structure Compliance Control (500 chars max)**Implement a structured AWS account system mapping to your org. This centralizes cost management and governance. Risk level is high if not established. Use AWS Organizations for multiple accounts, creating OUs and member accounts. Always have a management account with at least one member. Assess operational and cost models to reflect goals. Use consolidated billing for visibility and discounts. Follow best practices for separation and grouping to manage security, reliability, and financial constructs. Related docs: Cost Allocation Tags, AWS Policies, Billing Strategy, IAM, Control Tower, Organizations, Best Practices."
COST02-BP04,Implement groups and roles,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_govern_usage_groups_roles.html,Cost Optimization,Governance,Low,"**Compliance Control Summary (max 500 chars):**Implement groups and roles in line with organizational policies to control access to AWS and third-party resources. Establish development, test, and production groups. Ensure robust identity management via IAM policies to minimize unauthorized access risks. Adjust access at the role or group level when user roles change. Refer to AWS Well-Architected Framework Security Pillar for best practices on groups, roles, and policies. Related docs include AWS managed policies, billing strategy, and IAM. Videos and examples available for further guidance."
COST02-BP05,Implement cost controls,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_govern_usage_controls.html,Cost Optimization,Governance,Medium,"**Compliance Control Summary (max 500 chars)**Implement compliance controls based on organizational policies via AWS Budgets, Cost Anomaly Detection, and IAM/SCP to manage costs and usage. Establish notifications for cost deviations and anomalous spends, enforce governance through defined roles, and manage service quotas. Risk level: Medium. For detailed implementation, refer to AWS documentation on Budgets, Cost Anomaly Detection, IAM, and SCP."
COST02-BP06,Track project lifecycle,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_govern_usage_track_lifecycle.html,Cost Optimization,Governance,Low,"**Compliance Control for Project Lifecycle Tracking**Monitor and audit project, team, and environment lifecycles to avoid unnecessary resource usage. **Level of risk: Low**. Effective tracking aids in cost control, planning, and resource optimization. Regularly review workloads to identify decommissioning opportunities. Use AWS Config, Systems Manager, and tagging for detailed inventory and resource management. Establish a project lifecycle monitoring process for transparency and continuous improvement. Conduct regular workload reviews focusing on risk, value, cost, and usage. **Tools:** AWS Config, Systems Manager, Budgets, Organizations, CloudFormation."
COST03-BP01,Configure detailed information sources,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_monitor_usage_detailed_source.html,Cost Optimization,Monitor cost and usage,High,"**Compliance Control for Cost Management and Reporting:**Set up cost management and reporting tools for detailed analysis and transparency. Configure workloads to generate log entries for cost and usage tracking. Establish AWS Data Exports for the AWS Cost and Usage Report (CUR) with hourly granularity and tagging. Use Amazon QuickSight for dashboard integration. Enable split cost allocation for container workloads. Ensure hourly logging for business outcomes to match cost data. **Risk Level:** High**Related Documents:** AWS Data Exports, AWS Glue, Amazon QuickSight, AWS Cost Management Pricing, Tagging AWS Resources, Analyzing Costs with Cost Explorer, Managing AWS Cost and Usage Reports, Well-Architected Operational Excellence Pillar."
COST03-BP02,Add organization information to cost and usage,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_monitor_usage_org_information.html,Cost Optimization,Monitor cost and usage,Medium,"**AWS Compliance Control: Tagging Strategy****Objective:** Implement consistent tagging across all AWS resources to enable cost management and monitoring.**Tagging Schema:**- **Organization Info:** Key-value pairs for cost centers, projects, owners, environments (Dev, Test, Prod).- **Workload Attributes:** Workload type, team ownership, resource purpose.- **Cost Allocation:** Unique identifiers for cost tracking.**Risk Level:** Medium - without proper tagging, cost management and compliance can suffer.**Implementation Steps:**1. **Define Schema:** Collaborate with stakeholders to create a tagging schema.2. **Tag Resources:** Apply tags using AWS CLI, Tag Editor, or Systems Manager.3. **AWS Cost Categories:** Define rules for categorizing costs.4. **Automate Tagging:** Use CloudFormation or custom Lambda functions for automatic tagging.5. **Monitor & Report:** Use AWS Cost Explorer and Tag Editor for ongoing tagging verification.**Related Docs & Videos:** Tagging Best Practices, AWS CloudFormation Resource Tag, AWS Cost Categories, etc."
COST03-BP03,Identify cost attribution categories,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_monitor_usage_define_attribution.html,Cost Optimization,Monitor cost and usage,High,"**Compliance Control Summary (Max 500 chars):**Establish organization categories (business units, departments, projects) to allocate cloud costs, enforce spend accountability, and drive cost-aware behaviors. High risk if not established. Use AWS Cost Categories to define and map costs, ensuring visibility in AWS Cost Explorer, Budgets, and Reports. Collaborate with finance and stakeholders to align with organizational structure and financial categories. Failure to implement can lead to ineffective cost management and savings."
COST03-BP04,Establish organization metrics,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_monitor_usage_define_kpi.html,Cost Optimization,Monitor cost and usage,High,"Compliance Control (max 500 chars):Establish key business metrics for workload performance, such as customer reports or web pages served. If best practices aren't followed, high risk ensues. Define primary outcomes with stakeholders, focusing on business metrics over technical ones, ideally under five per workload. For complex workloads, define component metrics reflecting value and cost, starting with the largest components. Related: AWS resource tagging, cost analysis with Budgets, Cost Explorer, and Cost and Usage Reports."
COST03-BP05,Configure billing and cost management tools,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_monitor_usage_config_tools.html,Cost Optimization,Monitor cost and usage,High,"**Compliance Control for Cloud Cost Management**Configure tools to manage and optimize cloud spending, ensuring alignment with organizational policies. Key actions include:- **Organize**: Tag resources and create accounts with AWS Control Tower.- **Access**: Use consolidated billing and IAM for access control.- **Control**: Implement SCPs, tag policies, and budget alerts.- **Notifications**: Set up AWS Budgets for alerts on cost anomalies.- **Reports**: Generate detailed cost reports and forecasts.- **Tracking**: Monitor current costs against goals.- **Analysis**: Enable custom cost analysis with AWS Cost Explorer.- **Inspect**: Utilize AWS Trusted Advisor for optimization insights.**Risk**: High if not established; lack of visibility can lead to unawareness and inefficiencies.**Current State**: Dashboards for cost visibility, notifications, and reports.**Skill Gaps**: Consider AWS ProServ or Partners if needed.**Team Access**: Use IAM for managing access to cost tools.**Tags & Categories**: Organize costs using tags and categories.**Budgets & Anomaly Detection**: Configure AWS Budgets and Cost Anomaly Detection.**Cost Analysis**: Use AWS Cost Explorer and Optimization Hub.**Advanced Tools**: Leverage Amazon QuickSight and Athena for detailed insights.**Related Docs & Videos**: Explore AWS Billing, Cost Management, and tagging best practices.**Risk Level**: High; establish best practices to avoid pain points."
COST03-BP06,Allocate costs based on workload metrics,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_monitor_usage_allocate_outcome.html,Cost Optimization,Monitor cost and usage,Low,"**Compliancy Control (max 500 chars):** Allocate workload costs via usage metrics or outcomes for efficiency. Use analytics services to analyze data and charge back. Establish this to avoid low risk of cost optimization failure. Monitor metrics hourly, track static vs. variable costs, and use AWS tools like Cost Explorer for shared resource allocation. **Level of risk:** Low"
COST04-BP01,Track resources over their lifetime,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_decomissioning_resources_track.html,Cost Optimization,Decommission resources,High,"**Compliance Control for Resource Tracking and Decommissioning**Implement a tagging scheme to identify resource workloads and functions. Monitor resource usage via throughput or output monitoring to detect when workloads drop to zero. Decommission unused resources, such as those used for testing, using tags like  to-be-deleted.  Group AWS resources and utilize AWS Resource Groups for organization. Regularly review and optimize resource usage to mitigate high risk exposure from unused assets. For detailed strategies, refer to AWS Tagging Best Practices and Trusted Advisor Cost Optimization checks."
COST04-BP02,Implement a decommissioning process,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_decomissioning_resources_implement_process.html,Cost Optimization,Decommission resources,High,"**Compliance Control for Decommissioning Unused Resources****Risk Level:** High**Objective:** Implement a standardized process to identify and decommission unused resources across the organization.**Process Steps:**1. **Identify Resources:** Determine which resources are unused and schedule decommissioning.2. **Coordinate:** Confirm with workload owners.3. **Record Metadata & Backups:** Document details and create backups if needed.4. **Validate Deployment Tools:** Check if resources were deployed via infrastructure-as-code tools.5. **Prevent Access:** Apply restrictive controls temporarily.6. **Follow Internal Process:** Execute organization-specific decommissioning tasks.7. **Terminate Resources:** Stop or terminate instances, delete volumes, release IPs, etc.**Related Resources:** AWS Auto Scaling, AWS Trusted Advisor, AWS CloudTrail."
COST04-BP03,Decommission resources,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_decomissioning_resources_decommission.html,Cost Optimization,Decommission resources,Medium,"Compliance Control (max 500 chars):Implement periodic resource decommissioning for unused AWS resources triggered by audits, usage changes, or state shifts. Automate where feasible. Risk level: Medium. Frequency of searches should match cost potential; smaller accounts less often. Ensure final checks before disposal to avoid disruptions. Use AWS Auto Scaling and Trusted Advisor. Example: Well-Architected Labs' decommissioning resource guide."
COST04-BP04,Decommission resources automatically,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_decomissioning_resources_decomm_automated.html,Cost Optimization,Decommission resources,Low,"**Compliance Control for Resource Management**Design your workload to handle resource termination gracefully. Identify and decommission non-critical, unused, or low-utilization resources. Automation reduces decommissioning costs; use Amazon EC2 Auto Scaling or Application Auto Scaling. Implement custom code for automatic decommissioning. Prioritize serverless architectures for automatic scaling and cost savings. Related: Amazon EC2 Auto Scaling, Application Auto Scaling, AWS Trusted Advisor, Serverless on AWS. (277/500)"
COST04-BP05,Enforce data retention policies,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_decomissioning_resources_data_retention.html,Cost Optimization,Decommission resources,Medium,"**Data Retention Compliance Control (500 chars max)**Establish data retention policies to manage object deletion per organizational needs. Identify and delete unnecessary resources/objects. Risk level: Medium. Use retention and lifecycle policies to reduce decommissioning and storage costs. Automate with Amazon Data Lifecycle Manager for EBS snapshots/AMIs, and Amazon S3 Intelligent-Tiering/lifecycle config for S3 objects. Implement custom lifecycle rules via API/SDK. **Implementation Steps**- Use Amazon Data Lifecycle Manager for EBS snapshots/AMIs.- Set up Amazon S3 lifecycle configuration for object deletion."
COST05-BP01,Identify organization requirements for cost,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_select_service_requirements.html,Cost Optimization,Evaluate cost when selecting services,High,"**Compliance Control Summary (max 500 chars):** Collaborate with team members to balance cost optimization with performance and reliability for workload. High risk if not established; understand org priorities, categorize resources, and systematically evaluate tradeoffs. Prioritize Well-Architected pillars, address technical debt, and document for future optimization. Related: REL11-BP07, OPS01-BP06. Tools: AWS TCO Calculator, Amazon S3 storage classes."
COST05-BP02,Analyze all components of the workload,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_select_service_analyze_all.html,Cost Optimization,Evaluate cost when selecting services,High,"**Compliance Control for Workload Cost Analysis**Ensure all workload components are analyzed, considering current and projected costs. The review effort should align with potential benefits. High risk exists if not established. Identify all services, understand pricing models, and focus on unexpected costs. Use AWS tools like Cost Explorer, CloudWatch, and Budgets to diagnose high costs and set alerts. Prioritize components based on cost and criticality, then analyze options to align with organizational priorities. Max. 500 chars."
COST05-BP03,Perform a thorough analysis of each component,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_select_service_thorough_analysis.html,Cost Optimization,Evaluate cost when selecting services,High,"**Compliance Control for Cloud Cost Management:**Evaluate the total cost of ownership (TCO) for each component, factoring in operational and management costs, especially for AWS managed services. Prioritize high-cost components for deeper analysis. Assess the risk of not following best practices, which is high. Aim for time savings to focus on innovation; consider rapid migration to AWS managed services to reduce operational burdens and potentially lower costs. Use AWS tools to manage capacity and scale resources efficiently. Implement steps to analyze and compare managed vs. unmanaged resources, focusing on migration strategies and the AWS shared responsibility model. Utilize AWS TCO Calculator, storage classes, and shared responsibility documentation for guidance. *Characters: 490*"
COST05-BP04,Select software with cost-effective licensing,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_select_service_licensing.html,Cost Optimization,Evaluate cost when selecting services,Low,"**Compliance Control for Software Licensing on AWS (max 500 chars)**Adopt open-source software to minimize licensing costs, avoiding CPU-bound licenses. Favor output-based licensing. Regularly review licensing terms and vendor pricing trends. Use AWS tools like Cost Explorer and License Manager for optimization. Favor open source for cost-effective, scalable solutions, aligning software costs with benefits. Low risk if not established.**Related docs: AWS TCO Calculator, Open Source at AWS**"
COST05-BP05,Select components of this workload to optimize cost in line with organization priorities,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_select_service_select_for_cost.html,Cost Optimization,Evaluate cost when selecting services,Medium,"**Compliance Control for Cost Optimization**When selecting components for your workload, consider cost-effectiveness by leveraging application-level and managed services, serverless, containers, and event-driven architecture to minimize expenses. Use open-source software or license-free alternatives to reduce license costs. The risk of not establishing this best practice is medium. For more details, refer to the AWS TCO Calculator, Serverless whitepaper, and related documents on event-driven architecture and AWS services like Amazon RDS, Amazon SNS, and Amazon Lambda."
COST05-BP06,Perform cost analysis for different usage over time,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_select_service_analyze_over_time.html,Cost Optimization,Evaluate cost when selecting services,Medium,"Compliance control for workload cost-effectiveness (max 500 chars): Regularly analyze AWS service costs vs. usage to ensure cost-effective scaling. Implement new services promptly for significant workloads to maximize savings. Review scaling policies and adjust instance types/options. Use AWS tools like Cost Explorer, Budgets, and CloudWatch for forecasting and anomaly detection. Align usage pattern predictions with business needs, scaling resources accordingly. Refer to AWS TCO Calculator, S3 storage classes, EC2 Auto Scaling, and Snow Family for migration. Level of risk: Medium."
COST06-BP01,Perform cost modeling,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_type_size_number_resources_cost_modeling.html,Cost Optimization,"Select the correct resource type, size, and number ",High,"**Compliance Control for Cost Modeling and Benchmarking (500 chars)**To align with business needs and existing commitments, perform cost modeling for the workload and each component, benchmarking under various predicted loads to compare costs. This effort should reflect potential benefits; time spent correlates with component cost. High risk if best practices are not established. Use AWS Compute Optimizer, CloudWatch, and Trusted Advisor for accurate recommendations, ensuring CloudWatch Agents collect memory metrics. Select appropriate granularity for analysis to avoid under-provisioning. Consider existing commitments, pricing models, and core business focus when choosing AWS services."
COST06-BP02,"Select resource type, size, and number based on data",https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_type_size_number_resources_data.html,Cost Optimization,"Select the correct resource type, size, and number ",Medium,"To comply with resource selection best practices, choose Amazon EC2 instance types based on workload characteristics such as compute, memory, throughput, or write intensity. Use cost modeling, previous workload data, documentation, or AWS tools to make informed decisions. Ensure to gather system requirements like OS, CPU cores, GPU cores, RAM, storage, and network bandwidth. Select instance families (General Purpose, Compute Optimized, Memory Optimized, etc.) based on these details. Use AWS pricing calculators for cost management. For further guidance, refer to AWS Instance Types and EC2 Right Sizing for cost optimization."
COST06-BP03,"Select resource type, size, and number automatically based on metrics",https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_type_size_number_resources_metrics.html,Cost Optimization,"Select the correct resource type, size, and number ",Low,"To optimize cost with compliance controls, leverage active metrics from your running workload to automatically adjust resource sizing and type. Implement a feedback loop, using services like AWS Auto Scaling or custom code, to right-size compute, storage, and networking resources. Key metrics include CPU and memory usage for EC2 instances, and storage metrics for Amazon S3. Utilize AWS Compute Optimizer and S3 Storage Lens for recommendations. Risk level if not established: Low. For more, see AWS Auto Scaling, Compute Optimizer, and S3 Storage Lens documentation."
COST06-BP04,Consider using shared resources,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_type_size_number_resources_shared.html,Cost Optimization,"Select the correct resource type, size, and number ",Medium,**Compliance Control for Shared Resource Utilization****Objective:** To optimize cost and resource utilization by leveraging shared resources across multiple business units.**Control Measures:**1. **Resource Sharing:** Utilize AWS RAM to share resources across accounts to reduce duplication and TCO.2. **Cost Allocation:** Implement showback and chargeback mechanisms to attribute cloud costs to responsible business units.3. **Resource Tagging:** Tag shared resources for effective cost tracking and accountability.4. **Workload Categorization:** Use shared resources for non-critical workloads and reserve dedicated servers for critical ones.5. **Security Compliance:** Follow security best practices when sharing resources to maintain organizational integrity.**Risk Level:** Medium. Failure to establish these controls can lead to increased TCO and poor resource utilization.**Related Best Practices:** SEC03-BP08 Share resources securely within your organization.
COST07-BP01,Perform pricing model analysis,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_pricing_model_analysis.html,Cost Optimization,Select the best pricing model,High,"**AWS Workload Compliance Control (500 chars max)**Analyze workload elasticity to determine if components are for extended periods (commitment discounts) or dynamic (spot/on-demand). Use AWS Cost Explorer for insights. High risk if best practices not established. Consider Savings Plans for consistent usage, Spot Instances for flexible workloads, and Reserved Instances for long-term discounts. Review existing contracts and commitment discounts. Implement steps: analyze elasticity, review pricing contracts, and leverage Cost Explorer recommendations."
COST07-BP02,Choose Regions based on cost,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_pricing_model_region_cost.html,Cost Optimization,Select the best pricing model,Medium,"Compliance Control (max 500 chars): To optimize costs, deploy resources in regions with higher costs to meet latency and data residency needs. Analyze regional pricing and data transfer costs, using AWS Calculator. If no data privacy/security restrictions, use lower-cost regions for non-critical workloads. Migrate if savings outweigh costs. Review multi-region deployment and data transfer requirements. Related: AWS pricing docs, Reserved Instances, EC2 options, and Spot instances."
COST07-BP03,Select third-party agreements with cost-efficient terms,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_pricing_model_third_party.html,Cost Optimization,Select the best pricing model,Medium,"**Compliance Control for Cost-Efficient Agreements**Ensure cost-effective agreements by selecting terms that scale with benefits. Use tools and pricing models that align with desired outcomes, optimizing costs. Review third-party pricing structures, model usage scenarios, and assess if additional costs justify the benefits. Focus on cost governance, visibility, and optimization. **Risk Level: Medium**Neglecting this practice may lead to inefficient cost management and suboptimal resource utilization."
COST07-BP04,Implement pricing models for all components of this workload,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_pricing_model_implement_models.html,Cost Optimization,Select the best pricing model,Low,"**AWS Cost Efficiency Compliance Control (500 chars max):**To optimize costs, utilize reserved capacity (Savings Plans/Reserved Instances) for permanent resources and Spot Instances for short-term needs. On-Demand Instances for short, non-interruptible workloads. Regularly review AWS commitment recommendations, analyze workload components, and select appropriate pricing models (RIs, SPs, Spot). Implement a review cycle to adjust commitments as usage changes. Low risk if best practices are not followed. For guidance, refer to related documents and videos on Savings Plans, Reserved Instances, and Spot Instances."
COST07-BP05,Perform pricing model analysis at the management account level,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_pricing_model_master_analysis.html,Cost Optimization,Select the best pricing model,Low,"**Compliance Control for Billing and Cost Management****Objective:** To ensure optimal cost management and commitment-based discounts.**Action Required:** Regularly analyze billing and cost management tools at the management account level using AWS Cost Explorer to identify commitment discounts and reservations.**Risk Level:** Low if not established.**Procedure:**1. Perform regular cost modeling every 2-4 weeks.2. Review Savings Plans and Reserved Instance recommendations.3. Estimate monthly spend and savings.4. Apply discounts across member accounts for maximum savings.**Related Resources:**- AWS pricing, purchasing options, Savings Plan Overview- Well-Architected Labs: Pricing Models and Analysis**Max Characters:** 295"
COST08-BP01,Perform data transfer modeling,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_data_transfer_modeling.html,Cost Optimization,Plan for data transfer,High,"Compliance control for data transfer modeling in cloud solutions (max 500 chars): Establish data transfer modeling to identify cost-effective data movement across cloud services. Assess source, destination, volume, and frequency. Use AWS tools like Pricing Calculator, Cost Explorer, and PoCs to estimate costs. Align data transfer costs with business outcomes, considering data sensitivity and classification. Calculate costs at varying usage levels. Link costs to outcomes like decoupling or redundancy, and create a conceptual model for multiple use cases. "
COST08-BP02,Select components to optimize data transfer cost,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_data_transfer_optimized_components.html,Cost Optimization,Plan for data transfer,Medium,"Compliance control for data transfer cost reduction: All components are selected and architecture designed to minimize costs using WAN optimization and Multi-AZ configurations. Risk level: Medium. Architecting for data transfer involves using content delivery networks, dedicated network links, and VPC endpoints to avoid public internet use. Monitor with CloudWatch and AWS Cost Explorer. Avoid cross-region transfers and optimize with Direct Connect. Related: COST08-BP01, COST08-BP03."
COST08-BP03,Implement services to reduce data transfer costs,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_data_transfer_implement_services.html,Cost Optimization,Plan for data transfer,Medium,"**Compliance Control for Optimizing Network Data Transfer:**Implement AWS services to minimize data transfer, including using edge locations or CDNs like Amazon CloudFront for low-latency content delivery, establishing dedicated network connections via AWS Direct Connect, and employing caching layers. If these best practices aren't established, medium risk is exposed due to potential increased costs and latency. Utilize VPC Endpoints, NAT gateways, and AWS Snow Family devices for efficient data transfer and processing.**Risk Level: Medium**"
COST09-BP01,Perform an analysis on the workload demand,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_manage_demand_resources_cost_analysis.html,Cost Optimization,Manage demand and supply resources,High,"**Compliance Control for Workload Demand Analysis**Analyze workload demand over time, focusing on seasonal trends and operational conditions. Ensure analysis effort matches workload cost and benefit. Key aspects include resource utilization metrics, user and application scaling behavior, workload types, and SLA compliance. Use AWS tools like CloudWatch, Trusted Advisor, and Cost Explorer for monitoring and optimization. Effort should prioritize high-value workloads with significant demand changes. **Risk Level: High**"
COST09-BP02,Implement a buffer or throttle to manage demand,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_manage_demand_resources_buffer_throttle.html,Cost Optimization,Manage demand and supply resources,Medium,"**Compliance Control for Demand Management**To manage workload demand, implement throttling and buffering. Throttling limits request rates when clients can retry; buffering stores requests for later processing when retries aren't possible. Ensure buffers and throttles maintain required response times. Analyze demand, change rates, and response needs to size controls. Use AWS services like Amazon SQS for buffering and API Gateway for throttling. Risk level: Medium if not established.**Related Best Practices:** SUS02-BP06, REL05-BP02  **Related Docs:** AWS Auto Scaling, API Gateway, SQS, Kinesis  **Related Videos:** Messaging Service Selection, API Throttling, EKS SaaS Throttling  **Related Examples:** API Throttling Management, Multi-Tenant API Throttling, EKS SaaS Throttling"
COST09-BP03,Supply resources dynamically,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_manage_demand_resources_dynamic.html,Cost Optimization,Manage demand and supply resources,Low,"**Compliance Control Summary (max 500 chars):**Ensure AWS resources are provisioned via AWS Instance Scheduler or Auto Scaling to meet demand dynamically, minimizing over-provisioning/under-provisioning. Risk is low if not established. Utilize demand-based scaling for real-time adjustments and time-based scaling for predictable demand. Understand horizontal/vertical scaling and workload nature. Elastic Load Balancing aids in distributing traffic. Metrics like CPU utilization guide scaling. Related docs: AWS Auto Scaling, Instance Scheduler, SQS. Videos: Target Tracking, Predictive Scaling. Examples: Attribute-based selection, ECS cost optimization."
COST10-BP01,Develop a workload review process,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_evaluate_new_services_review_process.html,Cost Optimization,Define a review process and analyze your workload regularly,High,"**Compliance Control for Workload Review Process**Develop a process to define review criteria and frequency for workloads, ensuring reviews reflect potential benefits. Core workloads or those over 10% of the bill are reviewed quarterly/biannually; others annually. High risk if not established: cost inefficiencies, outdated components, missed optimizations. Implement steps: define review frequency and thoroughness based on factors like cost, complexity, change effort, and external market factors. Balance these to determine review periods for each workload component. Include dedicated time and resources for continuous improvements. Related docs: AWS News, Blog, Types of Cloud Computing, What's New with AWS. Examples: AWS Support Proactive Services, SAP workload reviews."
COST10-BP02,Review and analyze this workload regularly,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_evaluate_new_services_review_workload.html,Cost Optimization,Define a review process and analyze your workload regularly,Medium,"**Compliance Control for Workload Review:**Regularly review workloads to identify opportunities for adopting new AWS services, replacing existing services, or re-architecting workloads. Focus on AWS What's New for updates and AWS resources for implementation guidance. Assess risks if not established: Medium. Follow business, security, and performance requirements during reviews. Implement new services after baseline analysis. Related docs: AWS News, AWS Documentation; videos:  This is My Architecture,   Back to Basics,   All-In series,   How to Build This. **Character Count: 482**"
COST11-BP01,Perform automation for operations,https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/cost_evaluate_cost_effort_automations_operations.html,Cost Optimization,Automating operations,Low,"**Compliance Control for Cloud Operational Automation (500 chars max)**Focus on quantifying time/effort savings in cloud admin tasks, deployments, compliance, and risk mitigation via automation. Assess operational costs and implement automation for admin tasks to minimize manual effort. Low risk if not established; automation improves efficiency, frees up resources for higher value tasks, and ensures secure, cost-effective cloud management. Use AWS tools like Systems Manager, Config, and Lambda to automate operations, compliance, monitoring, and lifecycle management. For immediate adoption, consult AWS Managed Services, Professional Services, or Partners."
SUS01-BP01,Choose Region based on both business requirements and sustainability goals,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_region_a2.html,Sustainability,Region selection,Medium,"To optimize KPIs like performance, cost, and carbon footprint, choose AWS Regions based on business needs and sustainability goals. Avoid anti-patterns like selecting Regions based on your location or consolidating all resources in one place. Benefits include lower carbon footprints by placing workloads near renewable energy projects. Risks of non-compliance are medium. Shortlist Regions by confirming compliance, checking service availability, calculating costs, and testing latency. Select Regions with lower carbon intensity and renewable energy sources. For more details, see  How to select a Region for your workload based on sustainability goals.  Related resources include  Understanding your carbon emission estimations,   Amazon Around the Globe,   Renewable Energy Methodology,  and  What to Consider when Selecting a Region for your Workloads.  Videos on sustainability include AWS re:Invent 2023 and 2022 sessions."
SUS02-BP01,Scale workload infrastructure dynamically,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_user_a2.html,Sustainability,Alignment to demand,Medium,"**Compliance Control for Cloud Elasticity:**Leverage cloud elasticity to dynamically scale infrastructure to match demand, avoiding overprovisioned capacity. Avoid anti-patterns like manual scaling and leaving excess capacity. Benefits include efficient resource matching and lower environmental impact. Establish predictive, target-tracking, and schedule-based scaling strategies using AWS auto scaling mechanisms like EC2, Lambda, and Kubernetes. Ensure metrics align with workload type and test for scale-in events. Related docs and videos available for deeper insights."
SUS02-BP02,Align SLAs with sustainability goals,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_user_a3.html,Sustainability,Alignment to demand,Low,"Compliance Control for SLA Optimization:Review and optimize Service Level Agreements (SLAs) aligned with sustainability goals to minimize resource use while meeting business needs. Avoid unknown or ambiguous SLAs, limited SLA focus, and uniform design patterns. Benefits include optimal resource usage and sustainability. Regularly adjust SLAs to balance performance, sustainability, and complexity. Define sustainability SLAs, use efficient design patterns, and communicate accountability. Related resources include resiliency patterns, SaaS SLA importance, and AWS re:Invent sessions on sustainable architecture. (483 characters)"
SUS02-BP03,Stop the creation and maintenance of unused assets,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_user_a4.html,Sustainability,Alignment to demand,Low,"**Compliance Control for Decommissioning Unused Cloud Assets (max 500 chars):**Decommission unused assets to reduce cloud resource waste and improve workload efficiency. Regularly inventory, analyze, and remove redundant assets. Use lifecycle policies for automation. Evaluate impact before removal. Communicate with third parties to stop redundant asset production. Regularly review and optimize to ensure minimal resource consumption and cost efficiency."
SUS02-BP04,Optimize geographic placement of workloads based on their networking requirements,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_user_a5.html,Sustainability,Alignment to demand,Medium,"**Compliance Control for Cloud Location Selection:**Select cloud locations (Regions, Availability Zones, edge locations) to minimize network traffic distance and reduce resources. Avoid anti-patterns like user-based Region selection or data center consolidation. Benefits include lower latency, reduced data movement, and sustainability. Analyze network patterns using tools like Amazon CloudWatch. Choose Regions based on user locations, data proximity, and other constraints. Use caching (Amazon CloudFront, ElastiCache) and compute services (Lambda@Edge, CloudFront Functions) to run code closer to users. **Risk Level:** Medium if best practices are not followed.**Related Resources:** AWS Infrastructure Sustainability, Amazon ElastiCache, AWS Global Infrastructure videos."
SUS02-BP05,Optimize team member resources for activities performed,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_user_a6.html,Sustainability,Alignment to demand,Low,"Optimize team resource use to minimize environmental impact while meeting needs. Avoid ignoring device efficiency on cloud apps and manual resource management. Benefits: enhanced cloud app efficiency. Risk: low if best practice not established. Strategies: use scalable infrastructure for heavy tasks, energy-efficient workstations, virtualization, remote collaboration tools, efficient software, lifecycle management, and remote device management. AWS Systems Manager Fleet Manager aids remote node management. Related: Amazon WorkSpaces, Cost Optimizer, AppStream 2.0, NICE DCV. (381 chars)"
SUS02-BP06,Implement buffering or throttling to flatten the demand curve,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_user_a7.html,Sustainability,Alignment to demand,Low,"**Compliance Control for Demand Curve Management:****Summary:** Buffering and throttling flatten the demand curve, reducing required provisioned capacity and environmental impact. **Anti-patterns:** Immediate processing without analysis, ignoring client retry capabilities.**Benefits:** Lowers provisioned capacity, energy use, and environmental footprint.**Risk Level:** Low if best practices are ignored.**Implementation Steps:**1. Analyze client requests for asynchronous processing and retry capability.2. Use throttling for clients with retry; implement buffering for others.3. Utilize Amazon API Gateway for throttling, Amazon SQS for queues, and Amazon Kinesis for streams.4. Assess overall demand and response time to size throttle/buffer.**Related Resources:**- Amazon SQS documentation- API throttling management- Integration patterns for microservices**Videos:**- AWS re:Invent 2022- AWS re:Invent 2023 cost-optimization strategies- Advanced integration patterns"
SUS03-BP01,Optimize software and architecture for asynchronous and scheduled jobs,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_software_a2.html,Sustainability,Software and architecture,Medium,"**Compliance Control for Efficient Architecture Patterns**To maintain high resource utilization, avoid overprovisioning and use queue-driven architectures. Implement event-driven patterns like AWS Batch job queues, Amazon SQS with Spot Instances, and scheduling with Amazon EventBridge Scheduler. Right-size components with AWS Compute Optimizer. Benefits include minimized idle resources and improved efficiency. Risk of medium if best practices aren't followed."
SUS03-BP02,Remove or refactor workload components with low or no use,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_software_a3.html,Sustainability,Software and architecture,Medium,"**Compliance Control for AWS Workload Optimization (max 500 chars)**Regularly check resource utilization, use AWS Compute Optimizer, and monitor AWS CloudWatch metrics. Identify and remove unused components, refactor underutilized ones, and automate cleanup. Continually monitor and adjust based on demand or new services. Establish this to minimize waste and improve efficiency, reducing medium risk from unused resources. **Related: AWS Trusted Advisor, Amazon CloudWatch, Rightsizing Recommendations**"
SUS03-BP03,Optimize areas of code that consume the most time or resources,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_software_a4.html,Sustainability,Software and architecture,Medium,"**Compliance Control Summary (max 500 chars):**Optimize code for resource usage to minimize waste and maximize performance. Avoid common anti-patterns like ignoring code optimization and responding to performance issues by increasing resources. Implement automated code reviews and use tools like Amazon CodeGuru to detect bugs and anti-patterns. Employ efficient algorithms, profiling, and continuous monitoring to enhance performance. Medium risk if best practices aren't established."
SUS03-BP04,Optimize impact on devices and equipment,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_software_a5.html,Sustainability,Software and architecture,Medium,"**Compliance Control (max 500 chars):**Adopt best practices to minimize environmental impact of cloud workloads by understanding and optimizing device usage. Avoid ignoring device impact, manual updates, and inefficient applications. Implement energy-efficient devices, optimize applications for low power, use OTA updates, and engage sustainable suppliers. Monitor and improve energy usage to reduce overall footprint. Benefits include reduced hardware replacements, lower energy consumption, and minimized data transfers. Medium risk if not established.**Related Docs & Videos:**AWS Device Farm, AppStream 2.0, NICE DCV, OTA FreeRTOS, IoT Sustainability, AWS re:Invent 2023."
SUS03-BP05,Use software patterns and architectures that best support data access and storage patterns,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_software_a6.html,Sustainability,Software and architecture,Medium,"**Compliance Control for Data Management Best Practices**Ensure your workload’s data usage, transfer, and storage align with access patterns. Adopt software patterns minimizing compute, networking, and storage resources. Avoid common anti-patterns like uniform data storage assumptions and single-tier storage. Benefits include reduced complexity and better resource utilization. Without these practices, medium risk arises. Analyze data type, growth, durability, and access patterns. Use optimal architecture patterns and purpose-built services for efficient data processing. Minimize data transfer with suitable network protocols. Related resources include AWS re:Invent sessions and purpose-built database and analytics services."
SUS04-BP01,Implement a data classification policy,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_data_a2.html,Sustainability,Data management,Medium,"**Compliance Control for Data Classification:****Objective:** Classify data to determine its criticality and select energy-efficient storage tiers.**Common Anti-Patterns:**- Not identifying data assets by characteristics (sensitivity, criticality, regulatory).- Lack of a data catalog.**Benefits:** - Energy-efficient storage tier selection.**Risk Level:** Medium**Actions:**1. **Data Inventory:** Catalog data types.2. **Data Grouping:** Assess criticality, confidentiality, integrity, and availability.3. **Classification Levels:** Define and tag data (public, confidential).4. **Review:** Regularly audit for unclassified data.5. **Data Catalog:** Establish for governance.6. **Documentation:** Record policies and procedures.**Related Resources:** AWS Cloud, Tag policies, AWS re:Invent videos."
SUS04-BP02,Use technologies that support data access and storage patterns,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_data_a3.html,Sustainability,Data management,Low,"**Compliance Control for Storage Technologies**Choose storage technologies that match data access and storage patterns to minimize resource use. Avoid these anti-patterns: assuming all workloads fit one storage tier, expecting consistent data access, and using a single storage tier. Benefits include reduced cloud resources and improved efficiency. If not established, risk is low. Align storage solutions with access patterns and evaluate data type, growth, durability, and access frequency. Use AWS storage like Amazon S3, S3 Glacier, EFS, FSx, EBS, Aurora, RDS, Redshift, and DynamoDB based on these factors. Automate storage allocation with tools like Amazon CloudWatch. Select appropriate storage classes and lifecycle policies for Amazon S3. Related resources include Amazon EBS volume types, EC2 instance store, and S3 Intelligent-Tiering."
SUS04-BP03,Use policies to manage the lifecycle of your datasets,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_data_a4.html,Sustainability,Data management,Medium,"**Compliance Control for Data Lifecycle Management**Automate data lifecycle policies to enforce deletion and transition to energy-efficient storage tiers. Avoid manual deletion, retain all data unnecessarily, or ignore storage tier changes based on access patterns. Benefits include efficient data access, regulatory compliance, and lower energy costs. Medium risk if not established. Use data classification, define handling rules, and enable automation via lifecycle policies on AWS services like Amazon S3, EBS, EFS, ECR, and MediaStore. Delete unused assets and aggregate/compress data where applicable."
SUS04-BP04,Use elasticity and automation to expand block storage or file system,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_data_a5.html,Sustainability,Data management,Medium,"Establish a compliance control to utilize elasticity and automation for scaling block storage and file systems as data grows, minimizing over-provisioned storage. Avoid large upfront procurements and monitor utilization to optimize resource efficiency. Benefits include reduced idle resources and improved workload efficiency. Medium risk if unaddressed. Automate storage size adjustments and choose appropriate storage classes for optimal performance without excess provisioning. Regularly review and resize volumes. Related: Amazon EBS Elastic Volumes, Amazon FSx, Amazon EFS."
SUS04-BP05,Remove unneeded or redundant data,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_data_a6.html,Sustainability,Data management,Medium,"To minimize storage resources, remove unneeded data, avoid redundancy, and leverage native AWS features for optimal compliance. Key actions include:- **Remove Unneeded Data**: Regularly delete irrelevant data to reduce storage size and environmental impact.- **Evaluate Public Datasets**: Use AWS Data Exchange and Open Data on AWS to avoid storing redundant data.- **Deduplicate Data**: Use AWS Lake Formation FindMatches, Amazon FSx data deduplication, and Amazon S3 to eliminate redundant datasets.- **Use Lifecycle Policies**: Automate data deletion with Amazon S3 Lifecycle, DynamoDB Time To Live, and CloudWatch log retention.- **Optimize Backups**: Use incremental backups and leverage native durability of Amazon S3 and Amazon EBS.- **Efficient Logging and Caching**: Centralize logs, deduplicate entries, and use efficient caching with monitoring and automation.This practice reduces storage costs and environmental footprint, while ensuring compliance."
SUS04-BP06,Use shared file systems or storage to access common data,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_data_a7.html,Sustainability,Data management,Medium,"To optimize your infrastructure, adopt shared file systems or storage to avoid data duplication. Avoid provisioning individual storage for each client, detach unused volumes, and ensure data access across platforms. Benefits include reduced storage needs and efficient compute use. Risks of non-compliance are medium, especially with multiple users accessing the same datasets. Use shared storage to centralize data management, enforce consistency, and utilize compute resources efficiently. Examples on AWS include Amazon EBS Multi-Attach, Amazon EFS, Amazon FSx, and Amazon S3. Fetch data as needed and delete unneeded data. For more, see related documents and videos on storage optimization."
SUS04-BP07,Minimize data movement across networks,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_data_a8.html,Sustainability,Data management,Medium,"To minimize networking resources and environmental impact, use shared file systems or object storage for common data. Avoid storing all data in the same AWS Region and optimize data size before transfer. Benefits include reduced networking resource use and lower environmental impact. Risks of not following best practices are medium due to resource demands in data movement. Techniques to minimize data movement include: using proximity to data/users, partitioning Regionally-consumed services, using efficient file formats, and avoiding moving unused data. Related AWS services: Lambda@Edge, CloudFront Functions, AWS IoT Greengrass. Docs: Optimizing AWS Infrastructure for Sustainability, AWS Global Infrastructure, Amazon CloudFront, etc."
SUS04-BP08,Back up data only when difficult to recreate,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_data_a9.html,Sustainability,Data management,Medium,"To optimize compliance and minimize storage resource use, avoid backing up non-critical data. Establish a data classification policy and design a backup strategy based on criticality, recovery time, and point objectives. Use automated services like AWS Backup to manage critical data. Exclude easily recreated, ephemeral, and local copies unless SLAs dictate otherwise. This approach reduces costs and environmental impact while ensuring necessary data protection."
SUS05-BP01,Use the minimum amount of hardware to meet your needs,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_hardware_a2.html,Sustainability,Hardware and services,Medium,**Compliance Control for Efficient Workload Resource Management****Anti-patterns to avoid:**- Lack of resource utilization monitoring- Unnecessary static hardware- No review of resource resizing- No alignment of hardware goals with business KPIs**Benefits:**- Reduces environmental impact- Saves costs- Maintains performance**Risks:**- Medium risk from inefficient resource allocation**Implementation:**- Choose optimal instance types- Use AWS Auto Scaling and APIs for dynamic resource adjustments- Leverage rightsizing tools for efficient resource operation**Steps:**1. Select appropriate instance types2. Scale using small increments3. Balance compute options for flexibility and cost4. Utilize rightsizing recommendations from AWS tools5. Negotiate SLAs for capacity adjustments**Related resources:**- AWS Compute Optimizer- Auto Scaling documentation- Sustainability and cost-optimization videos
SUS05-BP02,Use instance types with the least impact,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_hardware_a3.html,Sustainability,Hardware and services,Medium,"To ensure compliance with energy efficiency and cost optimization in AWS, continuously monitor and leverage new instance types for improvements. Avoid anti-patterns like using only one instance family or not evaluating new types. Benefits include reduced environmental impact and costs. Establish a best practice to assess new instance types and use AWS tools like Compute Optimizer. For more insights, explore AWS Graviton instances, machine learning-specific hardware, and Spot Instances for stateless workloads. Regularly optimize using metrics and AWS rightsizing tools. For guidance, review related labs and documentation."
SUS05-BP03,Use managed services,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_hardware_a4.html,Sustainability,Hardware and services,Medium,"To optimize cloud operations, leverage AWS managed services for efficiency. Avoid low-utilization EC2 instances; instead, use managed services like Amazon RDS and AWS Fargate. Benefits include AWS's innovation insights and shared environmental impact. Risks of inaction include missed innovation and sustainability. Steps: inventory, identify, migrate, test, and monitor. Use AWS Discovery Service and TCO Calculator. Related: AWS docs, videos on managed services."
SUS05-BP04,Optimize your use of hardware-based compute accelerators,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_hardware_a5.html,Sustainability,Hardware and services,Medium,"To optimize accelerated computing instances, monitor GPU usage, use purpose-built instances for better performance and cost-efficiency, and automate the release of unused instances. Benefits include reduced physical infrastructure demands. If not optimized, risks are medium due to inefficient resource use. Utilize AWS Trainium, Inferentia, and DL1 instances for machine learning. Collect metrics with CloudWatch and rightsize hardware settings. Stay updated with latest libraries and drivers. Related resources: AWS documentation, videos, and talks on GPU instance selection and deep learning optimization."
SUS06-BP01,Communicate and cascade your sustainability goals,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_dev_a1.html,Sustainability,Process and culture,Medium,"**IT Sustainability Compliance Control (500 chars max)**Ensure IT teams align with sustainability goals by optimizing systems, minimizing carbon footprints, and leveraging cloud solutions for carbon accounting. Train teams on cloud workloads' environmental impact, prioritize initiatives, and involve employees. Establish measurable goals, use cloud tools for tracking emissions, and monitor resource usage. Foster a sustainability culture through training and incentives. Failure to adopt these practices exposes medium risk to sustainability objectives."
SUS06-BP02,Adopt methods that can rapidly introduce sustainability improvements,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_dev_a2.html,Sustainability,Process and culture,Medium,"**Compliance Control for Sustainability Improvements**Implement methods to validate and deploy incremental sustainability enhancements. Avoid one-time reviews and cumbersome release processes. Establish mechanisms to continuously improve resource efficiency. Use MVPs for cost-effective testing and automate CI/CD pipelines. Train team members on sustainability impacts. Assess and adjust improvements. Establish this to mitigate medium risk. Related: AWS sustainability docs, videos, and examples."
SUS06-BP03,Keep your workload up-to-date,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_dev_a3.html,Sustainability,Process and culture,Low,"Compliance Control for Software Updates (Max 500 chars)Maintain workload efficiency by regularly updating software. Avoid static architecture assumptions, lack of evaluation cadence, and outdated systems. Benefits include new features, issue resolution, and performance gains. Risks include reduced efficiency and sustainability. Establish a process, conduct inventory, learn update procedures, automate with CI/CD and AWS tools, and refer to AWS Architecture Center, Developer Tools, re:Invent, and Systems Manager for guidance."
SUS06-BP04,Increase utilization of build environments,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_dev_a4.html,Sustainability,Process and culture,Low,"**Compliance Control for Resource Utilization in Build Environments (500 chars max)**To enhance efficiency, automate and use infrastructure-as-code for build environments. Avoid manual provisioning/termination, and keep environments idle outside team hours. Utilize burst capacity, Spot Instances, and serverless tech. Align test environments with production. Implement auto-scaling and adopt cloud services for secure access. Related: AWS Systems Manager, EC2 Burstable instances, AWS CloudFormation, AWS CodeBuild, Instance Scheduler. Watch AWS re:Invent 2023 for CI/CD insights."
SUS06-BP05,Use managed device farms for testing,https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sus_sus_dev_a5.html,Sustainability,Process and culture,Low,"**Compliance Control for Managed Device Farms****Objective:** Ensure efficient testing of new features across diverse devices using managed device farms.**Best Practice:** Use managed device farms to test applications on a wide range of devices, avoiding manual testing on individual devices.**Requirements:** Define testing needs, select a suitable device farm (e.g., AWS Device Farm), and integrate with CI/CD for automation.**Benefits:** Streamlines testing, eliminates in-house infrastructure, and supports diverse device types.**Risk:** Low risk if not established; avoids unnecessary device upgrades and sustainability impacts.**Related Resources:** AWS Device Farm, Amazon CloudWatch RUM, CI/CD integration, sample apps, and related videos."
